
Lab4_MCU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002ec0  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002fcc  08002fcc  00003fcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002ff0  08002ff0  000040f0  2**0
                  CONTENTS
  4 .ARM          00000000  08002ff0  08002ff0  000040f0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002ff0  08002ff0  000040f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002ff0  08002ff0  00003ff0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002ff4  08002ff4  00003ff4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000f0  20000000  08002ff8  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003cc  200000f0  080030e8  000040f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004bc  080030e8  000044bc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000040f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000089d4  00000000  00000000  00004119  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c94  00000000  00000000  0000caed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ad0  00000000  00000000  0000e788  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000824  00000000  00000000  0000f258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017173  00000000  00000000  0000fa7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d795  00000000  00000000  00026bef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082380  00000000  00000000  00034384  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b6704  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000029b8  00000000  00000000  000b6748  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  000b9100  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000f0 	.word	0x200000f0
 8000128:	00000000 	.word	0x00000000
 800012c:	08002fb4 	.word	0x08002fb4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000f4 	.word	0x200000f4
 8000148:	08002fb4 	.word	0x08002fb4

0800014c <isButtonPressed>:
int keyReg2[10] = {NORMAL_STATE};
int keyReg3[10] = {NORMAL_STATE};
int TimeOutForKeyPress =  200;
int button_flag[10];

int isButtonPressed(int index) {
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
    if (button_flag[index] == 1) {
 8000154:	4a09      	ldr	r2, [pc, #36]	@ (800017c <isButtonPressed+0x30>)
 8000156:	687b      	ldr	r3, [r7, #4]
 8000158:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800015c:	2b01      	cmp	r3, #1
 800015e:	d106      	bne.n	800016e <isButtonPressed+0x22>
        button_flag[index] = 0;
 8000160:	4a06      	ldr	r2, [pc, #24]	@ (800017c <isButtonPressed+0x30>)
 8000162:	687b      	ldr	r3, [r7, #4]
 8000164:	2100      	movs	r1, #0
 8000166:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        return 1;
 800016a:	2301      	movs	r3, #1
 800016c:	e000      	b.n	8000170 <isButtonPressed+0x24>
    }
    return 0;
 800016e:	2300      	movs	r3, #0
}
 8000170:	4618      	mov	r0, r3
 8000172:	370c      	adds	r7, #12
 8000174:	46bd      	mov	sp, r7
 8000176:	bc80      	pop	{r7}
 8000178:	4770      	bx	lr
 800017a:	bf00      	nop
 800017c:	2000010c 	.word	0x2000010c

08000180 <getKeyInput>:

void getKeyInput() {
 8000180:	b580      	push	{r7, lr}
 8000182:	b082      	sub	sp, #8
 8000184:	af00      	add	r7, sp, #0
    for (int i = 0; i < 10; i++) {
 8000186:	2300      	movs	r3, #0
 8000188:	607b      	str	r3, [r7, #4]
 800018a:	e081      	b.n	8000290 <getKeyInput+0x110>
        keyReg2[i] = keyReg1[i];
 800018c:	4a45      	ldr	r2, [pc, #276]	@ (80002a4 <getKeyInput+0x124>)
 800018e:	687b      	ldr	r3, [r7, #4]
 8000190:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000194:	4944      	ldr	r1, [pc, #272]	@ (80002a8 <getKeyInput+0x128>)
 8000196:	687b      	ldr	r3, [r7, #4]
 8000198:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        keyReg1[i] = keyReg0[i];
 800019c:	4a43      	ldr	r2, [pc, #268]	@ (80002ac <getKeyInput+0x12c>)
 800019e:	687b      	ldr	r3, [r7, #4]
 80001a0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001a4:	493f      	ldr	r1, [pc, #252]	@ (80002a4 <getKeyInput+0x124>)
 80001a6:	687b      	ldr	r3, [r7, #4]
 80001a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        if (i == 0) {
 80001ac:	687b      	ldr	r3, [r7, #4]
 80001ae:	2b00      	cmp	r3, #0
 80001b0:	d10b      	bne.n	80001ca <getKeyInput+0x4a>
        	//đọc chân button1
        	keyReg0[i] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13);
 80001b2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80001b6:	483e      	ldr	r0, [pc, #248]	@ (80002b0 <getKeyInput+0x130>)
 80001b8:	f001 fece 	bl	8001f58 <HAL_GPIO_ReadPin>
 80001bc:	4603      	mov	r3, r0
 80001be:	4619      	mov	r1, r3
 80001c0:	4a3a      	ldr	r2, [pc, #232]	@ (80002ac <getKeyInput+0x12c>)
 80001c2:	687b      	ldr	r3, [r7, #4]
 80001c4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80001c8:	e01c      	b.n	8000204 <getKeyInput+0x84>
        }
        else if (i == 1) {
 80001ca:	687b      	ldr	r3, [r7, #4]
 80001cc:	2b01      	cmp	r3, #1
 80001ce:	d10b      	bne.n	80001e8 <getKeyInput+0x68>
        	//đọc chân button2
        	keyReg0[i] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14);
 80001d0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80001d4:	4836      	ldr	r0, [pc, #216]	@ (80002b0 <getKeyInput+0x130>)
 80001d6:	f001 febf 	bl	8001f58 <HAL_GPIO_ReadPin>
 80001da:	4603      	mov	r3, r0
 80001dc:	4619      	mov	r1, r3
 80001de:	4a33      	ldr	r2, [pc, #204]	@ (80002ac <getKeyInput+0x12c>)
 80001e0:	687b      	ldr	r3, [r7, #4]
 80001e2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80001e6:	e00d      	b.n	8000204 <getKeyInput+0x84>
        }
        else if (i == 2) {
 80001e8:	687b      	ldr	r3, [r7, #4]
 80001ea:	2b02      	cmp	r3, #2
 80001ec:	d10a      	bne.n	8000204 <getKeyInput+0x84>
        	//đọc chân button3
        	keyReg0[i] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15);
 80001ee:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80001f2:	482f      	ldr	r0, [pc, #188]	@ (80002b0 <getKeyInput+0x130>)
 80001f4:	f001 feb0 	bl	8001f58 <HAL_GPIO_ReadPin>
 80001f8:	4603      	mov	r3, r0
 80001fa:	4619      	mov	r1, r3
 80001fc:	4a2b      	ldr	r2, [pc, #172]	@ (80002ac <getKeyInput+0x12c>)
 80001fe:	687b      	ldr	r3, [r7, #4]
 8000200:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        }

        if ((keyReg2[i] == keyReg1[i]) && (keyReg1[i] == keyReg0[i])) {
 8000204:	4a28      	ldr	r2, [pc, #160]	@ (80002a8 <getKeyInput+0x128>)
 8000206:	687b      	ldr	r3, [r7, #4]
 8000208:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800020c:	4925      	ldr	r1, [pc, #148]	@ (80002a4 <getKeyInput+0x124>)
 800020e:	687b      	ldr	r3, [r7, #4]
 8000210:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000214:	429a      	cmp	r2, r3
 8000216:	d138      	bne.n	800028a <getKeyInput+0x10a>
 8000218:	4a22      	ldr	r2, [pc, #136]	@ (80002a4 <getKeyInput+0x124>)
 800021a:	687b      	ldr	r3, [r7, #4]
 800021c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000220:	4922      	ldr	r1, [pc, #136]	@ (80002ac <getKeyInput+0x12c>)
 8000222:	687b      	ldr	r3, [r7, #4]
 8000224:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000228:	429a      	cmp	r2, r3
 800022a:	d12e      	bne.n	800028a <getKeyInput+0x10a>
        	if (keyReg0[i] != keyReg3[i]) {
 800022c:	4a1f      	ldr	r2, [pc, #124]	@ (80002ac <getKeyInput+0x12c>)
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000234:	491f      	ldr	r1, [pc, #124]	@ (80002b4 <getKeyInput+0x134>)
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800023c:	429a      	cmp	r2, r3
 800023e:	d016      	beq.n	800026e <getKeyInput+0xee>
                keyReg3[i] = keyReg0[i];
 8000240:	4a1a      	ldr	r2, [pc, #104]	@ (80002ac <getKeyInput+0x12c>)
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000248:	491a      	ldr	r1, [pc, #104]	@ (80002b4 <getKeyInput+0x134>)
 800024a:	687b      	ldr	r3, [r7, #4]
 800024c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

                if (keyReg0[i] == PRESSED_STATE) {
 8000250:	4a16      	ldr	r2, [pc, #88]	@ (80002ac <getKeyInput+0x12c>)
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000258:	2b00      	cmp	r3, #0
 800025a:	d116      	bne.n	800028a <getKeyInput+0x10a>
                	TimeOutForKeyPress = 200;
 800025c:	4b16      	ldr	r3, [pc, #88]	@ (80002b8 <getKeyInput+0x138>)
 800025e:	22c8      	movs	r2, #200	@ 0xc8
 8000260:	601a      	str	r2, [r3, #0]
                    button_flag[i] = 1;
 8000262:	4a16      	ldr	r2, [pc, #88]	@ (80002bc <getKeyInput+0x13c>)
 8000264:	687b      	ldr	r3, [r7, #4]
 8000266:	2101      	movs	r1, #1
 8000268:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 800026c:	e00d      	b.n	800028a <getKeyInput+0x10a>
                }
            }
        	else {
        		TimeOutForKeyPress--;
 800026e:	4b12      	ldr	r3, [pc, #72]	@ (80002b8 <getKeyInput+0x138>)
 8000270:	681b      	ldr	r3, [r3, #0]
 8000272:	3b01      	subs	r3, #1
 8000274:	4a10      	ldr	r2, [pc, #64]	@ (80002b8 <getKeyInput+0x138>)
 8000276:	6013      	str	r3, [r2, #0]
        		if (TimeOutForKeyPress == 0) {
 8000278:	4b0f      	ldr	r3, [pc, #60]	@ (80002b8 <getKeyInput+0x138>)
 800027a:	681b      	ldr	r3, [r3, #0]
 800027c:	2b00      	cmp	r3, #0
 800027e:	d104      	bne.n	800028a <getKeyInput+0x10a>
        			keyReg0[i] = NORMAL_STATE;
 8000280:	4a0a      	ldr	r2, [pc, #40]	@ (80002ac <getKeyInput+0x12c>)
 8000282:	687b      	ldr	r3, [r7, #4]
 8000284:	2101      	movs	r1, #1
 8000286:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (int i = 0; i < 10; i++) {
 800028a:	687b      	ldr	r3, [r7, #4]
 800028c:	3301      	adds	r3, #1
 800028e:	607b      	str	r3, [r7, #4]
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	2b09      	cmp	r3, #9
 8000294:	f77f af7a 	ble.w	800018c <getKeyInput+0xc>
        		}
        	}

        }
    }
}
 8000298:	bf00      	nop
 800029a:	bf00      	nop
 800029c:	3708      	adds	r7, #8
 800029e:	46bd      	mov	sp, r7
 80002a0:	bd80      	pop	{r7, pc}
 80002a2:	bf00      	nop
 80002a4:	20000028 	.word	0x20000028
 80002a8:	20000050 	.word	0x20000050
 80002ac:	20000000 	.word	0x20000000
 80002b0:	40010c00 	.word	0x40010c00
 80002b4:	20000078 	.word	0x20000078
 80002b8:	200000a0 	.word	0x200000a0
 80002bc:	2000010c 	.word	0x2000010c

080002c0 <fsm_traffic_ver>:

//biến trạng thái đèn giao thông chiều dọc và ngang
int status_traffic_ver = RED_VER;
int status_traffic_hor = GREEN_HOR;

void fsm_traffic_ver() {
 80002c0:	b580      	push	{r7, lr}
 80002c2:	af00      	add	r7, sp, #0
	switch (status_traffic_ver) {
 80002c4:	4b4b      	ldr	r3, [pc, #300]	@ (80003f4 <fsm_traffic_ver+0x134>)
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	2b07      	cmp	r3, #7
 80002ca:	d033      	beq.n	8000334 <fsm_traffic_ver+0x74>
 80002cc:	2b07      	cmp	r3, #7
 80002ce:	f300 808e 	bgt.w	80003ee <fsm_traffic_ver+0x12e>
 80002d2:	2b05      	cmp	r3, #5
 80002d4:	d002      	beq.n	80002dc <fsm_traffic_ver+0x1c>
 80002d6:	2b06      	cmp	r3, #6
 80002d8:	d058      	beq.n	800038c <fsm_traffic_ver+0xcc>
				time_yellow_ver_temp = time_yellow_ver;
				status_traffic_ver = RED_VER;
			}
			break;
	}
}
 80002da:	e088      	b.n	80003ee <fsm_traffic_ver+0x12e>
			red_led_ver();
 80002dc:	f001 fa28 	bl	8001730 <red_led_ver>
			led_buffer_ver[0] = time_red_ver_temp / 10;
 80002e0:	4b45      	ldr	r3, [pc, #276]	@ (80003f8 <fsm_traffic_ver+0x138>)
 80002e2:	681b      	ldr	r3, [r3, #0]
 80002e4:	4a45      	ldr	r2, [pc, #276]	@ (80003fc <fsm_traffic_ver+0x13c>)
 80002e6:	fb82 1203 	smull	r1, r2, r2, r3
 80002ea:	1092      	asrs	r2, r2, #2
 80002ec:	17db      	asrs	r3, r3, #31
 80002ee:	1ad3      	subs	r3, r2, r3
 80002f0:	4a43      	ldr	r2, [pc, #268]	@ (8000400 <fsm_traffic_ver+0x140>)
 80002f2:	6013      	str	r3, [r2, #0]
			led_buffer_ver[1] = time_red_ver_temp % 10;
 80002f4:	4b40      	ldr	r3, [pc, #256]	@ (80003f8 <fsm_traffic_ver+0x138>)
 80002f6:	6819      	ldr	r1, [r3, #0]
 80002f8:	4b40      	ldr	r3, [pc, #256]	@ (80003fc <fsm_traffic_ver+0x13c>)
 80002fa:	fb83 2301 	smull	r2, r3, r3, r1
 80002fe:	109a      	asrs	r2, r3, #2
 8000300:	17cb      	asrs	r3, r1, #31
 8000302:	1ad2      	subs	r2, r2, r3
 8000304:	4613      	mov	r3, r2
 8000306:	009b      	lsls	r3, r3, #2
 8000308:	4413      	add	r3, r2
 800030a:	005b      	lsls	r3, r3, #1
 800030c:	1aca      	subs	r2, r1, r3
 800030e:	4b3c      	ldr	r3, [pc, #240]	@ (8000400 <fsm_traffic_ver+0x140>)
 8000310:	605a      	str	r2, [r3, #4]
			time_red_ver_temp--;
 8000312:	4b39      	ldr	r3, [pc, #228]	@ (80003f8 <fsm_traffic_ver+0x138>)
 8000314:	681b      	ldr	r3, [r3, #0]
 8000316:	3b01      	subs	r3, #1
 8000318:	4a37      	ldr	r2, [pc, #220]	@ (80003f8 <fsm_traffic_ver+0x138>)
 800031a:	6013      	str	r3, [r2, #0]
			if (time_red_ver_temp == 0) {
 800031c:	4b36      	ldr	r3, [pc, #216]	@ (80003f8 <fsm_traffic_ver+0x138>)
 800031e:	681b      	ldr	r3, [r3, #0]
 8000320:	2b00      	cmp	r3, #0
 8000322:	d15f      	bne.n	80003e4 <fsm_traffic_ver+0x124>
				time_red_ver_temp = time_red_ver;
 8000324:	4b37      	ldr	r3, [pc, #220]	@ (8000404 <fsm_traffic_ver+0x144>)
 8000326:	681b      	ldr	r3, [r3, #0]
 8000328:	4a33      	ldr	r2, [pc, #204]	@ (80003f8 <fsm_traffic_ver+0x138>)
 800032a:	6013      	str	r3, [r2, #0]
				status_traffic_ver = GREEN_VER;
 800032c:	4b31      	ldr	r3, [pc, #196]	@ (80003f4 <fsm_traffic_ver+0x134>)
 800032e:	2207      	movs	r2, #7
 8000330:	601a      	str	r2, [r3, #0]
			break;
 8000332:	e057      	b.n	80003e4 <fsm_traffic_ver+0x124>
			green_led_ver();
 8000334:	f001 fa28 	bl	8001788 <green_led_ver>
			led_buffer_ver[0] = time_green_ver_temp / 10;
 8000338:	4b33      	ldr	r3, [pc, #204]	@ (8000408 <fsm_traffic_ver+0x148>)
 800033a:	681b      	ldr	r3, [r3, #0]
 800033c:	4a2f      	ldr	r2, [pc, #188]	@ (80003fc <fsm_traffic_ver+0x13c>)
 800033e:	fb82 1203 	smull	r1, r2, r2, r3
 8000342:	1092      	asrs	r2, r2, #2
 8000344:	17db      	asrs	r3, r3, #31
 8000346:	1ad3      	subs	r3, r2, r3
 8000348:	4a2d      	ldr	r2, [pc, #180]	@ (8000400 <fsm_traffic_ver+0x140>)
 800034a:	6013      	str	r3, [r2, #0]
			led_buffer_ver[1] = time_green_ver_temp % 10;
 800034c:	4b2e      	ldr	r3, [pc, #184]	@ (8000408 <fsm_traffic_ver+0x148>)
 800034e:	6819      	ldr	r1, [r3, #0]
 8000350:	4b2a      	ldr	r3, [pc, #168]	@ (80003fc <fsm_traffic_ver+0x13c>)
 8000352:	fb83 2301 	smull	r2, r3, r3, r1
 8000356:	109a      	asrs	r2, r3, #2
 8000358:	17cb      	asrs	r3, r1, #31
 800035a:	1ad2      	subs	r2, r2, r3
 800035c:	4613      	mov	r3, r2
 800035e:	009b      	lsls	r3, r3, #2
 8000360:	4413      	add	r3, r2
 8000362:	005b      	lsls	r3, r3, #1
 8000364:	1aca      	subs	r2, r1, r3
 8000366:	4b26      	ldr	r3, [pc, #152]	@ (8000400 <fsm_traffic_ver+0x140>)
 8000368:	605a      	str	r2, [r3, #4]
			time_green_ver_temp--;
 800036a:	4b27      	ldr	r3, [pc, #156]	@ (8000408 <fsm_traffic_ver+0x148>)
 800036c:	681b      	ldr	r3, [r3, #0]
 800036e:	3b01      	subs	r3, #1
 8000370:	4a25      	ldr	r2, [pc, #148]	@ (8000408 <fsm_traffic_ver+0x148>)
 8000372:	6013      	str	r3, [r2, #0]
			if (time_green_ver_temp == 0) {
 8000374:	4b24      	ldr	r3, [pc, #144]	@ (8000408 <fsm_traffic_ver+0x148>)
 8000376:	681b      	ldr	r3, [r3, #0]
 8000378:	2b00      	cmp	r3, #0
 800037a:	d135      	bne.n	80003e8 <fsm_traffic_ver+0x128>
				time_green_ver_temp = time_green_ver;
 800037c:	4b23      	ldr	r3, [pc, #140]	@ (800040c <fsm_traffic_ver+0x14c>)
 800037e:	681b      	ldr	r3, [r3, #0]
 8000380:	4a21      	ldr	r2, [pc, #132]	@ (8000408 <fsm_traffic_ver+0x148>)
 8000382:	6013      	str	r3, [r2, #0]
				status_traffic_ver = YELLOW_VER;
 8000384:	4b1b      	ldr	r3, [pc, #108]	@ (80003f4 <fsm_traffic_ver+0x134>)
 8000386:	2206      	movs	r2, #6
 8000388:	601a      	str	r2, [r3, #0]
			break;
 800038a:	e02d      	b.n	80003e8 <fsm_traffic_ver+0x128>
			yellow_led_ver();
 800038c:	f001 f9e6 	bl	800175c <yellow_led_ver>
			led_buffer_ver[0] = time_yellow_ver_temp / 10;
 8000390:	4b1f      	ldr	r3, [pc, #124]	@ (8000410 <fsm_traffic_ver+0x150>)
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	4a19      	ldr	r2, [pc, #100]	@ (80003fc <fsm_traffic_ver+0x13c>)
 8000396:	fb82 1203 	smull	r1, r2, r2, r3
 800039a:	1092      	asrs	r2, r2, #2
 800039c:	17db      	asrs	r3, r3, #31
 800039e:	1ad3      	subs	r3, r2, r3
 80003a0:	4a17      	ldr	r2, [pc, #92]	@ (8000400 <fsm_traffic_ver+0x140>)
 80003a2:	6013      	str	r3, [r2, #0]
			led_buffer_ver[1] = time_yellow_ver_temp % 10;
 80003a4:	4b1a      	ldr	r3, [pc, #104]	@ (8000410 <fsm_traffic_ver+0x150>)
 80003a6:	6819      	ldr	r1, [r3, #0]
 80003a8:	4b14      	ldr	r3, [pc, #80]	@ (80003fc <fsm_traffic_ver+0x13c>)
 80003aa:	fb83 2301 	smull	r2, r3, r3, r1
 80003ae:	109a      	asrs	r2, r3, #2
 80003b0:	17cb      	asrs	r3, r1, #31
 80003b2:	1ad2      	subs	r2, r2, r3
 80003b4:	4613      	mov	r3, r2
 80003b6:	009b      	lsls	r3, r3, #2
 80003b8:	4413      	add	r3, r2
 80003ba:	005b      	lsls	r3, r3, #1
 80003bc:	1aca      	subs	r2, r1, r3
 80003be:	4b10      	ldr	r3, [pc, #64]	@ (8000400 <fsm_traffic_ver+0x140>)
 80003c0:	605a      	str	r2, [r3, #4]
			time_yellow_ver_temp--;
 80003c2:	4b13      	ldr	r3, [pc, #76]	@ (8000410 <fsm_traffic_ver+0x150>)
 80003c4:	681b      	ldr	r3, [r3, #0]
 80003c6:	3b01      	subs	r3, #1
 80003c8:	4a11      	ldr	r2, [pc, #68]	@ (8000410 <fsm_traffic_ver+0x150>)
 80003ca:	6013      	str	r3, [r2, #0]
			if (time_yellow_ver_temp == 0) {
 80003cc:	4b10      	ldr	r3, [pc, #64]	@ (8000410 <fsm_traffic_ver+0x150>)
 80003ce:	681b      	ldr	r3, [r3, #0]
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	d10b      	bne.n	80003ec <fsm_traffic_ver+0x12c>
				time_yellow_ver_temp = time_yellow_ver;
 80003d4:	4b0f      	ldr	r3, [pc, #60]	@ (8000414 <fsm_traffic_ver+0x154>)
 80003d6:	681b      	ldr	r3, [r3, #0]
 80003d8:	4a0d      	ldr	r2, [pc, #52]	@ (8000410 <fsm_traffic_ver+0x150>)
 80003da:	6013      	str	r3, [r2, #0]
				status_traffic_ver = RED_VER;
 80003dc:	4b05      	ldr	r3, [pc, #20]	@ (80003f4 <fsm_traffic_ver+0x134>)
 80003de:	2205      	movs	r2, #5
 80003e0:	601a      	str	r2, [r3, #0]
			break;
 80003e2:	e003      	b.n	80003ec <fsm_traffic_ver+0x12c>
			break;
 80003e4:	bf00      	nop
 80003e6:	e002      	b.n	80003ee <fsm_traffic_ver+0x12e>
			break;
 80003e8:	bf00      	nop
 80003ea:	e000      	b.n	80003ee <fsm_traffic_ver+0x12e>
			break;
 80003ec:	bf00      	nop
}
 80003ee:	bf00      	nop
 80003f0:	bd80      	pop	{r7, pc}
 80003f2:	bf00      	nop
 80003f4:	200000a4 	.word	0x200000a4
 80003f8:	200000bc 	.word	0x200000bc
 80003fc:	66666667 	.word	0x66666667
 8000400:	2000013c 	.word	0x2000013c
 8000404:	200000b4 	.word	0x200000b4
 8000408:	200000dc 	.word	0x200000dc
 800040c:	200000d4 	.word	0x200000d4
 8000410:	200000cc 	.word	0x200000cc
 8000414:	200000c4 	.word	0x200000c4

08000418 <fsm_traffic_hor>:

void fsm_traffic_hor() {
 8000418:	b580      	push	{r7, lr}
 800041a:	af00      	add	r7, sp, #0
	switch (status_traffic_hor) {
 800041c:	4b4b      	ldr	r3, [pc, #300]	@ (800054c <fsm_traffic_hor+0x134>)
 800041e:	681b      	ldr	r3, [r3, #0]
 8000420:	2b0a      	cmp	r3, #10
 8000422:	d007      	beq.n	8000434 <fsm_traffic_hor+0x1c>
 8000424:	2b0a      	cmp	r3, #10
 8000426:	f300 808e 	bgt.w	8000546 <fsm_traffic_hor+0x12e>
 800042a:	2b08      	cmp	r3, #8
 800042c:	d05a      	beq.n	80004e4 <fsm_traffic_hor+0xcc>
 800042e:	2b09      	cmp	r3, #9
 8000430:	d02c      	beq.n	800048c <fsm_traffic_hor+0x74>
				time_red_hor_temp = time_red_hor;
				status_traffic_hor = GREEN_HOR;
			}
			break;
	}
}
 8000432:	e088      	b.n	8000546 <fsm_traffic_hor+0x12e>
			green_led_hor();
 8000434:	f001 f9ea 	bl	800180c <green_led_hor>
			led_buffer_hor[0] = time_green_hor_temp / 10;
 8000438:	4b45      	ldr	r3, [pc, #276]	@ (8000550 <fsm_traffic_hor+0x138>)
 800043a:	681b      	ldr	r3, [r3, #0]
 800043c:	4a45      	ldr	r2, [pc, #276]	@ (8000554 <fsm_traffic_hor+0x13c>)
 800043e:	fb82 1203 	smull	r1, r2, r2, r3
 8000442:	1092      	asrs	r2, r2, #2
 8000444:	17db      	asrs	r3, r3, #31
 8000446:	1ad3      	subs	r3, r2, r3
 8000448:	4a43      	ldr	r2, [pc, #268]	@ (8000558 <fsm_traffic_hor+0x140>)
 800044a:	6013      	str	r3, [r2, #0]
			led_buffer_hor[1] = time_green_hor_temp % 10;
 800044c:	4b40      	ldr	r3, [pc, #256]	@ (8000550 <fsm_traffic_hor+0x138>)
 800044e:	6819      	ldr	r1, [r3, #0]
 8000450:	4b40      	ldr	r3, [pc, #256]	@ (8000554 <fsm_traffic_hor+0x13c>)
 8000452:	fb83 2301 	smull	r2, r3, r3, r1
 8000456:	109a      	asrs	r2, r3, #2
 8000458:	17cb      	asrs	r3, r1, #31
 800045a:	1ad2      	subs	r2, r2, r3
 800045c:	4613      	mov	r3, r2
 800045e:	009b      	lsls	r3, r3, #2
 8000460:	4413      	add	r3, r2
 8000462:	005b      	lsls	r3, r3, #1
 8000464:	1aca      	subs	r2, r1, r3
 8000466:	4b3c      	ldr	r3, [pc, #240]	@ (8000558 <fsm_traffic_hor+0x140>)
 8000468:	605a      	str	r2, [r3, #4]
			time_green_hor_temp--;
 800046a:	4b39      	ldr	r3, [pc, #228]	@ (8000550 <fsm_traffic_hor+0x138>)
 800046c:	681b      	ldr	r3, [r3, #0]
 800046e:	3b01      	subs	r3, #1
 8000470:	4a37      	ldr	r2, [pc, #220]	@ (8000550 <fsm_traffic_hor+0x138>)
 8000472:	6013      	str	r3, [r2, #0]
			if (time_green_hor_temp == 0) {
 8000474:	4b36      	ldr	r3, [pc, #216]	@ (8000550 <fsm_traffic_hor+0x138>)
 8000476:	681b      	ldr	r3, [r3, #0]
 8000478:	2b00      	cmp	r3, #0
 800047a:	d15f      	bne.n	800053c <fsm_traffic_hor+0x124>
				time_green_hor_temp = time_green_hor;
 800047c:	4b37      	ldr	r3, [pc, #220]	@ (800055c <fsm_traffic_hor+0x144>)
 800047e:	681b      	ldr	r3, [r3, #0]
 8000480:	4a33      	ldr	r2, [pc, #204]	@ (8000550 <fsm_traffic_hor+0x138>)
 8000482:	6013      	str	r3, [r2, #0]
				status_traffic_hor = YELLOW_HOR;
 8000484:	4b31      	ldr	r3, [pc, #196]	@ (800054c <fsm_traffic_hor+0x134>)
 8000486:	2209      	movs	r2, #9
 8000488:	601a      	str	r2, [r3, #0]
			break;
 800048a:	e057      	b.n	800053c <fsm_traffic_hor+0x124>
			yellow_led_hor();
 800048c:	f001 f9a8 	bl	80017e0 <yellow_led_hor>
			led_buffer_hor[0] = time_yellow_hor_temp / 10;
 8000490:	4b33      	ldr	r3, [pc, #204]	@ (8000560 <fsm_traffic_hor+0x148>)
 8000492:	681b      	ldr	r3, [r3, #0]
 8000494:	4a2f      	ldr	r2, [pc, #188]	@ (8000554 <fsm_traffic_hor+0x13c>)
 8000496:	fb82 1203 	smull	r1, r2, r2, r3
 800049a:	1092      	asrs	r2, r2, #2
 800049c:	17db      	asrs	r3, r3, #31
 800049e:	1ad3      	subs	r3, r2, r3
 80004a0:	4a2d      	ldr	r2, [pc, #180]	@ (8000558 <fsm_traffic_hor+0x140>)
 80004a2:	6013      	str	r3, [r2, #0]
			led_buffer_hor[1] = time_yellow_hor_temp % 10;
 80004a4:	4b2e      	ldr	r3, [pc, #184]	@ (8000560 <fsm_traffic_hor+0x148>)
 80004a6:	6819      	ldr	r1, [r3, #0]
 80004a8:	4b2a      	ldr	r3, [pc, #168]	@ (8000554 <fsm_traffic_hor+0x13c>)
 80004aa:	fb83 2301 	smull	r2, r3, r3, r1
 80004ae:	109a      	asrs	r2, r3, #2
 80004b0:	17cb      	asrs	r3, r1, #31
 80004b2:	1ad2      	subs	r2, r2, r3
 80004b4:	4613      	mov	r3, r2
 80004b6:	009b      	lsls	r3, r3, #2
 80004b8:	4413      	add	r3, r2
 80004ba:	005b      	lsls	r3, r3, #1
 80004bc:	1aca      	subs	r2, r1, r3
 80004be:	4b26      	ldr	r3, [pc, #152]	@ (8000558 <fsm_traffic_hor+0x140>)
 80004c0:	605a      	str	r2, [r3, #4]
			time_yellow_hor_temp--;
 80004c2:	4b27      	ldr	r3, [pc, #156]	@ (8000560 <fsm_traffic_hor+0x148>)
 80004c4:	681b      	ldr	r3, [r3, #0]
 80004c6:	3b01      	subs	r3, #1
 80004c8:	4a25      	ldr	r2, [pc, #148]	@ (8000560 <fsm_traffic_hor+0x148>)
 80004ca:	6013      	str	r3, [r2, #0]
			if (time_yellow_hor_temp == 0) {
 80004cc:	4b24      	ldr	r3, [pc, #144]	@ (8000560 <fsm_traffic_hor+0x148>)
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	2b00      	cmp	r3, #0
 80004d2:	d135      	bne.n	8000540 <fsm_traffic_hor+0x128>
				time_yellow_hor_temp = time_yellow_hor;
 80004d4:	4b23      	ldr	r3, [pc, #140]	@ (8000564 <fsm_traffic_hor+0x14c>)
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	4a21      	ldr	r2, [pc, #132]	@ (8000560 <fsm_traffic_hor+0x148>)
 80004da:	6013      	str	r3, [r2, #0]
				status_traffic_hor = RED_HOR;
 80004dc:	4b1b      	ldr	r3, [pc, #108]	@ (800054c <fsm_traffic_hor+0x134>)
 80004de:	2208      	movs	r2, #8
 80004e0:	601a      	str	r2, [r3, #0]
			break;
 80004e2:	e02d      	b.n	8000540 <fsm_traffic_hor+0x128>
			red_led_hor();
 80004e4:	f001 f966 	bl	80017b4 <red_led_hor>
			led_buffer_hor[0] = time_red_hor_temp / 10;
 80004e8:	4b1f      	ldr	r3, [pc, #124]	@ (8000568 <fsm_traffic_hor+0x150>)
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	4a19      	ldr	r2, [pc, #100]	@ (8000554 <fsm_traffic_hor+0x13c>)
 80004ee:	fb82 1203 	smull	r1, r2, r2, r3
 80004f2:	1092      	asrs	r2, r2, #2
 80004f4:	17db      	asrs	r3, r3, #31
 80004f6:	1ad3      	subs	r3, r2, r3
 80004f8:	4a17      	ldr	r2, [pc, #92]	@ (8000558 <fsm_traffic_hor+0x140>)
 80004fa:	6013      	str	r3, [r2, #0]
			led_buffer_hor[1] = time_red_hor_temp % 10;
 80004fc:	4b1a      	ldr	r3, [pc, #104]	@ (8000568 <fsm_traffic_hor+0x150>)
 80004fe:	6819      	ldr	r1, [r3, #0]
 8000500:	4b14      	ldr	r3, [pc, #80]	@ (8000554 <fsm_traffic_hor+0x13c>)
 8000502:	fb83 2301 	smull	r2, r3, r3, r1
 8000506:	109a      	asrs	r2, r3, #2
 8000508:	17cb      	asrs	r3, r1, #31
 800050a:	1ad2      	subs	r2, r2, r3
 800050c:	4613      	mov	r3, r2
 800050e:	009b      	lsls	r3, r3, #2
 8000510:	4413      	add	r3, r2
 8000512:	005b      	lsls	r3, r3, #1
 8000514:	1aca      	subs	r2, r1, r3
 8000516:	4b10      	ldr	r3, [pc, #64]	@ (8000558 <fsm_traffic_hor+0x140>)
 8000518:	605a      	str	r2, [r3, #4]
			time_red_hor_temp--;
 800051a:	4b13      	ldr	r3, [pc, #76]	@ (8000568 <fsm_traffic_hor+0x150>)
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	3b01      	subs	r3, #1
 8000520:	4a11      	ldr	r2, [pc, #68]	@ (8000568 <fsm_traffic_hor+0x150>)
 8000522:	6013      	str	r3, [r2, #0]
			if (time_red_hor_temp == 0) {
 8000524:	4b10      	ldr	r3, [pc, #64]	@ (8000568 <fsm_traffic_hor+0x150>)
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	2b00      	cmp	r3, #0
 800052a:	d10b      	bne.n	8000544 <fsm_traffic_hor+0x12c>
				time_red_hor_temp = time_red_hor;
 800052c:	4b0f      	ldr	r3, [pc, #60]	@ (800056c <fsm_traffic_hor+0x154>)
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	4a0d      	ldr	r2, [pc, #52]	@ (8000568 <fsm_traffic_hor+0x150>)
 8000532:	6013      	str	r3, [r2, #0]
				status_traffic_hor = GREEN_HOR;
 8000534:	4b05      	ldr	r3, [pc, #20]	@ (800054c <fsm_traffic_hor+0x134>)
 8000536:	220a      	movs	r2, #10
 8000538:	601a      	str	r2, [r3, #0]
			break;
 800053a:	e003      	b.n	8000544 <fsm_traffic_hor+0x12c>
			break;
 800053c:	bf00      	nop
 800053e:	e002      	b.n	8000546 <fsm_traffic_hor+0x12e>
			break;
 8000540:	bf00      	nop
 8000542:	e000      	b.n	8000546 <fsm_traffic_hor+0x12e>
			break;
 8000544:	bf00      	nop
}
 8000546:	bf00      	nop
 8000548:	bd80      	pop	{r7, pc}
 800054a:	bf00      	nop
 800054c:	200000a8 	.word	0x200000a8
 8000550:	200000e0 	.word	0x200000e0
 8000554:	66666667 	.word	0x66666667
 8000558:	20000144 	.word	0x20000144
 800055c:	200000d8 	.word	0x200000d8
 8000560:	200000d0 	.word	0x200000d0
 8000564:	200000c8 	.word	0x200000c8
 8000568:	200000c0 	.word	0x200000c0
 800056c:	200000b8 	.word	0x200000b8

08000570 <fsm_automatic>:

void fsm_automatic() {
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0
	if (status_system == AUTO) {
 8000574:	4b05      	ldr	r3, [pc, #20]	@ (800058c <fsm_automatic+0x1c>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	2b01      	cmp	r3, #1
 800057a:	d104      	bne.n	8000586 <fsm_automatic+0x16>
		fsm_traffic_ver();
 800057c:	f7ff fea0 	bl	80002c0 <fsm_traffic_ver>
		fsm_traffic_hor();
 8000580:	f7ff ff4a 	bl	8000418 <fsm_traffic_hor>
 8000584:	e000      	b.n	8000588 <fsm_automatic+0x18>
	}
	else return;
 8000586:	bf00      	nop
}
 8000588:	bd80      	pop	{r7, pc}
 800058a:	bf00      	nop
 800058c:	200000ac 	.word	0x200000ac

08000590 <fsm_manual>:
 */
#include "fsm_manual.h"

int status_system = AUTO;

void fsm_manual() {
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0
	switch(status_system) {
 8000594:	4b56      	ldr	r3, [pc, #344]	@ (80006f0 <fsm_manual+0x160>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	3b01      	subs	r3, #1
 800059a:	2b03      	cmp	r3, #3
 800059c:	f200 8084 	bhi.w	80006a8 <fsm_manual+0x118>
 80005a0:	a201      	add	r2, pc, #4	@ (adr r2, 80005a8 <fsm_manual+0x18>)
 80005a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005a6:	bf00      	nop
 80005a8:	080005b9 	.word	0x080005b9
 80005ac:	080005cd 	.word	0x080005cd
 80005b0:	08000603 	.word	0x08000603
 80005b4:	08000649 	.word	0x08000649
		case AUTO: //đèn hoạt động bình thường
			//button1
			if (isButtonPressed(0) == 1) {
 80005b8:	2000      	movs	r0, #0
 80005ba:	f7ff fdc7 	bl	800014c <isButtonPressed>
 80005be:	4603      	mov	r3, r0
 80005c0:	2b01      	cmp	r3, #1
 80005c2:	d16a      	bne.n	800069a <fsm_manual+0x10a>
				status_system = RED_LED;
 80005c4:	4b4a      	ldr	r3, [pc, #296]	@ (80006f0 <fsm_manual+0x160>)
 80005c6:	2202      	movs	r2, #2
 80005c8:	601a      	str	r2, [r3, #0]
			}
			break;
 80005ca:	e066      	b.n	800069a <fsm_manual+0x10a>
		case RED_LED: //thiết lập time cho 4 led red
			status_modify = RED_MODIFY;
 80005cc:	4b49      	ldr	r3, [pc, #292]	@ (80006f4 <fsm_manual+0x164>)
 80005ce:	220b      	movs	r2, #11
 80005d0:	601a      	str	r2, [r3, #0]
			//button3
			if (isButtonPressed(2) == 1) {
 80005d2:	2002      	movs	r0, #2
 80005d4:	f7ff fdba 	bl	800014c <isButtonPressed>
 80005d8:	4603      	mov	r3, r0
 80005da:	2b01      	cmp	r3, #1
 80005dc:	d107      	bne.n	80005ee <fsm_manual+0x5e>
				time_red_ver_temp = time_red_ver;
 80005de:	4b46      	ldr	r3, [pc, #280]	@ (80006f8 <fsm_manual+0x168>)
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	4a46      	ldr	r2, [pc, #280]	@ (80006fc <fsm_manual+0x16c>)
 80005e4:	6013      	str	r3, [r2, #0]
				time_red_hor_temp = time_red_hor;
 80005e6:	4b46      	ldr	r3, [pc, #280]	@ (8000700 <fsm_manual+0x170>)
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	4a46      	ldr	r2, [pc, #280]	@ (8000704 <fsm_manual+0x174>)
 80005ec:	6013      	str	r3, [r2, #0]
			}
			//button1
			if (isButtonPressed(0) == 1) {
 80005ee:	2000      	movs	r0, #0
 80005f0:	f7ff fdac 	bl	800014c <isButtonPressed>
 80005f4:	4603      	mov	r3, r0
 80005f6:	2b01      	cmp	r3, #1
 80005f8:	d151      	bne.n	800069e <fsm_manual+0x10e>
				status_system = YELLOW_LED;
 80005fa:	4b3d      	ldr	r3, [pc, #244]	@ (80006f0 <fsm_manual+0x160>)
 80005fc:	2203      	movs	r2, #3
 80005fe:	601a      	str	r2, [r3, #0]
			}
			break;
 8000600:	e04d      	b.n	800069e <fsm_manual+0x10e>
		case YELLOW_LED: //thiết lập time cho 4 led yellow
			status_modify = YELLOW_MODIFY;
 8000602:	4b3c      	ldr	r3, [pc, #240]	@ (80006f4 <fsm_manual+0x164>)
 8000604:	220c      	movs	r2, #12
 8000606:	601a      	str	r2, [r3, #0]
			//button3
			if (isButtonPressed(2) == 1) {
 8000608:	2002      	movs	r0, #2
 800060a:	f7ff fd9f 	bl	800014c <isButtonPressed>
 800060e:	4603      	mov	r3, r0
 8000610:	2b01      	cmp	r3, #1
 8000612:	d10f      	bne.n	8000634 <fsm_manual+0xa4>
				time_yellow_ver_temp = time_yellow_ver;
 8000614:	4b3c      	ldr	r3, [pc, #240]	@ (8000708 <fsm_manual+0x178>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	4a3c      	ldr	r2, [pc, #240]	@ (800070c <fsm_manual+0x17c>)
 800061a:	6013      	str	r3, [r2, #0]
				time_yellow_hor_temp = time_yellow_hor;
 800061c:	4b3c      	ldr	r3, [pc, #240]	@ (8000710 <fsm_manual+0x180>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	4a3c      	ldr	r2, [pc, #240]	@ (8000714 <fsm_manual+0x184>)
 8000622:	6013      	str	r3, [r2, #0]
				//sau khi check cập nhật lại countdown đèn đỏ
				time_red_ver_temp = time_red_ver;
 8000624:	4b34      	ldr	r3, [pc, #208]	@ (80006f8 <fsm_manual+0x168>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	4a34      	ldr	r2, [pc, #208]	@ (80006fc <fsm_manual+0x16c>)
 800062a:	6013      	str	r3, [r2, #0]
				time_red_hor_temp = time_red_hor;
 800062c:	4b34      	ldr	r3, [pc, #208]	@ (8000700 <fsm_manual+0x170>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	4a34      	ldr	r2, [pc, #208]	@ (8000704 <fsm_manual+0x174>)
 8000632:	6013      	str	r3, [r2, #0]
			}
			//button1
			if (isButtonPressed(0) == 1) {
 8000634:	2000      	movs	r0, #0
 8000636:	f7ff fd89 	bl	800014c <isButtonPressed>
 800063a:	4603      	mov	r3, r0
 800063c:	2b01      	cmp	r3, #1
 800063e:	d130      	bne.n	80006a2 <fsm_manual+0x112>
				status_system = GREEN_LED;
 8000640:	4b2b      	ldr	r3, [pc, #172]	@ (80006f0 <fsm_manual+0x160>)
 8000642:	2204      	movs	r2, #4
 8000644:	601a      	str	r2, [r3, #0]
			}
			break;
 8000646:	e02c      	b.n	80006a2 <fsm_manual+0x112>
		case GREEN_LED: ////thiết lập time cho 4 led green
			status_modify = GREEN_MODIFY;
 8000648:	4b2a      	ldr	r3, [pc, #168]	@ (80006f4 <fsm_manual+0x164>)
 800064a:	220d      	movs	r2, #13
 800064c:	601a      	str	r2, [r3, #0]
			//button3
			if (isButtonPressed(2) == 1) {
 800064e:	2002      	movs	r0, #2
 8000650:	f7ff fd7c 	bl	800014c <isButtonPressed>
 8000654:	4603      	mov	r3, r0
 8000656:	2b01      	cmp	r3, #1
 8000658:	d10f      	bne.n	800067a <fsm_manual+0xea>
				time_green_ver_temp = time_green_ver;
 800065a:	4b2f      	ldr	r3, [pc, #188]	@ (8000718 <fsm_manual+0x188>)
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	4a2f      	ldr	r2, [pc, #188]	@ (800071c <fsm_manual+0x18c>)
 8000660:	6013      	str	r3, [r2, #0]
				time_green_hor_temp = time_green_hor;
 8000662:	4b2f      	ldr	r3, [pc, #188]	@ (8000720 <fsm_manual+0x190>)
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	4a2f      	ldr	r2, [pc, #188]	@ (8000724 <fsm_manual+0x194>)
 8000668:	6013      	str	r3, [r2, #0]
				//sau khi check cập nhật lại countdown đèn đỏ
				time_red_ver_temp = time_red_ver;
 800066a:	4b23      	ldr	r3, [pc, #140]	@ (80006f8 <fsm_manual+0x168>)
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	4a23      	ldr	r2, [pc, #140]	@ (80006fc <fsm_manual+0x16c>)
 8000670:	6013      	str	r3, [r2, #0]
				time_red_hor_temp = time_red_hor;
 8000672:	4b23      	ldr	r3, [pc, #140]	@ (8000700 <fsm_manual+0x170>)
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	4a23      	ldr	r2, [pc, #140]	@ (8000704 <fsm_manual+0x174>)
 8000678:	6013      	str	r3, [r2, #0]
			}
			//button1
			if (isButtonPressed(0) == 1) {
 800067a:	2000      	movs	r0, #0
 800067c:	f7ff fd66 	bl	800014c <isButtonPressed>
 8000680:	4603      	mov	r3, r0
 8000682:	2b01      	cmp	r3, #1
 8000684:	d10f      	bne.n	80006a6 <fsm_manual+0x116>
				status_traffic_ver = RED_VER;
 8000686:	4b28      	ldr	r3, [pc, #160]	@ (8000728 <fsm_manual+0x198>)
 8000688:	2205      	movs	r2, #5
 800068a:	601a      	str	r2, [r3, #0]
				status_traffic_hor = GREEN_HOR;
 800068c:	4b27      	ldr	r3, [pc, #156]	@ (800072c <fsm_manual+0x19c>)
 800068e:	220a      	movs	r2, #10
 8000690:	601a      	str	r2, [r3, #0]
				status_system = AUTO;
 8000692:	4b17      	ldr	r3, [pc, #92]	@ (80006f0 <fsm_manual+0x160>)
 8000694:	2201      	movs	r2, #1
 8000696:	601a      	str	r2, [r3, #0]
			}
			break;
 8000698:	e005      	b.n	80006a6 <fsm_manual+0x116>
			break;
 800069a:	bf00      	nop
 800069c:	e004      	b.n	80006a8 <fsm_manual+0x118>
			break;
 800069e:	bf00      	nop
 80006a0:	e002      	b.n	80006a8 <fsm_manual+0x118>
			break;
 80006a2:	bf00      	nop
 80006a4:	e000      	b.n	80006a8 <fsm_manual+0x118>
			break;
 80006a6:	bf00      	nop
	}
	//hiển thị led
	update_7SEG_ver(idx_vertical);
 80006a8:	4b21      	ldr	r3, [pc, #132]	@ (8000730 <fsm_manual+0x1a0>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	4618      	mov	r0, r3
 80006ae:	f000 fc87 	bl	8000fc0 <update_7SEG_ver>
	idx_vertical++;
 80006b2:	4b1f      	ldr	r3, [pc, #124]	@ (8000730 <fsm_manual+0x1a0>)
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	3301      	adds	r3, #1
 80006b8:	4a1d      	ldr	r2, [pc, #116]	@ (8000730 <fsm_manual+0x1a0>)
 80006ba:	6013      	str	r3, [r2, #0]
	if(idx_vertical == 2) {
 80006bc:	4b1c      	ldr	r3, [pc, #112]	@ (8000730 <fsm_manual+0x1a0>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	2b02      	cmp	r3, #2
 80006c2:	d102      	bne.n	80006ca <fsm_manual+0x13a>
		idx_vertical = 0;
 80006c4:	4b1a      	ldr	r3, [pc, #104]	@ (8000730 <fsm_manual+0x1a0>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	601a      	str	r2, [r3, #0]
	}

	update_7SEG_hor(idx_horizontal);
 80006ca:	4b1a      	ldr	r3, [pc, #104]	@ (8000734 <fsm_manual+0x1a4>)
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	4618      	mov	r0, r3
 80006d0:	f000 fcac 	bl	800102c <update_7SEG_hor>
	idx_horizontal++;
 80006d4:	4b17      	ldr	r3, [pc, #92]	@ (8000734 <fsm_manual+0x1a4>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	3301      	adds	r3, #1
 80006da:	4a16      	ldr	r2, [pc, #88]	@ (8000734 <fsm_manual+0x1a4>)
 80006dc:	6013      	str	r3, [r2, #0]
	if (idx_horizontal == 2) {
 80006de:	4b15      	ldr	r3, [pc, #84]	@ (8000734 <fsm_manual+0x1a4>)
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	2b02      	cmp	r3, #2
 80006e4:	d102      	bne.n	80006ec <fsm_manual+0x15c>
		idx_horizontal = 0;
 80006e6:	4b13      	ldr	r3, [pc, #76]	@ (8000734 <fsm_manual+0x1a4>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	601a      	str	r2, [r3, #0]
	}
}
 80006ec:	bf00      	nop
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	200000ac 	.word	0x200000ac
 80006f4:	200000b0 	.word	0x200000b0
 80006f8:	200000b4 	.word	0x200000b4
 80006fc:	200000bc 	.word	0x200000bc
 8000700:	200000b8 	.word	0x200000b8
 8000704:	200000c0 	.word	0x200000c0
 8000708:	200000c4 	.word	0x200000c4
 800070c:	200000cc 	.word	0x200000cc
 8000710:	200000c8 	.word	0x200000c8
 8000714:	200000d0 	.word	0x200000d0
 8000718:	200000d4 	.word	0x200000d4
 800071c:	200000dc 	.word	0x200000dc
 8000720:	200000d8 	.word	0x200000d8
 8000724:	200000e0 	.word	0x200000e0
 8000728:	200000a4 	.word	0x200000a4
 800072c:	200000a8 	.word	0x200000a8
 8000730:	20000134 	.word	0x20000134
 8000734:	20000138 	.word	0x20000138

08000738 <fsm_setting>:
 */
#include "fsm_setting.h"

int status_modify = RED_MODIFY;

void fsm_setting() {
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
	if (status_system == AUTO) {
 800073c:	4b6a      	ldr	r3, [pc, #424]	@ (80008e8 <fsm_setting+0x1b0>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	2b01      	cmp	r3, #1
 8000742:	f000 80cf 	beq.w	80008e4 <fsm_setting+0x1ac>
		return;
	}
	switch (status_modify) {
 8000746:	4b69      	ldr	r3, [pc, #420]	@ (80008ec <fsm_setting+0x1b4>)
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	2b0d      	cmp	r3, #13
 800074c:	f000 8083 	beq.w	8000856 <fsm_setting+0x11e>
 8000750:	2b0d      	cmp	r3, #13
 8000752:	f300 80c8 	bgt.w	80008e6 <fsm_setting+0x1ae>
 8000756:	2b0b      	cmp	r3, #11
 8000758:	d002      	beq.n	8000760 <fsm_setting+0x28>
 800075a:	2b0c      	cmp	r3, #12
 800075c:	d034      	beq.n	80007c8 <fsm_setting+0x90>
 800075e:	e0c2      	b.n	80008e6 <fsm_setting+0x1ae>
		case RED_MODIFY:
			//tắt đèn vàng và xanh
			turn_off_yellow_green();
 8000760:	f001 f896 	bl	8001890 <turn_off_yellow_green>
			//nhấp nháy đèn đỏ
			toggle_red_led();
 8000764:	f001 f868 	bl	8001838 <toggle_red_led>

			//button2
			if (isButtonPressed(1) == 1) {
 8000768:	2001      	movs	r0, #1
 800076a:	f7ff fcef 	bl	800014c <isButtonPressed>
 800076e:	4603      	mov	r3, r0
 8000770:	2b01      	cmp	r3, #1
 8000772:	d109      	bne.n	8000788 <fsm_setting+0x50>
				time_red_ver++;
 8000774:	4b5e      	ldr	r3, [pc, #376]	@ (80008f0 <fsm_setting+0x1b8>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	3301      	adds	r3, #1
 800077a:	4a5d      	ldr	r2, [pc, #372]	@ (80008f0 <fsm_setting+0x1b8>)
 800077c:	6013      	str	r3, [r2, #0]
				time_red_hor++;
 800077e:	4b5d      	ldr	r3, [pc, #372]	@ (80008f4 <fsm_setting+0x1bc>)
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	3301      	adds	r3, #1
 8000784:	4a5b      	ldr	r2, [pc, #364]	@ (80008f4 <fsm_setting+0x1bc>)
 8000786:	6013      	str	r3, [r2, #0]
			}
			//update buffer
			led_buffer_ver[0] = time_red_ver / 10;
 8000788:	4b59      	ldr	r3, [pc, #356]	@ (80008f0 <fsm_setting+0x1b8>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	4a5a      	ldr	r2, [pc, #360]	@ (80008f8 <fsm_setting+0x1c0>)
 800078e:	fb82 1203 	smull	r1, r2, r2, r3
 8000792:	1092      	asrs	r2, r2, #2
 8000794:	17db      	asrs	r3, r3, #31
 8000796:	1ad3      	subs	r3, r2, r3
 8000798:	4a58      	ldr	r2, [pc, #352]	@ (80008fc <fsm_setting+0x1c4>)
 800079a:	6013      	str	r3, [r2, #0]
			led_buffer_ver[1] = time_red_ver % 10;
 800079c:	4b54      	ldr	r3, [pc, #336]	@ (80008f0 <fsm_setting+0x1b8>)
 800079e:	6819      	ldr	r1, [r3, #0]
 80007a0:	4b55      	ldr	r3, [pc, #340]	@ (80008f8 <fsm_setting+0x1c0>)
 80007a2:	fb83 2301 	smull	r2, r3, r3, r1
 80007a6:	109a      	asrs	r2, r3, #2
 80007a8:	17cb      	asrs	r3, r1, #31
 80007aa:	1ad2      	subs	r2, r2, r3
 80007ac:	4613      	mov	r3, r2
 80007ae:	009b      	lsls	r3, r3, #2
 80007b0:	4413      	add	r3, r2
 80007b2:	005b      	lsls	r3, r3, #1
 80007b4:	1aca      	subs	r2, r1, r3
 80007b6:	4b51      	ldr	r3, [pc, #324]	@ (80008fc <fsm_setting+0x1c4>)
 80007b8:	605a      	str	r2, [r3, #4]
			led_buffer_hor[0] = 0;
 80007ba:	4b51      	ldr	r3, [pc, #324]	@ (8000900 <fsm_setting+0x1c8>)
 80007bc:	2200      	movs	r2, #0
 80007be:	601a      	str	r2, [r3, #0]
			led_buffer_hor[1] = 1;
 80007c0:	4b4f      	ldr	r3, [pc, #316]	@ (8000900 <fsm_setting+0x1c8>)
 80007c2:	2201      	movs	r2, #1
 80007c4:	605a      	str	r2, [r3, #4]
			break;
 80007c6:	e08e      	b.n	80008e6 <fsm_setting+0x1ae>
		case YELLOW_MODIFY:
			//tắt đèn đỏ và xanh
			turn_off_red_green();
 80007c8:	f001 f87e 	bl	80018c8 <turn_off_red_green>
			//nhấp nháy đèn vàng
			toggle_yellow_led();
 80007cc:	f001 f842 	bl	8001854 <toggle_yellow_led>
			//button2
			if (isButtonPressed(1) == 1) {
 80007d0:	2001      	movs	r0, #1
 80007d2:	f7ff fcbb 	bl	800014c <isButtonPressed>
 80007d6:	4603      	mov	r3, r0
 80007d8:	2b01      	cmp	r3, #1
 80007da:	d11c      	bne.n	8000816 <fsm_setting+0xde>
				time_yellow_ver++;
 80007dc:	4b49      	ldr	r3, [pc, #292]	@ (8000904 <fsm_setting+0x1cc>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	3301      	adds	r3, #1
 80007e2:	4a48      	ldr	r2, [pc, #288]	@ (8000904 <fsm_setting+0x1cc>)
 80007e4:	6013      	str	r3, [r2, #0]
				time_yellow_hor++;
 80007e6:	4b48      	ldr	r3, [pc, #288]	@ (8000908 <fsm_setting+0x1d0>)
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	3301      	adds	r3, #1
 80007ec:	4a46      	ldr	r2, [pc, #280]	@ (8000908 <fsm_setting+0x1d0>)
 80007ee:	6013      	str	r3, [r2, #0]
				//check
				if (time_yellow_ver + time_green_ver > time_red_ver) {
 80007f0:	4b44      	ldr	r3, [pc, #272]	@ (8000904 <fsm_setting+0x1cc>)
 80007f2:	681a      	ldr	r2, [r3, #0]
 80007f4:	4b45      	ldr	r3, [pc, #276]	@ (800090c <fsm_setting+0x1d4>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	441a      	add	r2, r3
 80007fa:	4b3d      	ldr	r3, [pc, #244]	@ (80008f0 <fsm_setting+0x1b8>)
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	429a      	cmp	r2, r3
 8000800:	dd09      	ble.n	8000816 <fsm_setting+0xde>
					time_red_ver++;
 8000802:	4b3b      	ldr	r3, [pc, #236]	@ (80008f0 <fsm_setting+0x1b8>)
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	3301      	adds	r3, #1
 8000808:	4a39      	ldr	r2, [pc, #228]	@ (80008f0 <fsm_setting+0x1b8>)
 800080a:	6013      	str	r3, [r2, #0]
					time_red_hor++;
 800080c:	4b39      	ldr	r3, [pc, #228]	@ (80008f4 <fsm_setting+0x1bc>)
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	3301      	adds	r3, #1
 8000812:	4a38      	ldr	r2, [pc, #224]	@ (80008f4 <fsm_setting+0x1bc>)
 8000814:	6013      	str	r3, [r2, #0]
				}
			}
			//update buffer
			led_buffer_ver[0] = time_yellow_ver / 10;
 8000816:	4b3b      	ldr	r3, [pc, #236]	@ (8000904 <fsm_setting+0x1cc>)
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	4a37      	ldr	r2, [pc, #220]	@ (80008f8 <fsm_setting+0x1c0>)
 800081c:	fb82 1203 	smull	r1, r2, r2, r3
 8000820:	1092      	asrs	r2, r2, #2
 8000822:	17db      	asrs	r3, r3, #31
 8000824:	1ad3      	subs	r3, r2, r3
 8000826:	4a35      	ldr	r2, [pc, #212]	@ (80008fc <fsm_setting+0x1c4>)
 8000828:	6013      	str	r3, [r2, #0]
			led_buffer_ver[1] = time_yellow_ver % 10;
 800082a:	4b36      	ldr	r3, [pc, #216]	@ (8000904 <fsm_setting+0x1cc>)
 800082c:	6819      	ldr	r1, [r3, #0]
 800082e:	4b32      	ldr	r3, [pc, #200]	@ (80008f8 <fsm_setting+0x1c0>)
 8000830:	fb83 2301 	smull	r2, r3, r3, r1
 8000834:	109a      	asrs	r2, r3, #2
 8000836:	17cb      	asrs	r3, r1, #31
 8000838:	1ad2      	subs	r2, r2, r3
 800083a:	4613      	mov	r3, r2
 800083c:	009b      	lsls	r3, r3, #2
 800083e:	4413      	add	r3, r2
 8000840:	005b      	lsls	r3, r3, #1
 8000842:	1aca      	subs	r2, r1, r3
 8000844:	4b2d      	ldr	r3, [pc, #180]	@ (80008fc <fsm_setting+0x1c4>)
 8000846:	605a      	str	r2, [r3, #4]
			led_buffer_hor[0] = 0;
 8000848:	4b2d      	ldr	r3, [pc, #180]	@ (8000900 <fsm_setting+0x1c8>)
 800084a:	2200      	movs	r2, #0
 800084c:	601a      	str	r2, [r3, #0]
			led_buffer_hor[1] = 2;
 800084e:	4b2c      	ldr	r3, [pc, #176]	@ (8000900 <fsm_setting+0x1c8>)
 8000850:	2202      	movs	r2, #2
 8000852:	605a      	str	r2, [r3, #4]
			break;
 8000854:	e047      	b.n	80008e6 <fsm_setting+0x1ae>
		case GREEN_MODIFY:
			//tắt đèn đỏ và vàng
			turn_off_red_yellow();
 8000856:	f001 f853 	bl	8001900 <turn_off_red_yellow>
			//nhấp nháy đèn xanh
			toggle_green_led();
 800085a:	f001 f809 	bl	8001870 <toggle_green_led>
			//button2
			if (isButtonPressed(1) == 1) {
 800085e:	2001      	movs	r0, #1
 8000860:	f7ff fc74 	bl	800014c <isButtonPressed>
 8000864:	4603      	mov	r3, r0
 8000866:	2b01      	cmp	r3, #1
 8000868:	d11c      	bne.n	80008a4 <fsm_setting+0x16c>
				time_green_ver++;
 800086a:	4b28      	ldr	r3, [pc, #160]	@ (800090c <fsm_setting+0x1d4>)
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	3301      	adds	r3, #1
 8000870:	4a26      	ldr	r2, [pc, #152]	@ (800090c <fsm_setting+0x1d4>)
 8000872:	6013      	str	r3, [r2, #0]
				time_green_hor++;
 8000874:	4b26      	ldr	r3, [pc, #152]	@ (8000910 <fsm_setting+0x1d8>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	3301      	adds	r3, #1
 800087a:	4a25      	ldr	r2, [pc, #148]	@ (8000910 <fsm_setting+0x1d8>)
 800087c:	6013      	str	r3, [r2, #0]
				//check
				if (time_yellow_ver + time_green_ver > time_red_ver) {
 800087e:	4b21      	ldr	r3, [pc, #132]	@ (8000904 <fsm_setting+0x1cc>)
 8000880:	681a      	ldr	r2, [r3, #0]
 8000882:	4b22      	ldr	r3, [pc, #136]	@ (800090c <fsm_setting+0x1d4>)
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	441a      	add	r2, r3
 8000888:	4b19      	ldr	r3, [pc, #100]	@ (80008f0 <fsm_setting+0x1b8>)
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	429a      	cmp	r2, r3
 800088e:	dd09      	ble.n	80008a4 <fsm_setting+0x16c>
					time_red_ver++;
 8000890:	4b17      	ldr	r3, [pc, #92]	@ (80008f0 <fsm_setting+0x1b8>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	3301      	adds	r3, #1
 8000896:	4a16      	ldr	r2, [pc, #88]	@ (80008f0 <fsm_setting+0x1b8>)
 8000898:	6013      	str	r3, [r2, #0]
					time_red_hor++;
 800089a:	4b16      	ldr	r3, [pc, #88]	@ (80008f4 <fsm_setting+0x1bc>)
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	3301      	adds	r3, #1
 80008a0:	4a14      	ldr	r2, [pc, #80]	@ (80008f4 <fsm_setting+0x1bc>)
 80008a2:	6013      	str	r3, [r2, #0]
				}
			}
			//update buffer
			led_buffer_ver[0] = time_green_ver / 10;
 80008a4:	4b19      	ldr	r3, [pc, #100]	@ (800090c <fsm_setting+0x1d4>)
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	4a13      	ldr	r2, [pc, #76]	@ (80008f8 <fsm_setting+0x1c0>)
 80008aa:	fb82 1203 	smull	r1, r2, r2, r3
 80008ae:	1092      	asrs	r2, r2, #2
 80008b0:	17db      	asrs	r3, r3, #31
 80008b2:	1ad3      	subs	r3, r2, r3
 80008b4:	4a11      	ldr	r2, [pc, #68]	@ (80008fc <fsm_setting+0x1c4>)
 80008b6:	6013      	str	r3, [r2, #0]
			led_buffer_ver[1] = time_green_ver % 10;
 80008b8:	4b14      	ldr	r3, [pc, #80]	@ (800090c <fsm_setting+0x1d4>)
 80008ba:	6819      	ldr	r1, [r3, #0]
 80008bc:	4b0e      	ldr	r3, [pc, #56]	@ (80008f8 <fsm_setting+0x1c0>)
 80008be:	fb83 2301 	smull	r2, r3, r3, r1
 80008c2:	109a      	asrs	r2, r3, #2
 80008c4:	17cb      	asrs	r3, r1, #31
 80008c6:	1ad2      	subs	r2, r2, r3
 80008c8:	4613      	mov	r3, r2
 80008ca:	009b      	lsls	r3, r3, #2
 80008cc:	4413      	add	r3, r2
 80008ce:	005b      	lsls	r3, r3, #1
 80008d0:	1aca      	subs	r2, r1, r3
 80008d2:	4b0a      	ldr	r3, [pc, #40]	@ (80008fc <fsm_setting+0x1c4>)
 80008d4:	605a      	str	r2, [r3, #4]
			led_buffer_hor[0] = 0;
 80008d6:	4b0a      	ldr	r3, [pc, #40]	@ (8000900 <fsm_setting+0x1c8>)
 80008d8:	2200      	movs	r2, #0
 80008da:	601a      	str	r2, [r3, #0]
			led_buffer_hor[1] = 3;
 80008dc:	4b08      	ldr	r3, [pc, #32]	@ (8000900 <fsm_setting+0x1c8>)
 80008de:	2203      	movs	r2, #3
 80008e0:	605a      	str	r2, [r3, #4]
			break;
 80008e2:	e000      	b.n	80008e6 <fsm_setting+0x1ae>
		return;
 80008e4:	bf00      	nop
	}
}
 80008e6:	bd80      	pop	{r7, pc}
 80008e8:	200000ac 	.word	0x200000ac
 80008ec:	200000b0 	.word	0x200000b0
 80008f0:	200000b4 	.word	0x200000b4
 80008f4:	200000b8 	.word	0x200000b8
 80008f8:	66666667 	.word	0x66666667
 80008fc:	2000013c 	.word	0x2000013c
 8000900:	20000144 	.word	0x20000144
 8000904:	200000c4 	.word	0x200000c4
 8000908:	200000c8 	.word	0x200000c8
 800090c:	200000d4 	.word	0x200000d4
 8000910:	200000d8 	.word	0x200000d8

08000914 <display7SEG_ver>:
//biến giá trị đầu vào của 7SEG;
int led_buffer_ver[2] = {0, 0};
int led_buffer_hor[2] = {0, 0};

//hiển thị led7
void display7SEG_ver(int num) {
 8000914:	b580      	push	{r7, lr}
 8000916:	b082      	sub	sp, #8
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
	if (num == 0) {
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	2b00      	cmp	r3, #0
 8000920:	d129      	bne.n	8000976 <display7SEG_ver+0x62>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8000922:	2200      	movs	r2, #0
 8000924:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000928:	48cf      	ldr	r0, [pc, #828]	@ (8000c68 <display7SEG_ver+0x354>)
 800092a:	f001 fb2c 	bl	8001f86 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 800092e:	2200      	movs	r2, #0
 8000930:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000934:	48cc      	ldr	r0, [pc, #816]	@ (8000c68 <display7SEG_ver+0x354>)
 8000936:	f001 fb26 	bl	8001f86 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 800093a:	2200      	movs	r2, #0
 800093c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000940:	48c9      	ldr	r0, [pc, #804]	@ (8000c68 <display7SEG_ver+0x354>)
 8000942:	f001 fb20 	bl	8001f86 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8000946:	2200      	movs	r2, #0
 8000948:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800094c:	48c6      	ldr	r0, [pc, #792]	@ (8000c68 <display7SEG_ver+0x354>)
 800094e:	f001 fb1a 	bl	8001f86 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_13, GPIO_PIN_RESET);
 8000952:	2200      	movs	r2, #0
 8000954:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000958:	48c3      	ldr	r0, [pc, #780]	@ (8000c68 <display7SEG_ver+0x354>)
 800095a:	f001 fb14 	bl	8001f86 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_14, GPIO_PIN_RESET);
 800095e:	2200      	movs	r2, #0
 8000960:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000964:	48c0      	ldr	r0, [pc, #768]	@ (8000c68 <display7SEG_ver+0x354>)
 8000966:	f001 fb0e 	bl	8001f86 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 800096a:	2201      	movs	r2, #1
 800096c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000970:	48bd      	ldr	r0, [pc, #756]	@ (8000c68 <display7SEG_ver+0x354>)
 8000972:	f001 fb08 	bl	8001f86 <HAL_GPIO_WritePin>
	}

	if (num == 1) {
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	2b01      	cmp	r3, #1
 800097a:	d129      	bne.n	80009d0 <display7SEG_ver+0xbc>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 800097c:	2201      	movs	r2, #1
 800097e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000982:	48b9      	ldr	r0, [pc, #740]	@ (8000c68 <display7SEG_ver+0x354>)
 8000984:	f001 faff 	bl	8001f86 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8000988:	2200      	movs	r2, #0
 800098a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800098e:	48b6      	ldr	r0, [pc, #728]	@ (8000c68 <display7SEG_ver+0x354>)
 8000990:	f001 faf9 	bl	8001f86 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8000994:	2200      	movs	r2, #0
 8000996:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800099a:	48b3      	ldr	r0, [pc, #716]	@ (8000c68 <display7SEG_ver+0x354>)
 800099c:	f001 faf3 	bl	8001f86 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 80009a0:	2201      	movs	r2, #1
 80009a2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80009a6:	48b0      	ldr	r0, [pc, #704]	@ (8000c68 <display7SEG_ver+0x354>)
 80009a8:	f001 faed 	bl	8001f86 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_13, GPIO_PIN_SET);
 80009ac:	2201      	movs	r2, #1
 80009ae:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80009b2:	48ad      	ldr	r0, [pc, #692]	@ (8000c68 <display7SEG_ver+0x354>)
 80009b4:	f001 fae7 	bl	8001f86 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_14, GPIO_PIN_SET);
 80009b8:	2201      	movs	r2, #1
 80009ba:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80009be:	48aa      	ldr	r0, [pc, #680]	@ (8000c68 <display7SEG_ver+0x354>)
 80009c0:	f001 fae1 	bl	8001f86 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 80009c4:	2201      	movs	r2, #1
 80009c6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80009ca:	48a7      	ldr	r0, [pc, #668]	@ (8000c68 <display7SEG_ver+0x354>)
 80009cc:	f001 fadb 	bl	8001f86 <HAL_GPIO_WritePin>
	}

	if (num == 2) {
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	2b02      	cmp	r3, #2
 80009d4:	d129      	bne.n	8000a2a <display7SEG_ver+0x116>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 80009d6:	2200      	movs	r2, #0
 80009d8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80009dc:	48a2      	ldr	r0, [pc, #648]	@ (8000c68 <display7SEG_ver+0x354>)
 80009de:	f001 fad2 	bl	8001f86 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 80009e2:	2200      	movs	r2, #0
 80009e4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80009e8:	489f      	ldr	r0, [pc, #636]	@ (8000c68 <display7SEG_ver+0x354>)
 80009ea:	f001 facc 	bl	8001f86 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 80009ee:	2201      	movs	r2, #1
 80009f0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80009f4:	489c      	ldr	r0, [pc, #624]	@ (8000c68 <display7SEG_ver+0x354>)
 80009f6:	f001 fac6 	bl	8001f86 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 80009fa:	2200      	movs	r2, #0
 80009fc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000a00:	4899      	ldr	r0, [pc, #612]	@ (8000c68 <display7SEG_ver+0x354>)
 8000a02:	f001 fac0 	bl	8001f86 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_13, GPIO_PIN_RESET);
 8000a06:	2200      	movs	r2, #0
 8000a08:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000a0c:	4896      	ldr	r0, [pc, #600]	@ (8000c68 <display7SEG_ver+0x354>)
 8000a0e:	f001 faba 	bl	8001f86 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_14, GPIO_PIN_SET);
 8000a12:	2201      	movs	r2, #1
 8000a14:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000a18:	4893      	ldr	r0, [pc, #588]	@ (8000c68 <display7SEG_ver+0x354>)
 8000a1a:	f001 fab4 	bl	8001f86 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 8000a1e:	2200      	movs	r2, #0
 8000a20:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000a24:	4890      	ldr	r0, [pc, #576]	@ (8000c68 <display7SEG_ver+0x354>)
 8000a26:	f001 faae 	bl	8001f86 <HAL_GPIO_WritePin>
	}

	if (num == 3) {
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	2b03      	cmp	r3, #3
 8000a2e:	d129      	bne.n	8000a84 <display7SEG_ver+0x170>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8000a30:	2200      	movs	r2, #0
 8000a32:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000a36:	488c      	ldr	r0, [pc, #560]	@ (8000c68 <display7SEG_ver+0x354>)
 8000a38:	f001 faa5 	bl	8001f86 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000a42:	4889      	ldr	r0, [pc, #548]	@ (8000c68 <display7SEG_ver+0x354>)
 8000a44:	f001 fa9f 	bl	8001f86 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8000a48:	2200      	movs	r2, #0
 8000a4a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000a4e:	4886      	ldr	r0, [pc, #536]	@ (8000c68 <display7SEG_ver+0x354>)
 8000a50:	f001 fa99 	bl	8001f86 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8000a54:	2200      	movs	r2, #0
 8000a56:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000a5a:	4883      	ldr	r0, [pc, #524]	@ (8000c68 <display7SEG_ver+0x354>)
 8000a5c:	f001 fa93 	bl	8001f86 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_13, GPIO_PIN_SET);
 8000a60:	2201      	movs	r2, #1
 8000a62:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000a66:	4880      	ldr	r0, [pc, #512]	@ (8000c68 <display7SEG_ver+0x354>)
 8000a68:	f001 fa8d 	bl	8001f86 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_14, GPIO_PIN_SET);
 8000a6c:	2201      	movs	r2, #1
 8000a6e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000a72:	487d      	ldr	r0, [pc, #500]	@ (8000c68 <display7SEG_ver+0x354>)
 8000a74:	f001 fa87 	bl	8001f86 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 8000a78:	2200      	movs	r2, #0
 8000a7a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000a7e:	487a      	ldr	r0, [pc, #488]	@ (8000c68 <display7SEG_ver+0x354>)
 8000a80:	f001 fa81 	bl	8001f86 <HAL_GPIO_WritePin>
	}

	if (num == 4) {
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	2b04      	cmp	r3, #4
 8000a88:	d129      	bne.n	8000ade <display7SEG_ver+0x1ca>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 8000a8a:	2201      	movs	r2, #1
 8000a8c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000a90:	4875      	ldr	r0, [pc, #468]	@ (8000c68 <display7SEG_ver+0x354>)
 8000a92:	f001 fa78 	bl	8001f86 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8000a96:	2200      	movs	r2, #0
 8000a98:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000a9c:	4872      	ldr	r0, [pc, #456]	@ (8000c68 <display7SEG_ver+0x354>)
 8000a9e:	f001 fa72 	bl	8001f86 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000aa8:	486f      	ldr	r0, [pc, #444]	@ (8000c68 <display7SEG_ver+0x354>)
 8000aaa:	f001 fa6c 	bl	8001f86 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8000aae:	2201      	movs	r2, #1
 8000ab0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000ab4:	486c      	ldr	r0, [pc, #432]	@ (8000c68 <display7SEG_ver+0x354>)
 8000ab6:	f001 fa66 	bl	8001f86 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_13, GPIO_PIN_SET);
 8000aba:	2201      	movs	r2, #1
 8000abc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000ac0:	4869      	ldr	r0, [pc, #420]	@ (8000c68 <display7SEG_ver+0x354>)
 8000ac2:	f001 fa60 	bl	8001f86 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_14, GPIO_PIN_RESET);
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000acc:	4866      	ldr	r0, [pc, #408]	@ (8000c68 <display7SEG_ver+0x354>)
 8000ace:	f001 fa5a 	bl	8001f86 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000ad8:	4863      	ldr	r0, [pc, #396]	@ (8000c68 <display7SEG_ver+0x354>)
 8000ada:	f001 fa54 	bl	8001f86 <HAL_GPIO_WritePin>
	}

	if (num == 5) {
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	2b05      	cmp	r3, #5
 8000ae2:	d129      	bne.n	8000b38 <display7SEG_ver+0x224>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000aea:	485f      	ldr	r0, [pc, #380]	@ (8000c68 <display7SEG_ver+0x354>)
 8000aec:	f001 fa4b 	bl	8001f86 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8000af0:	2201      	movs	r2, #1
 8000af2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000af6:	485c      	ldr	r0, [pc, #368]	@ (8000c68 <display7SEG_ver+0x354>)
 8000af8:	f001 fa45 	bl	8001f86 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8000afc:	2200      	movs	r2, #0
 8000afe:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000b02:	4859      	ldr	r0, [pc, #356]	@ (8000c68 <display7SEG_ver+0x354>)
 8000b04:	f001 fa3f 	bl	8001f86 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8000b08:	2200      	movs	r2, #0
 8000b0a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000b0e:	4856      	ldr	r0, [pc, #344]	@ (8000c68 <display7SEG_ver+0x354>)
 8000b10:	f001 fa39 	bl	8001f86 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_13, GPIO_PIN_SET);
 8000b14:	2201      	movs	r2, #1
 8000b16:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000b1a:	4853      	ldr	r0, [pc, #332]	@ (8000c68 <display7SEG_ver+0x354>)
 8000b1c:	f001 fa33 	bl	8001f86 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_14, GPIO_PIN_RESET);
 8000b20:	2200      	movs	r2, #0
 8000b22:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000b26:	4850      	ldr	r0, [pc, #320]	@ (8000c68 <display7SEG_ver+0x354>)
 8000b28:	f001 fa2d 	bl	8001f86 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000b32:	484d      	ldr	r0, [pc, #308]	@ (8000c68 <display7SEG_ver+0x354>)
 8000b34:	f001 fa27 	bl	8001f86 <HAL_GPIO_WritePin>
	}

	if (num == 6) {
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	2b06      	cmp	r3, #6
 8000b3c:	d129      	bne.n	8000b92 <display7SEG_ver+0x27e>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8000b3e:	2200      	movs	r2, #0
 8000b40:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000b44:	4848      	ldr	r0, [pc, #288]	@ (8000c68 <display7SEG_ver+0x354>)
 8000b46:	f001 fa1e 	bl	8001f86 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8000b4a:	2201      	movs	r2, #1
 8000b4c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000b50:	4845      	ldr	r0, [pc, #276]	@ (8000c68 <display7SEG_ver+0x354>)
 8000b52:	f001 fa18 	bl	8001f86 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8000b56:	2200      	movs	r2, #0
 8000b58:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000b5c:	4842      	ldr	r0, [pc, #264]	@ (8000c68 <display7SEG_ver+0x354>)
 8000b5e:	f001 fa12 	bl	8001f86 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8000b62:	2200      	movs	r2, #0
 8000b64:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000b68:	483f      	ldr	r0, [pc, #252]	@ (8000c68 <display7SEG_ver+0x354>)
 8000b6a:	f001 fa0c 	bl	8001f86 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_13, GPIO_PIN_RESET);
 8000b6e:	2200      	movs	r2, #0
 8000b70:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000b74:	483c      	ldr	r0, [pc, #240]	@ (8000c68 <display7SEG_ver+0x354>)
 8000b76:	f001 fa06 	bl	8001f86 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_14, GPIO_PIN_RESET);
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000b80:	4839      	ldr	r0, [pc, #228]	@ (8000c68 <display7SEG_ver+0x354>)
 8000b82:	f001 fa00 	bl	8001f86 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 8000b86:	2200      	movs	r2, #0
 8000b88:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000b8c:	4836      	ldr	r0, [pc, #216]	@ (8000c68 <display7SEG_ver+0x354>)
 8000b8e:	f001 f9fa 	bl	8001f86 <HAL_GPIO_WritePin>
	}

	if (num == 7) {
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	2b07      	cmp	r3, #7
 8000b96:	d129      	bne.n	8000bec <display7SEG_ver+0x2d8>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8000b98:	2200      	movs	r2, #0
 8000b9a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000b9e:	4832      	ldr	r0, [pc, #200]	@ (8000c68 <display7SEG_ver+0x354>)
 8000ba0:	f001 f9f1 	bl	8001f86 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000baa:	482f      	ldr	r0, [pc, #188]	@ (8000c68 <display7SEG_ver+0x354>)
 8000bac:	f001 f9eb 	bl	8001f86 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000bb6:	482c      	ldr	r0, [pc, #176]	@ (8000c68 <display7SEG_ver+0x354>)
 8000bb8:	f001 f9e5 	bl	8001f86 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8000bbc:	2201      	movs	r2, #1
 8000bbe:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000bc2:	4829      	ldr	r0, [pc, #164]	@ (8000c68 <display7SEG_ver+0x354>)
 8000bc4:	f001 f9df 	bl	8001f86 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_13, GPIO_PIN_SET);
 8000bc8:	2201      	movs	r2, #1
 8000bca:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000bce:	4826      	ldr	r0, [pc, #152]	@ (8000c68 <display7SEG_ver+0x354>)
 8000bd0:	f001 f9d9 	bl	8001f86 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_14, GPIO_PIN_SET);
 8000bd4:	2201      	movs	r2, #1
 8000bd6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000bda:	4823      	ldr	r0, [pc, #140]	@ (8000c68 <display7SEG_ver+0x354>)
 8000bdc:	f001 f9d3 	bl	8001f86 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 8000be0:	2201      	movs	r2, #1
 8000be2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000be6:	4820      	ldr	r0, [pc, #128]	@ (8000c68 <display7SEG_ver+0x354>)
 8000be8:	f001 f9cd 	bl	8001f86 <HAL_GPIO_WritePin>
	}

	if (num == 8) {
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	2b08      	cmp	r3, #8
 8000bf0:	d129      	bne.n	8000c46 <display7SEG_ver+0x332>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000bf8:	481b      	ldr	r0, [pc, #108]	@ (8000c68 <display7SEG_ver+0x354>)
 8000bfa:	f001 f9c4 	bl	8001f86 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8000bfe:	2200      	movs	r2, #0
 8000c00:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000c04:	4818      	ldr	r0, [pc, #96]	@ (8000c68 <display7SEG_ver+0x354>)
 8000c06:	f001 f9be 	bl	8001f86 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000c10:	4815      	ldr	r0, [pc, #84]	@ (8000c68 <display7SEG_ver+0x354>)
 8000c12:	f001 f9b8 	bl	8001f86 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8000c16:	2200      	movs	r2, #0
 8000c18:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000c1c:	4812      	ldr	r0, [pc, #72]	@ (8000c68 <display7SEG_ver+0x354>)
 8000c1e:	f001 f9b2 	bl	8001f86 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_13, GPIO_PIN_RESET);
 8000c22:	2200      	movs	r2, #0
 8000c24:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000c28:	480f      	ldr	r0, [pc, #60]	@ (8000c68 <display7SEG_ver+0x354>)
 8000c2a:	f001 f9ac 	bl	8001f86 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_14, GPIO_PIN_RESET);
 8000c2e:	2200      	movs	r2, #0
 8000c30:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000c34:	480c      	ldr	r0, [pc, #48]	@ (8000c68 <display7SEG_ver+0x354>)
 8000c36:	f001 f9a6 	bl	8001f86 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000c40:	4809      	ldr	r0, [pc, #36]	@ (8000c68 <display7SEG_ver+0x354>)
 8000c42:	f001 f9a0 	bl	8001f86 <HAL_GPIO_WritePin>
	}

	if (num == 9) {
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	2b09      	cmp	r3, #9
 8000c4a:	d12c      	bne.n	8000ca6 <display7SEG_ver+0x392>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000c52:	4805      	ldr	r0, [pc, #20]	@ (8000c68 <display7SEG_ver+0x354>)
 8000c54:	f001 f997 	bl	8001f86 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8000c58:	2200      	movs	r2, #0
 8000c5a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000c5e:	4802      	ldr	r0, [pc, #8]	@ (8000c68 <display7SEG_ver+0x354>)
 8000c60:	f001 f991 	bl	8001f86 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8000c64:	2200      	movs	r2, #0
 8000c66:	e001      	b.n	8000c6c <display7SEG_ver+0x358>
 8000c68:	40010800 	.word	0x40010800
 8000c6c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000c70:	480f      	ldr	r0, [pc, #60]	@ (8000cb0 <display7SEG_ver+0x39c>)
 8000c72:	f001 f988 	bl	8001f86 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8000c76:	2200      	movs	r2, #0
 8000c78:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000c7c:	480c      	ldr	r0, [pc, #48]	@ (8000cb0 <display7SEG_ver+0x39c>)
 8000c7e:	f001 f982 	bl	8001f86 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_13, GPIO_PIN_SET);
 8000c82:	2201      	movs	r2, #1
 8000c84:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000c88:	4809      	ldr	r0, [pc, #36]	@ (8000cb0 <display7SEG_ver+0x39c>)
 8000c8a:	f001 f97c 	bl	8001f86 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_14, GPIO_PIN_RESET);
 8000c8e:	2200      	movs	r2, #0
 8000c90:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000c94:	4806      	ldr	r0, [pc, #24]	@ (8000cb0 <display7SEG_ver+0x39c>)
 8000c96:	f001 f976 	bl	8001f86 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000ca0:	4803      	ldr	r0, [pc, #12]	@ (8000cb0 <display7SEG_ver+0x39c>)
 8000ca2:	f001 f970 	bl	8001f86 <HAL_GPIO_WritePin>
	}
}
 8000ca6:	bf00      	nop
 8000ca8:	3708      	adds	r7, #8
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	40010800 	.word	0x40010800

08000cb4 <display7SEG_hor>:

void display7SEG_hor(int num) {
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b082      	sub	sp, #8
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
	if (num == 0) {
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d122      	bne.n	8000d08 <display7SEG_hor+0x54>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	2101      	movs	r1, #1
 8000cc6:	48bd      	ldr	r0, [pc, #756]	@ (8000fbc <display7SEG_hor+0x308>)
 8000cc8:	f001 f95d 	bl	8001f86 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 8000ccc:	2200      	movs	r2, #0
 8000cce:	2102      	movs	r1, #2
 8000cd0:	48ba      	ldr	r0, [pc, #744]	@ (8000fbc <display7SEG_hor+0x308>)
 8000cd2:	f001 f958 	bl	8001f86 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	2104      	movs	r1, #4
 8000cda:	48b8      	ldr	r0, [pc, #736]	@ (8000fbc <display7SEG_hor+0x308>)
 8000cdc:	f001 f953 	bl	8001f86 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	2108      	movs	r1, #8
 8000ce4:	48b5      	ldr	r0, [pc, #724]	@ (8000fbc <display7SEG_hor+0x308>)
 8000ce6:	f001 f94e 	bl	8001f86 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8000cea:	2200      	movs	r2, #0
 8000cec:	2110      	movs	r1, #16
 8000cee:	48b3      	ldr	r0, [pc, #716]	@ (8000fbc <display7SEG_hor+0x308>)
 8000cf0:	f001 f949 	bl	8001f86 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	2120      	movs	r1, #32
 8000cf8:	48b0      	ldr	r0, [pc, #704]	@ (8000fbc <display7SEG_hor+0x308>)
 8000cfa:	f001 f944 	bl	8001f86 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000cfe:	2201      	movs	r2, #1
 8000d00:	2140      	movs	r1, #64	@ 0x40
 8000d02:	48ae      	ldr	r0, [pc, #696]	@ (8000fbc <display7SEG_hor+0x308>)
 8000d04:	f001 f93f 	bl	8001f86 <HAL_GPIO_WritePin>
	}

	if (num == 1) {
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	2b01      	cmp	r3, #1
 8000d0c:	d122      	bne.n	8000d54 <display7SEG_hor+0xa0>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8000d0e:	2201      	movs	r2, #1
 8000d10:	2101      	movs	r1, #1
 8000d12:	48aa      	ldr	r0, [pc, #680]	@ (8000fbc <display7SEG_hor+0x308>)
 8000d14:	f001 f937 	bl	8001f86 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 8000d18:	2200      	movs	r2, #0
 8000d1a:	2102      	movs	r1, #2
 8000d1c:	48a7      	ldr	r0, [pc, #668]	@ (8000fbc <display7SEG_hor+0x308>)
 8000d1e:	f001 f932 	bl	8001f86 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 8000d22:	2200      	movs	r2, #0
 8000d24:	2104      	movs	r1, #4
 8000d26:	48a5      	ldr	r0, [pc, #660]	@ (8000fbc <display7SEG_hor+0x308>)
 8000d28:	f001 f92d 	bl	8001f86 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
 8000d2c:	2201      	movs	r2, #1
 8000d2e:	2108      	movs	r1, #8
 8000d30:	48a2      	ldr	r0, [pc, #648]	@ (8000fbc <display7SEG_hor+0x308>)
 8000d32:	f001 f928 	bl	8001f86 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 8000d36:	2201      	movs	r2, #1
 8000d38:	2110      	movs	r1, #16
 8000d3a:	48a0      	ldr	r0, [pc, #640]	@ (8000fbc <display7SEG_hor+0x308>)
 8000d3c:	f001 f923 	bl	8001f86 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8000d40:	2201      	movs	r2, #1
 8000d42:	2120      	movs	r1, #32
 8000d44:	489d      	ldr	r0, [pc, #628]	@ (8000fbc <display7SEG_hor+0x308>)
 8000d46:	f001 f91e 	bl	8001f86 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000d4a:	2201      	movs	r2, #1
 8000d4c:	2140      	movs	r1, #64	@ 0x40
 8000d4e:	489b      	ldr	r0, [pc, #620]	@ (8000fbc <display7SEG_hor+0x308>)
 8000d50:	f001 f919 	bl	8001f86 <HAL_GPIO_WritePin>
	}

	if (num == 2) {
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	2b02      	cmp	r3, #2
 8000d58:	d122      	bne.n	8000da0 <display7SEG_hor+0xec>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	2101      	movs	r1, #1
 8000d5e:	4897      	ldr	r0, [pc, #604]	@ (8000fbc <display7SEG_hor+0x308>)
 8000d60:	f001 f911 	bl	8001f86 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 8000d64:	2200      	movs	r2, #0
 8000d66:	2102      	movs	r1, #2
 8000d68:	4894      	ldr	r0, [pc, #592]	@ (8000fbc <display7SEG_hor+0x308>)
 8000d6a:	f001 f90c 	bl	8001f86 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET);
 8000d6e:	2201      	movs	r2, #1
 8000d70:	2104      	movs	r1, #4
 8000d72:	4892      	ldr	r0, [pc, #584]	@ (8000fbc <display7SEG_hor+0x308>)
 8000d74:	f001 f907 	bl	8001f86 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8000d78:	2200      	movs	r2, #0
 8000d7a:	2108      	movs	r1, #8
 8000d7c:	488f      	ldr	r0, [pc, #572]	@ (8000fbc <display7SEG_hor+0x308>)
 8000d7e:	f001 f902 	bl	8001f86 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8000d82:	2200      	movs	r2, #0
 8000d84:	2110      	movs	r1, #16
 8000d86:	488d      	ldr	r0, [pc, #564]	@ (8000fbc <display7SEG_hor+0x308>)
 8000d88:	f001 f8fd 	bl	8001f86 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8000d8c:	2201      	movs	r2, #1
 8000d8e:	2120      	movs	r1, #32
 8000d90:	488a      	ldr	r0, [pc, #552]	@ (8000fbc <display7SEG_hor+0x308>)
 8000d92:	f001 f8f8 	bl	8001f86 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000d96:	2200      	movs	r2, #0
 8000d98:	2140      	movs	r1, #64	@ 0x40
 8000d9a:	4888      	ldr	r0, [pc, #544]	@ (8000fbc <display7SEG_hor+0x308>)
 8000d9c:	f001 f8f3 	bl	8001f86 <HAL_GPIO_WritePin>
	}

	if (num == 3) {
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	2b03      	cmp	r3, #3
 8000da4:	d122      	bne.n	8000dec <display7SEG_hor+0x138>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000da6:	2200      	movs	r2, #0
 8000da8:	2101      	movs	r1, #1
 8000daa:	4884      	ldr	r0, [pc, #528]	@ (8000fbc <display7SEG_hor+0x308>)
 8000dac:	f001 f8eb 	bl	8001f86 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 8000db0:	2200      	movs	r2, #0
 8000db2:	2102      	movs	r1, #2
 8000db4:	4881      	ldr	r0, [pc, #516]	@ (8000fbc <display7SEG_hor+0x308>)
 8000db6:	f001 f8e6 	bl	8001f86 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 8000dba:	2200      	movs	r2, #0
 8000dbc:	2104      	movs	r1, #4
 8000dbe:	487f      	ldr	r0, [pc, #508]	@ (8000fbc <display7SEG_hor+0x308>)
 8000dc0:	f001 f8e1 	bl	8001f86 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	2108      	movs	r1, #8
 8000dc8:	487c      	ldr	r0, [pc, #496]	@ (8000fbc <display7SEG_hor+0x308>)
 8000dca:	f001 f8dc 	bl	8001f86 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 8000dce:	2201      	movs	r2, #1
 8000dd0:	2110      	movs	r1, #16
 8000dd2:	487a      	ldr	r0, [pc, #488]	@ (8000fbc <display7SEG_hor+0x308>)
 8000dd4:	f001 f8d7 	bl	8001f86 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8000dd8:	2201      	movs	r2, #1
 8000dda:	2120      	movs	r1, #32
 8000ddc:	4877      	ldr	r0, [pc, #476]	@ (8000fbc <display7SEG_hor+0x308>)
 8000dde:	f001 f8d2 	bl	8001f86 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000de2:	2200      	movs	r2, #0
 8000de4:	2140      	movs	r1, #64	@ 0x40
 8000de6:	4875      	ldr	r0, [pc, #468]	@ (8000fbc <display7SEG_hor+0x308>)
 8000de8:	f001 f8cd 	bl	8001f86 <HAL_GPIO_WritePin>
	}

	if (num == 4) {
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	2b04      	cmp	r3, #4
 8000df0:	d122      	bne.n	8000e38 <display7SEG_hor+0x184>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8000df2:	2201      	movs	r2, #1
 8000df4:	2101      	movs	r1, #1
 8000df6:	4871      	ldr	r0, [pc, #452]	@ (8000fbc <display7SEG_hor+0x308>)
 8000df8:	f001 f8c5 	bl	8001f86 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	2102      	movs	r1, #2
 8000e00:	486e      	ldr	r0, [pc, #440]	@ (8000fbc <display7SEG_hor+0x308>)
 8000e02:	f001 f8c0 	bl	8001f86 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 8000e06:	2200      	movs	r2, #0
 8000e08:	2104      	movs	r1, #4
 8000e0a:	486c      	ldr	r0, [pc, #432]	@ (8000fbc <display7SEG_hor+0x308>)
 8000e0c:	f001 f8bb 	bl	8001f86 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
 8000e10:	2201      	movs	r2, #1
 8000e12:	2108      	movs	r1, #8
 8000e14:	4869      	ldr	r0, [pc, #420]	@ (8000fbc <display7SEG_hor+0x308>)
 8000e16:	f001 f8b6 	bl	8001f86 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 8000e1a:	2201      	movs	r2, #1
 8000e1c:	2110      	movs	r1, #16
 8000e1e:	4867      	ldr	r0, [pc, #412]	@ (8000fbc <display7SEG_hor+0x308>)
 8000e20:	f001 f8b1 	bl	8001f86 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8000e24:	2200      	movs	r2, #0
 8000e26:	2120      	movs	r1, #32
 8000e28:	4864      	ldr	r0, [pc, #400]	@ (8000fbc <display7SEG_hor+0x308>)
 8000e2a:	f001 f8ac 	bl	8001f86 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000e2e:	2200      	movs	r2, #0
 8000e30:	2140      	movs	r1, #64	@ 0x40
 8000e32:	4862      	ldr	r0, [pc, #392]	@ (8000fbc <display7SEG_hor+0x308>)
 8000e34:	f001 f8a7 	bl	8001f86 <HAL_GPIO_WritePin>
	}

	if (num == 5) {
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	2b05      	cmp	r3, #5
 8000e3c:	d122      	bne.n	8000e84 <display7SEG_hor+0x1d0>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000e3e:	2200      	movs	r2, #0
 8000e40:	2101      	movs	r1, #1
 8000e42:	485e      	ldr	r0, [pc, #376]	@ (8000fbc <display7SEG_hor+0x308>)
 8000e44:	f001 f89f 	bl	8001f86 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 8000e48:	2201      	movs	r2, #1
 8000e4a:	2102      	movs	r1, #2
 8000e4c:	485b      	ldr	r0, [pc, #364]	@ (8000fbc <display7SEG_hor+0x308>)
 8000e4e:	f001 f89a 	bl	8001f86 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 8000e52:	2200      	movs	r2, #0
 8000e54:	2104      	movs	r1, #4
 8000e56:	4859      	ldr	r0, [pc, #356]	@ (8000fbc <display7SEG_hor+0x308>)
 8000e58:	f001 f895 	bl	8001f86 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	2108      	movs	r1, #8
 8000e60:	4856      	ldr	r0, [pc, #344]	@ (8000fbc <display7SEG_hor+0x308>)
 8000e62:	f001 f890 	bl	8001f86 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 8000e66:	2201      	movs	r2, #1
 8000e68:	2110      	movs	r1, #16
 8000e6a:	4854      	ldr	r0, [pc, #336]	@ (8000fbc <display7SEG_hor+0x308>)
 8000e6c:	f001 f88b 	bl	8001f86 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8000e70:	2200      	movs	r2, #0
 8000e72:	2120      	movs	r1, #32
 8000e74:	4851      	ldr	r0, [pc, #324]	@ (8000fbc <display7SEG_hor+0x308>)
 8000e76:	f001 f886 	bl	8001f86 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	2140      	movs	r1, #64	@ 0x40
 8000e7e:	484f      	ldr	r0, [pc, #316]	@ (8000fbc <display7SEG_hor+0x308>)
 8000e80:	f001 f881 	bl	8001f86 <HAL_GPIO_WritePin>
	}

	if (num == 6) {
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	2b06      	cmp	r3, #6
 8000e88:	d122      	bne.n	8000ed0 <display7SEG_hor+0x21c>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	2101      	movs	r1, #1
 8000e8e:	484b      	ldr	r0, [pc, #300]	@ (8000fbc <display7SEG_hor+0x308>)
 8000e90:	f001 f879 	bl	8001f86 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 8000e94:	2201      	movs	r2, #1
 8000e96:	2102      	movs	r1, #2
 8000e98:	4848      	ldr	r0, [pc, #288]	@ (8000fbc <display7SEG_hor+0x308>)
 8000e9a:	f001 f874 	bl	8001f86 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	2104      	movs	r1, #4
 8000ea2:	4846      	ldr	r0, [pc, #280]	@ (8000fbc <display7SEG_hor+0x308>)
 8000ea4:	f001 f86f 	bl	8001f86 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	2108      	movs	r1, #8
 8000eac:	4843      	ldr	r0, [pc, #268]	@ (8000fbc <display7SEG_hor+0x308>)
 8000eae:	f001 f86a 	bl	8001f86 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	2110      	movs	r1, #16
 8000eb6:	4841      	ldr	r0, [pc, #260]	@ (8000fbc <display7SEG_hor+0x308>)
 8000eb8:	f001 f865 	bl	8001f86 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	2120      	movs	r1, #32
 8000ec0:	483e      	ldr	r0, [pc, #248]	@ (8000fbc <display7SEG_hor+0x308>)
 8000ec2:	f001 f860 	bl	8001f86 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	2140      	movs	r1, #64	@ 0x40
 8000eca:	483c      	ldr	r0, [pc, #240]	@ (8000fbc <display7SEG_hor+0x308>)
 8000ecc:	f001 f85b 	bl	8001f86 <HAL_GPIO_WritePin>
	}

	if (num == 7) {
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	2b07      	cmp	r3, #7
 8000ed4:	d122      	bne.n	8000f1c <display7SEG_hor+0x268>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	2101      	movs	r1, #1
 8000eda:	4838      	ldr	r0, [pc, #224]	@ (8000fbc <display7SEG_hor+0x308>)
 8000edc:	f001 f853 	bl	8001f86 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	2102      	movs	r1, #2
 8000ee4:	4835      	ldr	r0, [pc, #212]	@ (8000fbc <display7SEG_hor+0x308>)
 8000ee6:	f001 f84e 	bl	8001f86 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 8000eea:	2200      	movs	r2, #0
 8000eec:	2104      	movs	r1, #4
 8000eee:	4833      	ldr	r0, [pc, #204]	@ (8000fbc <display7SEG_hor+0x308>)
 8000ef0:	f001 f849 	bl	8001f86 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
 8000ef4:	2201      	movs	r2, #1
 8000ef6:	2108      	movs	r1, #8
 8000ef8:	4830      	ldr	r0, [pc, #192]	@ (8000fbc <display7SEG_hor+0x308>)
 8000efa:	f001 f844 	bl	8001f86 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 8000efe:	2201      	movs	r2, #1
 8000f00:	2110      	movs	r1, #16
 8000f02:	482e      	ldr	r0, [pc, #184]	@ (8000fbc <display7SEG_hor+0x308>)
 8000f04:	f001 f83f 	bl	8001f86 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8000f08:	2201      	movs	r2, #1
 8000f0a:	2120      	movs	r1, #32
 8000f0c:	482b      	ldr	r0, [pc, #172]	@ (8000fbc <display7SEG_hor+0x308>)
 8000f0e:	f001 f83a 	bl	8001f86 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000f12:	2201      	movs	r2, #1
 8000f14:	2140      	movs	r1, #64	@ 0x40
 8000f16:	4829      	ldr	r0, [pc, #164]	@ (8000fbc <display7SEG_hor+0x308>)
 8000f18:	f001 f835 	bl	8001f86 <HAL_GPIO_WritePin>
	}

	if (num == 8) {
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	2b08      	cmp	r3, #8
 8000f20:	d122      	bne.n	8000f68 <display7SEG_hor+0x2b4>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000f22:	2200      	movs	r2, #0
 8000f24:	2101      	movs	r1, #1
 8000f26:	4825      	ldr	r0, [pc, #148]	@ (8000fbc <display7SEG_hor+0x308>)
 8000f28:	f001 f82d 	bl	8001f86 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	2102      	movs	r1, #2
 8000f30:	4822      	ldr	r0, [pc, #136]	@ (8000fbc <display7SEG_hor+0x308>)
 8000f32:	f001 f828 	bl	8001f86 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 8000f36:	2200      	movs	r2, #0
 8000f38:	2104      	movs	r1, #4
 8000f3a:	4820      	ldr	r0, [pc, #128]	@ (8000fbc <display7SEG_hor+0x308>)
 8000f3c:	f001 f823 	bl	8001f86 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8000f40:	2200      	movs	r2, #0
 8000f42:	2108      	movs	r1, #8
 8000f44:	481d      	ldr	r0, [pc, #116]	@ (8000fbc <display7SEG_hor+0x308>)
 8000f46:	f001 f81e 	bl	8001f86 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	2110      	movs	r1, #16
 8000f4e:	481b      	ldr	r0, [pc, #108]	@ (8000fbc <display7SEG_hor+0x308>)
 8000f50:	f001 f819 	bl	8001f86 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8000f54:	2200      	movs	r2, #0
 8000f56:	2120      	movs	r1, #32
 8000f58:	4818      	ldr	r0, [pc, #96]	@ (8000fbc <display7SEG_hor+0x308>)
 8000f5a:	f001 f814 	bl	8001f86 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000f5e:	2200      	movs	r2, #0
 8000f60:	2140      	movs	r1, #64	@ 0x40
 8000f62:	4816      	ldr	r0, [pc, #88]	@ (8000fbc <display7SEG_hor+0x308>)
 8000f64:	f001 f80f 	bl	8001f86 <HAL_GPIO_WritePin>
	}

	if (num == 9) {
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	2b09      	cmp	r3, #9
 8000f6c:	d122      	bne.n	8000fb4 <display7SEG_hor+0x300>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000f6e:	2200      	movs	r2, #0
 8000f70:	2101      	movs	r1, #1
 8000f72:	4812      	ldr	r0, [pc, #72]	@ (8000fbc <display7SEG_hor+0x308>)
 8000f74:	f001 f807 	bl	8001f86 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 8000f78:	2200      	movs	r2, #0
 8000f7a:	2102      	movs	r1, #2
 8000f7c:	480f      	ldr	r0, [pc, #60]	@ (8000fbc <display7SEG_hor+0x308>)
 8000f7e:	f001 f802 	bl	8001f86 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 8000f82:	2200      	movs	r2, #0
 8000f84:	2104      	movs	r1, #4
 8000f86:	480d      	ldr	r0, [pc, #52]	@ (8000fbc <display7SEG_hor+0x308>)
 8000f88:	f000 fffd 	bl	8001f86 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	2108      	movs	r1, #8
 8000f90:	480a      	ldr	r0, [pc, #40]	@ (8000fbc <display7SEG_hor+0x308>)
 8000f92:	f000 fff8 	bl	8001f86 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 8000f96:	2201      	movs	r2, #1
 8000f98:	2110      	movs	r1, #16
 8000f9a:	4808      	ldr	r0, [pc, #32]	@ (8000fbc <display7SEG_hor+0x308>)
 8000f9c:	f000 fff3 	bl	8001f86 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	2120      	movs	r1, #32
 8000fa4:	4805      	ldr	r0, [pc, #20]	@ (8000fbc <display7SEG_hor+0x308>)
 8000fa6:	f000 ffee 	bl	8001f86 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000faa:	2200      	movs	r2, #0
 8000fac:	2140      	movs	r1, #64	@ 0x40
 8000fae:	4803      	ldr	r0, [pc, #12]	@ (8000fbc <display7SEG_hor+0x308>)
 8000fb0:	f000 ffe9 	bl	8001f86 <HAL_GPIO_WritePin>
	}
}
 8000fb4:	bf00      	nop
 8000fb6:	3708      	adds	r7, #8
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	40010c00 	.word	0x40010c00

08000fc0 <update_7SEG_ver>:

void update_7SEG_ver(int idx_vertical) {
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b082      	sub	sp, #8
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
	switch (idx_vertical) {
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d003      	beq.n	8000fd6 <update_7SEG_ver+0x16>
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	2b01      	cmp	r3, #1
 8000fd2:	d011      	beq.n	8000ff8 <update_7SEG_ver+0x38>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
			display7SEG_ver(led_buffer_ver[1]);
			break;
	}
}
 8000fd4:	e021      	b.n	800101a <update_7SEG_ver+0x5a>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	2180      	movs	r1, #128	@ 0x80
 8000fda:	4812      	ldr	r0, [pc, #72]	@ (8001024 <update_7SEG_ver+0x64>)
 8000fdc:	f000 ffd3 	bl	8001f86 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 8000fe0:	2201      	movs	r2, #1
 8000fe2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000fe6:	480f      	ldr	r0, [pc, #60]	@ (8001024 <update_7SEG_ver+0x64>)
 8000fe8:	f000 ffcd 	bl	8001f86 <HAL_GPIO_WritePin>
			display7SEG_ver(led_buffer_ver[0]);
 8000fec:	4b0e      	ldr	r3, [pc, #56]	@ (8001028 <update_7SEG_ver+0x68>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f7ff fc8f 	bl	8000914 <display7SEG_ver>
			break;
 8000ff6:	e010      	b.n	800101a <update_7SEG_ver+0x5a>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8000ff8:	2201      	movs	r2, #1
 8000ffa:	2180      	movs	r1, #128	@ 0x80
 8000ffc:	4809      	ldr	r0, [pc, #36]	@ (8001024 <update_7SEG_ver+0x64>)
 8000ffe:	f000 ffc2 	bl	8001f86 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 8001002:	2200      	movs	r2, #0
 8001004:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001008:	4806      	ldr	r0, [pc, #24]	@ (8001024 <update_7SEG_ver+0x64>)
 800100a:	f000 ffbc 	bl	8001f86 <HAL_GPIO_WritePin>
			display7SEG_ver(led_buffer_ver[1]);
 800100e:	4b06      	ldr	r3, [pc, #24]	@ (8001028 <update_7SEG_ver+0x68>)
 8001010:	685b      	ldr	r3, [r3, #4]
 8001012:	4618      	mov	r0, r3
 8001014:	f7ff fc7e 	bl	8000914 <display7SEG_ver>
			break;
 8001018:	bf00      	nop
}
 800101a:	bf00      	nop
 800101c:	3708      	adds	r7, #8
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	40010c00 	.word	0x40010c00
 8001028:	2000013c 	.word	0x2000013c

0800102c <update_7SEG_hor>:

void update_7SEG_hor(int idx_horizontal) {
 800102c:	b580      	push	{r7, lr}
 800102e:	b082      	sub	sp, #8
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
	switch (idx_horizontal) {
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	2b00      	cmp	r3, #0
 8001038:	d003      	beq.n	8001042 <update_7SEG_hor+0x16>
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	2b01      	cmp	r3, #1
 800103e:	d012      	beq.n	8001066 <update_7SEG_hor+0x3a>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
			display7SEG_hor(led_buffer_hor[1]);
			break;
	}
}
 8001040:	e023      	b.n	800108a <update_7SEG_hor+0x5e>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 8001042:	2200      	movs	r2, #0
 8001044:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001048:	4812      	ldr	r0, [pc, #72]	@ (8001094 <update_7SEG_hor+0x68>)
 800104a:	f000 ff9c 	bl	8001f86 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 800104e:	2201      	movs	r2, #1
 8001050:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001054:	480f      	ldr	r0, [pc, #60]	@ (8001094 <update_7SEG_hor+0x68>)
 8001056:	f000 ff96 	bl	8001f86 <HAL_GPIO_WritePin>
			display7SEG_hor(led_buffer_hor[0]);
 800105a:	4b0f      	ldr	r3, [pc, #60]	@ (8001098 <update_7SEG_hor+0x6c>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	4618      	mov	r0, r3
 8001060:	f7ff fe28 	bl	8000cb4 <display7SEG_hor>
			break;
 8001064:	e011      	b.n	800108a <update_7SEG_hor+0x5e>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 8001066:	2201      	movs	r2, #1
 8001068:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800106c:	4809      	ldr	r0, [pc, #36]	@ (8001094 <update_7SEG_hor+0x68>)
 800106e:	f000 ff8a 	bl	8001f86 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8001072:	2200      	movs	r2, #0
 8001074:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001078:	4806      	ldr	r0, [pc, #24]	@ (8001094 <update_7SEG_hor+0x68>)
 800107a:	f000 ff84 	bl	8001f86 <HAL_GPIO_WritePin>
			display7SEG_hor(led_buffer_hor[1]);
 800107e:	4b06      	ldr	r3, [pc, #24]	@ (8001098 <update_7SEG_hor+0x6c>)
 8001080:	685b      	ldr	r3, [r3, #4]
 8001082:	4618      	mov	r0, r3
 8001084:	f7ff fe16 	bl	8000cb4 <display7SEG_hor>
			break;
 8001088:	bf00      	nop
}
 800108a:	bf00      	nop
 800108c:	3708      	adds	r7, #8
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	40010c00 	.word	0x40010c00
 8001098:	20000144 	.word	0x20000144

0800109c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010a0:	f000 fc6e 	bl	8001980 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010a4:	f000 f826 	bl	80010f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010a8:	f000 f8ac 	bl	8001204 <MX_GPIO_Init>
  MX_TIM2_Init();
 80010ac:	f000 f85e 	bl	800116c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 80010b0:	480c      	ldr	r0, [pc, #48]	@ (80010e4 <main+0x48>)
 80010b2:	f001 fbc7 	bl	8002844 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  SCH_Init();
 80010b6:	f000 f91b 	bl	80012f0 <SCH_Init>
  SCH_Add_Task(fsm_manual, 0, 500);
 80010ba:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80010be:	2100      	movs	r1, #0
 80010c0:	4809      	ldr	r0, [pc, #36]	@ (80010e8 <main+0x4c>)
 80010c2:	f000 f92f 	bl	8001324 <SCH_Add_Task>
  SCH_Add_Task(fsm_automatic, 10, 1000);
 80010c6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80010ca:	210a      	movs	r1, #10
 80010cc:	4807      	ldr	r0, [pc, #28]	@ (80010ec <main+0x50>)
 80010ce:	f000 f929 	bl	8001324 <SCH_Add_Task>
  SCH_Add_Task(fsm_setting, 20, 250);
 80010d2:	22fa      	movs	r2, #250	@ 0xfa
 80010d4:	2114      	movs	r1, #20
 80010d6:	4806      	ldr	r0, [pc, #24]	@ (80010f0 <main+0x54>)
 80010d8:	f000 f924 	bl	8001324 <SCH_Add_Task>

  while (1)
  {
	  SCH_Dispatch_Tasks();
 80010dc:	f000 f9e2 	bl	80014a4 <SCH_Dispatch_Tasks>
 80010e0:	e7fc      	b.n	80010dc <main+0x40>
 80010e2:	bf00      	nop
 80010e4:	2000014c 	.word	0x2000014c
 80010e8:	08000591 	.word	0x08000591
 80010ec:	08000571 	.word	0x08000571
 80010f0:	08000739 	.word	0x08000739

080010f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b090      	sub	sp, #64	@ 0x40
 80010f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010fa:	f107 0318 	add.w	r3, r7, #24
 80010fe:	2228      	movs	r2, #40	@ 0x28
 8001100:	2100      	movs	r1, #0
 8001102:	4618      	mov	r0, r3
 8001104:	f001 ff2a 	bl	8002f5c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001108:	1d3b      	adds	r3, r7, #4
 800110a:	2200      	movs	r2, #0
 800110c:	601a      	str	r2, [r3, #0]
 800110e:	605a      	str	r2, [r3, #4]
 8001110:	609a      	str	r2, [r3, #8]
 8001112:	60da      	str	r2, [r3, #12]
 8001114:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001116:	2302      	movs	r3, #2
 8001118:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800111a:	2301      	movs	r3, #1
 800111c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800111e:	2310      	movs	r3, #16
 8001120:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001122:	2300      	movs	r3, #0
 8001124:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001126:	f107 0318 	add.w	r3, r7, #24
 800112a:	4618      	mov	r0, r3
 800112c:	f000 ff5c 	bl	8001fe8 <HAL_RCC_OscConfig>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d001      	beq.n	800113a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8001136:	f000 f8d5 	bl	80012e4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800113a:	230f      	movs	r3, #15
 800113c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800113e:	2300      	movs	r3, #0
 8001140:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001142:	2300      	movs	r3, #0
 8001144:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001146:	2300      	movs	r3, #0
 8001148:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800114a:	2300      	movs	r3, #0
 800114c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800114e:	1d3b      	adds	r3, r7, #4
 8001150:	2100      	movs	r1, #0
 8001152:	4618      	mov	r0, r3
 8001154:	f001 f9ca 	bl	80024ec <HAL_RCC_ClockConfig>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d001      	beq.n	8001162 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800115e:	f000 f8c1 	bl	80012e4 <Error_Handler>
  }
}
 8001162:	bf00      	nop
 8001164:	3740      	adds	r7, #64	@ 0x40
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
	...

0800116c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b086      	sub	sp, #24
 8001170:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001172:	f107 0308 	add.w	r3, r7, #8
 8001176:	2200      	movs	r2, #0
 8001178:	601a      	str	r2, [r3, #0]
 800117a:	605a      	str	r2, [r3, #4]
 800117c:	609a      	str	r2, [r3, #8]
 800117e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001180:	463b      	mov	r3, r7
 8001182:	2200      	movs	r2, #0
 8001184:	601a      	str	r2, [r3, #0]
 8001186:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001188:	4b1d      	ldr	r3, [pc, #116]	@ (8001200 <MX_TIM2_Init+0x94>)
 800118a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800118e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8001190:	4b1b      	ldr	r3, [pc, #108]	@ (8001200 <MX_TIM2_Init+0x94>)
 8001192:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8001196:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001198:	4b19      	ldr	r3, [pc, #100]	@ (8001200 <MX_TIM2_Init+0x94>)
 800119a:	2200      	movs	r2, #0
 800119c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 800119e:	4b18      	ldr	r3, [pc, #96]	@ (8001200 <MX_TIM2_Init+0x94>)
 80011a0:	2209      	movs	r2, #9
 80011a2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011a4:	4b16      	ldr	r3, [pc, #88]	@ (8001200 <MX_TIM2_Init+0x94>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011aa:	4b15      	ldr	r3, [pc, #84]	@ (8001200 <MX_TIM2_Init+0x94>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80011b0:	4813      	ldr	r0, [pc, #76]	@ (8001200 <MX_TIM2_Init+0x94>)
 80011b2:	f001 faf7 	bl	80027a4 <HAL_TIM_Base_Init>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d001      	beq.n	80011c0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80011bc:	f000 f892 	bl	80012e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011c0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80011c4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80011c6:	f107 0308 	add.w	r3, r7, #8
 80011ca:	4619      	mov	r1, r3
 80011cc:	480c      	ldr	r0, [pc, #48]	@ (8001200 <MX_TIM2_Init+0x94>)
 80011ce:	f001 fc75 	bl	8002abc <HAL_TIM_ConfigClockSource>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d001      	beq.n	80011dc <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80011d8:	f000 f884 	bl	80012e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011dc:	2300      	movs	r3, #0
 80011de:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011e0:	2300      	movs	r3, #0
 80011e2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80011e4:	463b      	mov	r3, r7
 80011e6:	4619      	mov	r1, r3
 80011e8:	4805      	ldr	r0, [pc, #20]	@ (8001200 <MX_TIM2_Init+0x94>)
 80011ea:	f001 fe4d 	bl	8002e88 <HAL_TIMEx_MasterConfigSynchronization>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d001      	beq.n	80011f8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80011f4:	f000 f876 	bl	80012e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80011f8:	bf00      	nop
 80011fa:	3718      	adds	r7, #24
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	2000014c 	.word	0x2000014c

08001204 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b086      	sub	sp, #24
 8001208:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800120a:	f107 0308 	add.w	r3, r7, #8
 800120e:	2200      	movs	r2, #0
 8001210:	601a      	str	r2, [r3, #0]
 8001212:	605a      	str	r2, [r3, #4]
 8001214:	609a      	str	r2, [r3, #8]
 8001216:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001218:	4b29      	ldr	r3, [pc, #164]	@ (80012c0 <MX_GPIO_Init+0xbc>)
 800121a:	699b      	ldr	r3, [r3, #24]
 800121c:	4a28      	ldr	r2, [pc, #160]	@ (80012c0 <MX_GPIO_Init+0xbc>)
 800121e:	f043 0304 	orr.w	r3, r3, #4
 8001222:	6193      	str	r3, [r2, #24]
 8001224:	4b26      	ldr	r3, [pc, #152]	@ (80012c0 <MX_GPIO_Init+0xbc>)
 8001226:	699b      	ldr	r3, [r3, #24]
 8001228:	f003 0304 	and.w	r3, r3, #4
 800122c:	607b      	str	r3, [r7, #4]
 800122e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001230:	4b23      	ldr	r3, [pc, #140]	@ (80012c0 <MX_GPIO_Init+0xbc>)
 8001232:	699b      	ldr	r3, [r3, #24]
 8001234:	4a22      	ldr	r2, [pc, #136]	@ (80012c0 <MX_GPIO_Init+0xbc>)
 8001236:	f043 0308 	orr.w	r3, r3, #8
 800123a:	6193      	str	r3, [r2, #24]
 800123c:	4b20      	ldr	r3, [pc, #128]	@ (80012c0 <MX_GPIO_Init+0xbc>)
 800123e:	699b      	ldr	r3, [r3, #24]
 8001240:	f003 0308 	and.w	r3, r3, #8
 8001244:	603b      	str	r3, [r7, #0]
 8001246:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8001248:	2200      	movs	r2, #0
 800124a:	f64f 71fc 	movw	r1, #65532	@ 0xfffc
 800124e:	481d      	ldr	r0, [pc, #116]	@ (80012c4 <MX_GPIO_Init+0xc0>)
 8001250:	f000 fe99 	bl	8001f86 <HAL_GPIO_WritePin>
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12
 8001254:	2200      	movs	r2, #0
 8001256:	f241 31ff 	movw	r1, #5119	@ 0x13ff
 800125a:	481b      	ldr	r0, [pc, #108]	@ (80012c8 <MX_GPIO_Init+0xc4>)
 800125c:	f000 fe93 	bl	8001f86 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA2 PA3 PA4 PA5
                           PA6 PA7 PA8 PA9
                           PA10 PA11 PA12 PA13
                           PA14 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8001260:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8001264:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001266:	2301      	movs	r3, #1
 8001268:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800126a:	2300      	movs	r3, #0
 800126c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800126e:	2302      	movs	r3, #2
 8001270:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001272:	f107 0308 	add.w	r3, r7, #8
 8001276:	4619      	mov	r1, r3
 8001278:	4812      	ldr	r0, [pc, #72]	@ (80012c4 <MX_GPIO_Init+0xc0>)
 800127a:	f000 fcf1 	bl	8001c60 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB12
                           PB3 PB4 PB5 PB6
                           PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12
 800127e:	f241 33ff 	movw	r3, #5119	@ 0x13ff
 8001282:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001284:	2301      	movs	r3, #1
 8001286:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001288:	2300      	movs	r3, #0
 800128a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800128c:	2302      	movs	r3, #2
 800128e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001290:	f107 0308 	add.w	r3, r7, #8
 8001294:	4619      	mov	r1, r3
 8001296:	480c      	ldr	r0, [pc, #48]	@ (80012c8 <MX_GPIO_Init+0xc4>)
 8001298:	f000 fce2 	bl	8001c60 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800129c:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 80012a0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012a2:	2300      	movs	r3, #0
 80012a4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012a6:	2301      	movs	r3, #1
 80012a8:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012aa:	f107 0308 	add.w	r3, r7, #8
 80012ae:	4619      	mov	r1, r3
 80012b0:	4805      	ldr	r0, [pc, #20]	@ (80012c8 <MX_GPIO_Init+0xc4>)
 80012b2:	f000 fcd5 	bl	8001c60 <HAL_GPIO_Init>

}
 80012b6:	bf00      	nop
 80012b8:	3718      	adds	r7, #24
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	40021000 	.word	0x40021000
 80012c4:	40010800 	.word	0x40010800
 80012c8:	40010c00 	.word	0x40010c00

080012cc <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b082      	sub	sp, #8
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
	getKeyInput();
 80012d4:	f7fe ff54 	bl	8000180 <getKeyInput>
	SCH_Update();
 80012d8:	f000 f884 	bl	80013e4 <SCH_Update>
}
 80012dc:	bf00      	nop
 80012de:	3708      	adds	r7, #8
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}

080012e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012e8:	b672      	cpsid	i
}
 80012ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012ec:	bf00      	nop
 80012ee:	e7fd      	b.n	80012ec <Error_Handler+0x8>

080012f0 <SCH_Init>:
#include "scheduler.h"

sTasks SCH_tasks_G[SCH_MAX_TASKS];
uint8_t current_index_task = 0;

void SCH_Init(void) {
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b082      	sub	sp, #8
 80012f4:	af00      	add	r7, sp, #0
	for (int i = 0; i < current_index_task; i++) {
 80012f6:	2300      	movs	r3, #0
 80012f8:	607b      	str	r3, [r7, #4]
 80012fa:	e006      	b.n	800130a <SCH_Init+0x1a>
		SCH_Delete_Tasks(i);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	4618      	mov	r0, r3
 8001300:	f000 f920 	bl	8001544 <SCH_Delete_Tasks>
	for (int i = 0; i < current_index_task; i++) {
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	3301      	adds	r3, #1
 8001308:	607b      	str	r3, [r7, #4]
 800130a:	4b05      	ldr	r3, [pc, #20]	@ (8001320 <SCH_Init+0x30>)
 800130c:	781b      	ldrb	r3, [r3, #0]
 800130e:	461a      	mov	r2, r3
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	4293      	cmp	r3, r2
 8001314:	dbf2      	blt.n	80012fc <SCH_Init+0xc>
	}
}
 8001316:	bf00      	nop
 8001318:	bf00      	nop
 800131a:	3708      	adds	r7, #8
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}
 8001320:	200004b4 	.word	0x200004b4

08001324 <SCH_Add_Task>:

void SCH_Add_Task(void(*pFunction)(), uint32_t DELAY, uint32_t PERIOD) {
 8001324:	b480      	push	{r7}
 8001326:	b085      	sub	sp, #20
 8001328:	af00      	add	r7, sp, #0
 800132a:	60f8      	str	r0, [r7, #12]
 800132c:	60b9      	str	r1, [r7, #8]
 800132e:	607a      	str	r2, [r7, #4]
	if (current_index_task < SCH_MAX_TASKS) {
 8001330:	4b29      	ldr	r3, [pc, #164]	@ (80013d8 <SCH_Add_Task+0xb4>)
 8001332:	781b      	ldrb	r3, [r3, #0]
 8001334:	2b27      	cmp	r3, #39	@ 0x27
 8001336:	d84a      	bhi.n	80013ce <SCH_Add_Task+0xaa>
		SCH_tasks_G[current_index_task].pTask = pFunction;
 8001338:	4b27      	ldr	r3, [pc, #156]	@ (80013d8 <SCH_Add_Task+0xb4>)
 800133a:	781b      	ldrb	r3, [r3, #0]
 800133c:	4619      	mov	r1, r3
 800133e:	4a27      	ldr	r2, [pc, #156]	@ (80013dc <SCH_Add_Task+0xb8>)
 8001340:	460b      	mov	r3, r1
 8001342:	009b      	lsls	r3, r3, #2
 8001344:	440b      	add	r3, r1
 8001346:	009b      	lsls	r3, r3, #2
 8001348:	4413      	add	r3, r2
 800134a:	68fa      	ldr	r2, [r7, #12]
 800134c:	601a      	str	r2, [r3, #0]
		SCH_tasks_G[current_index_task].Delay = DELAY / TICK;
 800134e:	4b22      	ldr	r3, [pc, #136]	@ (80013d8 <SCH_Add_Task+0xb4>)
 8001350:	781b      	ldrb	r3, [r3, #0]
 8001352:	4618      	mov	r0, r3
 8001354:	68bb      	ldr	r3, [r7, #8]
 8001356:	4a22      	ldr	r2, [pc, #136]	@ (80013e0 <SCH_Add_Task+0xbc>)
 8001358:	fba2 2303 	umull	r2, r3, r2, r3
 800135c:	08da      	lsrs	r2, r3, #3
 800135e:	491f      	ldr	r1, [pc, #124]	@ (80013dc <SCH_Add_Task+0xb8>)
 8001360:	4603      	mov	r3, r0
 8001362:	009b      	lsls	r3, r3, #2
 8001364:	4403      	add	r3, r0
 8001366:	009b      	lsls	r3, r3, #2
 8001368:	440b      	add	r3, r1
 800136a:	3304      	adds	r3, #4
 800136c:	601a      	str	r2, [r3, #0]
		SCH_tasks_G[current_index_task].Period = PERIOD / TICK;
 800136e:	4b1a      	ldr	r3, [pc, #104]	@ (80013d8 <SCH_Add_Task+0xb4>)
 8001370:	781b      	ldrb	r3, [r3, #0]
 8001372:	4618      	mov	r0, r3
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	4a1a      	ldr	r2, [pc, #104]	@ (80013e0 <SCH_Add_Task+0xbc>)
 8001378:	fba2 2303 	umull	r2, r3, r2, r3
 800137c:	08da      	lsrs	r2, r3, #3
 800137e:	4917      	ldr	r1, [pc, #92]	@ (80013dc <SCH_Add_Task+0xb8>)
 8001380:	4603      	mov	r3, r0
 8001382:	009b      	lsls	r3, r3, #2
 8001384:	4403      	add	r3, r0
 8001386:	009b      	lsls	r3, r3, #2
 8001388:	440b      	add	r3, r1
 800138a:	3308      	adds	r3, #8
 800138c:	601a      	str	r2, [r3, #0]
		SCH_tasks_G[current_index_task].RunMe = 0;
 800138e:	4b12      	ldr	r3, [pc, #72]	@ (80013d8 <SCH_Add_Task+0xb4>)
 8001390:	781b      	ldrb	r3, [r3, #0]
 8001392:	4619      	mov	r1, r3
 8001394:	4a11      	ldr	r2, [pc, #68]	@ (80013dc <SCH_Add_Task+0xb8>)
 8001396:	460b      	mov	r3, r1
 8001398:	009b      	lsls	r3, r3, #2
 800139a:	440b      	add	r3, r1
 800139c:	009b      	lsls	r3, r3, #2
 800139e:	4413      	add	r3, r2
 80013a0:	330c      	adds	r3, #12
 80013a2:	2200      	movs	r2, #0
 80013a4:	701a      	strb	r2, [r3, #0]
		SCH_tasks_G[current_index_task].TaskID = current_index_task;
 80013a6:	4b0c      	ldr	r3, [pc, #48]	@ (80013d8 <SCH_Add_Task+0xb4>)
 80013a8:	781a      	ldrb	r2, [r3, #0]
 80013aa:	4b0b      	ldr	r3, [pc, #44]	@ (80013d8 <SCH_Add_Task+0xb4>)
 80013ac:	781b      	ldrb	r3, [r3, #0]
 80013ae:	4619      	mov	r1, r3
 80013b0:	4610      	mov	r0, r2
 80013b2:	4a0a      	ldr	r2, [pc, #40]	@ (80013dc <SCH_Add_Task+0xb8>)
 80013b4:	460b      	mov	r3, r1
 80013b6:	009b      	lsls	r3, r3, #2
 80013b8:	440b      	add	r3, r1
 80013ba:	009b      	lsls	r3, r3, #2
 80013bc:	4413      	add	r3, r2
 80013be:	3310      	adds	r3, #16
 80013c0:	6018      	str	r0, [r3, #0]
		current_index_task++;
 80013c2:	4b05      	ldr	r3, [pc, #20]	@ (80013d8 <SCH_Add_Task+0xb4>)
 80013c4:	781b      	ldrb	r3, [r3, #0]
 80013c6:	3301      	adds	r3, #1
 80013c8:	b2da      	uxtb	r2, r3
 80013ca:	4b03      	ldr	r3, [pc, #12]	@ (80013d8 <SCH_Add_Task+0xb4>)
 80013cc:	701a      	strb	r2, [r3, #0]
	}
}
 80013ce:	bf00      	nop
 80013d0:	3714      	adds	r7, #20
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bc80      	pop	{r7}
 80013d6:	4770      	bx	lr
 80013d8:	200004b4 	.word	0x200004b4
 80013dc:	20000194 	.word	0x20000194
 80013e0:	cccccccd 	.word	0xcccccccd

080013e4 <SCH_Update>:

void SCH_Update(void) {
 80013e4:	b480      	push	{r7}
 80013e6:	b083      	sub	sp, #12
 80013e8:	af00      	add	r7, sp, #0
	for (int i = 0; i < current_index_task; i++) {
 80013ea:	2300      	movs	r3, #0
 80013ec:	607b      	str	r3, [r7, #4]
 80013ee:	e048      	b.n	8001482 <SCH_Update+0x9e>
		if (SCH_tasks_G[i].Delay > 0) {
 80013f0:	492a      	ldr	r1, [pc, #168]	@ (800149c <SCH_Update+0xb8>)
 80013f2:	687a      	ldr	r2, [r7, #4]
 80013f4:	4613      	mov	r3, r2
 80013f6:	009b      	lsls	r3, r3, #2
 80013f8:	4413      	add	r3, r2
 80013fa:	009b      	lsls	r3, r3, #2
 80013fc:	440b      	add	r3, r1
 80013fe:	3304      	adds	r3, #4
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	2b00      	cmp	r3, #0
 8001404:	d013      	beq.n	800142e <SCH_Update+0x4a>
			SCH_tasks_G[i].Delay--;
 8001406:	4925      	ldr	r1, [pc, #148]	@ (800149c <SCH_Update+0xb8>)
 8001408:	687a      	ldr	r2, [r7, #4]
 800140a:	4613      	mov	r3, r2
 800140c:	009b      	lsls	r3, r3, #2
 800140e:	4413      	add	r3, r2
 8001410:	009b      	lsls	r3, r3, #2
 8001412:	440b      	add	r3, r1
 8001414:	3304      	adds	r3, #4
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	1e59      	subs	r1, r3, #1
 800141a:	4820      	ldr	r0, [pc, #128]	@ (800149c <SCH_Update+0xb8>)
 800141c:	687a      	ldr	r2, [r7, #4]
 800141e:	4613      	mov	r3, r2
 8001420:	009b      	lsls	r3, r3, #2
 8001422:	4413      	add	r3, r2
 8001424:	009b      	lsls	r3, r3, #2
 8001426:	4403      	add	r3, r0
 8001428:	3304      	adds	r3, #4
 800142a:	6019      	str	r1, [r3, #0]
 800142c:	e026      	b.n	800147c <SCH_Update+0x98>
		}
		else {
			SCH_tasks_G[i].Delay = SCH_tasks_G[i].Period;
 800142e:	491b      	ldr	r1, [pc, #108]	@ (800149c <SCH_Update+0xb8>)
 8001430:	687a      	ldr	r2, [r7, #4]
 8001432:	4613      	mov	r3, r2
 8001434:	009b      	lsls	r3, r3, #2
 8001436:	4413      	add	r3, r2
 8001438:	009b      	lsls	r3, r3, #2
 800143a:	440b      	add	r3, r1
 800143c:	3308      	adds	r3, #8
 800143e:	6819      	ldr	r1, [r3, #0]
 8001440:	4816      	ldr	r0, [pc, #88]	@ (800149c <SCH_Update+0xb8>)
 8001442:	687a      	ldr	r2, [r7, #4]
 8001444:	4613      	mov	r3, r2
 8001446:	009b      	lsls	r3, r3, #2
 8001448:	4413      	add	r3, r2
 800144a:	009b      	lsls	r3, r3, #2
 800144c:	4403      	add	r3, r0
 800144e:	3304      	adds	r3, #4
 8001450:	6019      	str	r1, [r3, #0]
			SCH_tasks_G[i].RunMe += 1;
 8001452:	4912      	ldr	r1, [pc, #72]	@ (800149c <SCH_Update+0xb8>)
 8001454:	687a      	ldr	r2, [r7, #4]
 8001456:	4613      	mov	r3, r2
 8001458:	009b      	lsls	r3, r3, #2
 800145a:	4413      	add	r3, r2
 800145c:	009b      	lsls	r3, r3, #2
 800145e:	440b      	add	r3, r1
 8001460:	330c      	adds	r3, #12
 8001462:	781b      	ldrb	r3, [r3, #0]
 8001464:	3301      	adds	r3, #1
 8001466:	b2d8      	uxtb	r0, r3
 8001468:	490c      	ldr	r1, [pc, #48]	@ (800149c <SCH_Update+0xb8>)
 800146a:	687a      	ldr	r2, [r7, #4]
 800146c:	4613      	mov	r3, r2
 800146e:	009b      	lsls	r3, r3, #2
 8001470:	4413      	add	r3, r2
 8001472:	009b      	lsls	r3, r3, #2
 8001474:	440b      	add	r3, r1
 8001476:	330c      	adds	r3, #12
 8001478:	4602      	mov	r2, r0
 800147a:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < current_index_task; i++) {
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	3301      	adds	r3, #1
 8001480:	607b      	str	r3, [r7, #4]
 8001482:	4b07      	ldr	r3, [pc, #28]	@ (80014a0 <SCH_Update+0xbc>)
 8001484:	781b      	ldrb	r3, [r3, #0]
 8001486:	461a      	mov	r2, r3
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	4293      	cmp	r3, r2
 800148c:	dbb0      	blt.n	80013f0 <SCH_Update+0xc>
		}
	}
}
 800148e:	bf00      	nop
 8001490:	bf00      	nop
 8001492:	370c      	adds	r7, #12
 8001494:	46bd      	mov	sp, r7
 8001496:	bc80      	pop	{r7}
 8001498:	4770      	bx	lr
 800149a:	bf00      	nop
 800149c:	20000194 	.word	0x20000194
 80014a0:	200004b4 	.word	0x200004b4

080014a4 <SCH_Dispatch_Tasks>:

void SCH_Dispatch_Tasks(void) {
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b082      	sub	sp, #8
 80014a8:	af00      	add	r7, sp, #0
	for (int i = 0; i < current_index_task; i++) {
 80014aa:	2300      	movs	r3, #0
 80014ac:	607b      	str	r3, [r7, #4]
 80014ae:	e03a      	b.n	8001526 <SCH_Dispatch_Tasks+0x82>
		if (SCH_tasks_G[i].RunMe > 0) {
 80014b0:	4922      	ldr	r1, [pc, #136]	@ (800153c <SCH_Dispatch_Tasks+0x98>)
 80014b2:	687a      	ldr	r2, [r7, #4]
 80014b4:	4613      	mov	r3, r2
 80014b6:	009b      	lsls	r3, r3, #2
 80014b8:	4413      	add	r3, r2
 80014ba:	009b      	lsls	r3, r3, #2
 80014bc:	440b      	add	r3, r1
 80014be:	330c      	adds	r3, #12
 80014c0:	781b      	ldrb	r3, [r3, #0]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d02c      	beq.n	8001520 <SCH_Dispatch_Tasks+0x7c>
			SCH_tasks_G[i].RunMe--;
 80014c6:	491d      	ldr	r1, [pc, #116]	@ (800153c <SCH_Dispatch_Tasks+0x98>)
 80014c8:	687a      	ldr	r2, [r7, #4]
 80014ca:	4613      	mov	r3, r2
 80014cc:	009b      	lsls	r3, r3, #2
 80014ce:	4413      	add	r3, r2
 80014d0:	009b      	lsls	r3, r3, #2
 80014d2:	440b      	add	r3, r1
 80014d4:	330c      	adds	r3, #12
 80014d6:	781b      	ldrb	r3, [r3, #0]
 80014d8:	3b01      	subs	r3, #1
 80014da:	b2d8      	uxtb	r0, r3
 80014dc:	4917      	ldr	r1, [pc, #92]	@ (800153c <SCH_Dispatch_Tasks+0x98>)
 80014de:	687a      	ldr	r2, [r7, #4]
 80014e0:	4613      	mov	r3, r2
 80014e2:	009b      	lsls	r3, r3, #2
 80014e4:	4413      	add	r3, r2
 80014e6:	009b      	lsls	r3, r3, #2
 80014e8:	440b      	add	r3, r1
 80014ea:	330c      	adds	r3, #12
 80014ec:	4602      	mov	r2, r0
 80014ee:	701a      	strb	r2, [r3, #0]
			(*SCH_tasks_G[i].pTask)(); //chạy task
 80014f0:	4912      	ldr	r1, [pc, #72]	@ (800153c <SCH_Dispatch_Tasks+0x98>)
 80014f2:	687a      	ldr	r2, [r7, #4]
 80014f4:	4613      	mov	r3, r2
 80014f6:	009b      	lsls	r3, r3, #2
 80014f8:	4413      	add	r3, r2
 80014fa:	009b      	lsls	r3, r3, #2
 80014fc:	440b      	add	r3, r1
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4798      	blx	r3
			if (SCH_tasks_G[i].Period == 0) {
 8001502:	490e      	ldr	r1, [pc, #56]	@ (800153c <SCH_Dispatch_Tasks+0x98>)
 8001504:	687a      	ldr	r2, [r7, #4]
 8001506:	4613      	mov	r3, r2
 8001508:	009b      	lsls	r3, r3, #2
 800150a:	4413      	add	r3, r2
 800150c:	009b      	lsls	r3, r3, #2
 800150e:	440b      	add	r3, r1
 8001510:	3308      	adds	r3, #8
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d103      	bne.n	8001520 <SCH_Dispatch_Tasks+0x7c>
				SCH_Delete_Tasks(i); //1 shot task
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	4618      	mov	r0, r3
 800151c:	f000 f812 	bl	8001544 <SCH_Delete_Tasks>
	for (int i = 0; i < current_index_task; i++) {
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	3301      	adds	r3, #1
 8001524:	607b      	str	r3, [r7, #4]
 8001526:	4b06      	ldr	r3, [pc, #24]	@ (8001540 <SCH_Dispatch_Tasks+0x9c>)
 8001528:	781b      	ldrb	r3, [r3, #0]
 800152a:	461a      	mov	r2, r3
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	4293      	cmp	r3, r2
 8001530:	dbbe      	blt.n	80014b0 <SCH_Dispatch_Tasks+0xc>
			}
		}
	}
}
 8001532:	bf00      	nop
 8001534:	bf00      	nop
 8001536:	3708      	adds	r7, #8
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}
 800153c:	20000194 	.word	0x20000194
 8001540:	200004b4 	.word	0x200004b4

08001544 <SCH_Delete_Tasks>:

void SCH_Delete_Tasks(uint32_t taskID) {
 8001544:	b4b0      	push	{r4, r5, r7}
 8001546:	b085      	sub	sp, #20
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
	for (uint32_t i = taskID; i < current_index_task; i++) {
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	60fb      	str	r3, [r7, #12]
 8001550:	e017      	b.n	8001582 <SCH_Delete_Tasks+0x3e>
		SCH_tasks_G[i] = SCH_tasks_G[i + 1];
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	1c5a      	adds	r2, r3, #1
 8001556:	482b      	ldr	r0, [pc, #172]	@ (8001604 <SCH_Delete_Tasks+0xc0>)
 8001558:	68f9      	ldr	r1, [r7, #12]
 800155a:	460b      	mov	r3, r1
 800155c:	009b      	lsls	r3, r3, #2
 800155e:	440b      	add	r3, r1
 8001560:	009b      	lsls	r3, r3, #2
 8001562:	4418      	add	r0, r3
 8001564:	4927      	ldr	r1, [pc, #156]	@ (8001604 <SCH_Delete_Tasks+0xc0>)
 8001566:	4613      	mov	r3, r2
 8001568:	009b      	lsls	r3, r3, #2
 800156a:	4413      	add	r3, r2
 800156c:	009b      	lsls	r3, r3, #2
 800156e:	440b      	add	r3, r1
 8001570:	4604      	mov	r4, r0
 8001572:	461d      	mov	r5, r3
 8001574:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001576:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001578:	682b      	ldr	r3, [r5, #0]
 800157a:	6023      	str	r3, [r4, #0]
	for (uint32_t i = taskID; i < current_index_task; i++) {
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	3301      	adds	r3, #1
 8001580:	60fb      	str	r3, [r7, #12]
 8001582:	4b21      	ldr	r3, [pc, #132]	@ (8001608 <SCH_Delete_Tasks+0xc4>)
 8001584:	781b      	ldrb	r3, [r3, #0]
 8001586:	461a      	mov	r2, r3
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	4293      	cmp	r3, r2
 800158c:	d3e1      	bcc.n	8001552 <SCH_Delete_Tasks+0xe>
	}
	SCH_tasks_G[current_index_task].pTask = 0x0000;
 800158e:	4b1e      	ldr	r3, [pc, #120]	@ (8001608 <SCH_Delete_Tasks+0xc4>)
 8001590:	781b      	ldrb	r3, [r3, #0]
 8001592:	4619      	mov	r1, r3
 8001594:	4a1b      	ldr	r2, [pc, #108]	@ (8001604 <SCH_Delete_Tasks+0xc0>)
 8001596:	460b      	mov	r3, r1
 8001598:	009b      	lsls	r3, r3, #2
 800159a:	440b      	add	r3, r1
 800159c:	009b      	lsls	r3, r3, #2
 800159e:	4413      	add	r3, r2
 80015a0:	2200      	movs	r2, #0
 80015a2:	601a      	str	r2, [r3, #0]
	SCH_tasks_G[current_index_task].Delay = 0;
 80015a4:	4b18      	ldr	r3, [pc, #96]	@ (8001608 <SCH_Delete_Tasks+0xc4>)
 80015a6:	781b      	ldrb	r3, [r3, #0]
 80015a8:	4619      	mov	r1, r3
 80015aa:	4a16      	ldr	r2, [pc, #88]	@ (8001604 <SCH_Delete_Tasks+0xc0>)
 80015ac:	460b      	mov	r3, r1
 80015ae:	009b      	lsls	r3, r3, #2
 80015b0:	440b      	add	r3, r1
 80015b2:	009b      	lsls	r3, r3, #2
 80015b4:	4413      	add	r3, r2
 80015b6:	3304      	adds	r3, #4
 80015b8:	2200      	movs	r2, #0
 80015ba:	601a      	str	r2, [r3, #0]
	SCH_tasks_G[current_index_task].Period = 0;
 80015bc:	4b12      	ldr	r3, [pc, #72]	@ (8001608 <SCH_Delete_Tasks+0xc4>)
 80015be:	781b      	ldrb	r3, [r3, #0]
 80015c0:	4619      	mov	r1, r3
 80015c2:	4a10      	ldr	r2, [pc, #64]	@ (8001604 <SCH_Delete_Tasks+0xc0>)
 80015c4:	460b      	mov	r3, r1
 80015c6:	009b      	lsls	r3, r3, #2
 80015c8:	440b      	add	r3, r1
 80015ca:	009b      	lsls	r3, r3, #2
 80015cc:	4413      	add	r3, r2
 80015ce:	3308      	adds	r3, #8
 80015d0:	2200      	movs	r2, #0
 80015d2:	601a      	str	r2, [r3, #0]
	SCH_tasks_G[current_index_task].RunMe = 0;
 80015d4:	4b0c      	ldr	r3, [pc, #48]	@ (8001608 <SCH_Delete_Tasks+0xc4>)
 80015d6:	781b      	ldrb	r3, [r3, #0]
 80015d8:	4619      	mov	r1, r3
 80015da:	4a0a      	ldr	r2, [pc, #40]	@ (8001604 <SCH_Delete_Tasks+0xc0>)
 80015dc:	460b      	mov	r3, r1
 80015de:	009b      	lsls	r3, r3, #2
 80015e0:	440b      	add	r3, r1
 80015e2:	009b      	lsls	r3, r3, #2
 80015e4:	4413      	add	r3, r2
 80015e6:	330c      	adds	r3, #12
 80015e8:	2200      	movs	r2, #0
 80015ea:	701a      	strb	r2, [r3, #0]
	current_index_task--;
 80015ec:	4b06      	ldr	r3, [pc, #24]	@ (8001608 <SCH_Delete_Tasks+0xc4>)
 80015ee:	781b      	ldrb	r3, [r3, #0]
 80015f0:	3b01      	subs	r3, #1
 80015f2:	b2da      	uxtb	r2, r3
 80015f4:	4b04      	ldr	r3, [pc, #16]	@ (8001608 <SCH_Delete_Tasks+0xc4>)
 80015f6:	701a      	strb	r2, [r3, #0]
}
 80015f8:	bf00      	nop
 80015fa:	3714      	adds	r7, #20
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bcb0      	pop	{r4, r5, r7}
 8001600:	4770      	bx	lr
 8001602:	bf00      	nop
 8001604:	20000194 	.word	0x20000194
 8001608:	200004b4 	.word	0x200004b4

0800160c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800160c:	b480      	push	{r7}
 800160e:	b085      	sub	sp, #20
 8001610:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001612:	4b15      	ldr	r3, [pc, #84]	@ (8001668 <HAL_MspInit+0x5c>)
 8001614:	699b      	ldr	r3, [r3, #24]
 8001616:	4a14      	ldr	r2, [pc, #80]	@ (8001668 <HAL_MspInit+0x5c>)
 8001618:	f043 0301 	orr.w	r3, r3, #1
 800161c:	6193      	str	r3, [r2, #24]
 800161e:	4b12      	ldr	r3, [pc, #72]	@ (8001668 <HAL_MspInit+0x5c>)
 8001620:	699b      	ldr	r3, [r3, #24]
 8001622:	f003 0301 	and.w	r3, r3, #1
 8001626:	60bb      	str	r3, [r7, #8]
 8001628:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800162a:	4b0f      	ldr	r3, [pc, #60]	@ (8001668 <HAL_MspInit+0x5c>)
 800162c:	69db      	ldr	r3, [r3, #28]
 800162e:	4a0e      	ldr	r2, [pc, #56]	@ (8001668 <HAL_MspInit+0x5c>)
 8001630:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001634:	61d3      	str	r3, [r2, #28]
 8001636:	4b0c      	ldr	r3, [pc, #48]	@ (8001668 <HAL_MspInit+0x5c>)
 8001638:	69db      	ldr	r3, [r3, #28]
 800163a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800163e:	607b      	str	r3, [r7, #4]
 8001640:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8001642:	4b0a      	ldr	r3, [pc, #40]	@ (800166c <HAL_MspInit+0x60>)
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	60fb      	str	r3, [r7, #12]
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800164e:	60fb      	str	r3, [r7, #12]
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001656:	60fb      	str	r3, [r7, #12]
 8001658:	4a04      	ldr	r2, [pc, #16]	@ (800166c <HAL_MspInit+0x60>)
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800165e:	bf00      	nop
 8001660:	3714      	adds	r7, #20
 8001662:	46bd      	mov	sp, r7
 8001664:	bc80      	pop	{r7}
 8001666:	4770      	bx	lr
 8001668:	40021000 	.word	0x40021000
 800166c:	40010000 	.word	0x40010000

08001670 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b084      	sub	sp, #16
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001680:	d113      	bne.n	80016aa <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001682:	4b0c      	ldr	r3, [pc, #48]	@ (80016b4 <HAL_TIM_Base_MspInit+0x44>)
 8001684:	69db      	ldr	r3, [r3, #28]
 8001686:	4a0b      	ldr	r2, [pc, #44]	@ (80016b4 <HAL_TIM_Base_MspInit+0x44>)
 8001688:	f043 0301 	orr.w	r3, r3, #1
 800168c:	61d3      	str	r3, [r2, #28]
 800168e:	4b09      	ldr	r3, [pc, #36]	@ (80016b4 <HAL_TIM_Base_MspInit+0x44>)
 8001690:	69db      	ldr	r3, [r3, #28]
 8001692:	f003 0301 	and.w	r3, r3, #1
 8001696:	60fb      	str	r3, [r7, #12]
 8001698:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800169a:	2200      	movs	r2, #0
 800169c:	2100      	movs	r1, #0
 800169e:	201c      	movs	r0, #28
 80016a0:	f000 faa7 	bl	8001bf2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80016a4:	201c      	movs	r0, #28
 80016a6:	f000 fac0 	bl	8001c2a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80016aa:	bf00      	nop
 80016ac:	3710      	adds	r7, #16
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	40021000 	.word	0x40021000

080016b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016b8:	b480      	push	{r7}
 80016ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016bc:	bf00      	nop
 80016be:	e7fd      	b.n	80016bc <NMI_Handler+0x4>

080016c0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016c0:	b480      	push	{r7}
 80016c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016c4:	bf00      	nop
 80016c6:	e7fd      	b.n	80016c4 <HardFault_Handler+0x4>

080016c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016c8:	b480      	push	{r7}
 80016ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016cc:	bf00      	nop
 80016ce:	e7fd      	b.n	80016cc <MemManage_Handler+0x4>

080016d0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016d0:	b480      	push	{r7}
 80016d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016d4:	bf00      	nop
 80016d6:	e7fd      	b.n	80016d4 <BusFault_Handler+0x4>

080016d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016d8:	b480      	push	{r7}
 80016da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016dc:	bf00      	nop
 80016de:	e7fd      	b.n	80016dc <UsageFault_Handler+0x4>

080016e0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016e0:	b480      	push	{r7}
 80016e2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016e4:	bf00      	nop
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bc80      	pop	{r7}
 80016ea:	4770      	bx	lr

080016ec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016ec:	b480      	push	{r7}
 80016ee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016f0:	bf00      	nop
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bc80      	pop	{r7}
 80016f6:	4770      	bx	lr

080016f8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016f8:	b480      	push	{r7}
 80016fa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016fc:	bf00      	nop
 80016fe:	46bd      	mov	sp, r7
 8001700:	bc80      	pop	{r7}
 8001702:	4770      	bx	lr

08001704 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001708:	f000 f980 	bl	8001a0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800170c:	bf00      	nop
 800170e:	bd80      	pop	{r7, pc}

08001710 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001714:	4802      	ldr	r0, [pc, #8]	@ (8001720 <TIM2_IRQHandler+0x10>)
 8001716:	f001 f8e1 	bl	80028dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800171a:	bf00      	nop
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	2000014c 	.word	0x2000014c

08001724 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001728:	bf00      	nop
 800172a:	46bd      	mov	sp, r7
 800172c:	bc80      	pop	{r7}
 800172e:	4770      	bx	lr

08001730 <red_led_ver>:
 *      Author: Galaxy
 */
#include "traffic_light.h"

//đèn giao thông cho chiều dọc
void red_led_ver() {
 8001730:	b580      	push	{r7, lr}
 8001732:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
 8001734:	2200      	movs	r2, #0
 8001736:	2104      	movs	r1, #4
 8001738:	4807      	ldr	r0, [pc, #28]	@ (8001758 <red_led_ver+0x28>)
 800173a:	f000 fc24 	bl	8001f86 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
 800173e:	2201      	movs	r2, #1
 8001740:	2108      	movs	r1, #8
 8001742:	4805      	ldr	r0, [pc, #20]	@ (8001758 <red_led_ver+0x28>)
 8001744:	f000 fc1f 	bl	8001f86 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8001748:	2201      	movs	r2, #1
 800174a:	2110      	movs	r1, #16
 800174c:	4802      	ldr	r0, [pc, #8]	@ (8001758 <red_led_ver+0x28>)
 800174e:	f000 fc1a 	bl	8001f86 <HAL_GPIO_WritePin>
}
 8001752:	bf00      	nop
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	40010800 	.word	0x40010800

0800175c <yellow_led_ver>:

void yellow_led_ver() {
 800175c:	b580      	push	{r7, lr}
 800175e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 8001760:	2201      	movs	r2, #1
 8001762:	2104      	movs	r1, #4
 8001764:	4807      	ldr	r0, [pc, #28]	@ (8001784 <yellow_led_ver+0x28>)
 8001766:	f000 fc0e 	bl	8001f86 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 800176a:	2200      	movs	r2, #0
 800176c:	2108      	movs	r1, #8
 800176e:	4805      	ldr	r0, [pc, #20]	@ (8001784 <yellow_led_ver+0x28>)
 8001770:	f000 fc09 	bl	8001f86 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8001774:	2201      	movs	r2, #1
 8001776:	2110      	movs	r1, #16
 8001778:	4802      	ldr	r0, [pc, #8]	@ (8001784 <yellow_led_ver+0x28>)
 800177a:	f000 fc04 	bl	8001f86 <HAL_GPIO_WritePin>
}
 800177e:	bf00      	nop
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	40010800 	.word	0x40010800

08001788 <green_led_ver>:

void green_led_ver() {
 8001788:	b580      	push	{r7, lr}
 800178a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 800178c:	2201      	movs	r2, #1
 800178e:	2104      	movs	r1, #4
 8001790:	4807      	ldr	r0, [pc, #28]	@ (80017b0 <green_led_ver+0x28>)
 8001792:	f000 fbf8 	bl	8001f86 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
 8001796:	2201      	movs	r2, #1
 8001798:	2108      	movs	r1, #8
 800179a:	4805      	ldr	r0, [pc, #20]	@ (80017b0 <green_led_ver+0x28>)
 800179c:	f000 fbf3 	bl	8001f86 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80017a0:	2200      	movs	r2, #0
 80017a2:	2110      	movs	r1, #16
 80017a4:	4802      	ldr	r0, [pc, #8]	@ (80017b0 <green_led_ver+0x28>)
 80017a6:	f000 fbee 	bl	8001f86 <HAL_GPIO_WritePin>
}
 80017aa:	bf00      	nop
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	40010800 	.word	0x40010800

080017b4 <red_led_hor>:

//********************************************************************
//đèn giao thông cho chiều ngang
void red_led_hor() {
 80017b4:	b580      	push	{r7, lr}
 80017b6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 80017b8:	2200      	movs	r2, #0
 80017ba:	2140      	movs	r1, #64	@ 0x40
 80017bc:	4807      	ldr	r0, [pc, #28]	@ (80017dc <red_led_hor+0x28>)
 80017be:	f000 fbe2 	bl	8001f86 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 80017c2:	2201      	movs	r2, #1
 80017c4:	2180      	movs	r1, #128	@ 0x80
 80017c6:	4805      	ldr	r0, [pc, #20]	@ (80017dc <red_led_hor+0x28>)
 80017c8:	f000 fbdd 	bl	8001f86 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 80017cc:	2201      	movs	r2, #1
 80017ce:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80017d2:	4802      	ldr	r0, [pc, #8]	@ (80017dc <red_led_hor+0x28>)
 80017d4:	f000 fbd7 	bl	8001f86 <HAL_GPIO_WritePin>
}
 80017d8:	bf00      	nop
 80017da:	bd80      	pop	{r7, pc}
 80017dc:	40010800 	.word	0x40010800

080017e0 <yellow_led_hor>:

void yellow_led_hor() {
 80017e0:	b580      	push	{r7, lr}
 80017e2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 80017e4:	2201      	movs	r2, #1
 80017e6:	2140      	movs	r1, #64	@ 0x40
 80017e8:	4807      	ldr	r0, [pc, #28]	@ (8001808 <yellow_led_hor+0x28>)
 80017ea:	f000 fbcc 	bl	8001f86 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 80017ee:	2200      	movs	r2, #0
 80017f0:	2180      	movs	r1, #128	@ 0x80
 80017f2:	4805      	ldr	r0, [pc, #20]	@ (8001808 <yellow_led_hor+0x28>)
 80017f4:	f000 fbc7 	bl	8001f86 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 80017f8:	2201      	movs	r2, #1
 80017fa:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80017fe:	4802      	ldr	r0, [pc, #8]	@ (8001808 <yellow_led_hor+0x28>)
 8001800:	f000 fbc1 	bl	8001f86 <HAL_GPIO_WritePin>
}
 8001804:	bf00      	nop
 8001806:	bd80      	pop	{r7, pc}
 8001808:	40010800 	.word	0x40010800

0800180c <green_led_hor>:

void green_led_hor() {
 800180c:	b580      	push	{r7, lr}
 800180e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 8001810:	2201      	movs	r2, #1
 8001812:	2140      	movs	r1, #64	@ 0x40
 8001814:	4807      	ldr	r0, [pc, #28]	@ (8001834 <green_led_hor+0x28>)
 8001816:	f000 fbb6 	bl	8001f86 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 800181a:	2201      	movs	r2, #1
 800181c:	2180      	movs	r1, #128	@ 0x80
 800181e:	4805      	ldr	r0, [pc, #20]	@ (8001834 <green_led_hor+0x28>)
 8001820:	f000 fbb1 	bl	8001f86 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8001824:	2200      	movs	r2, #0
 8001826:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800182a:	4802      	ldr	r0, [pc, #8]	@ (8001834 <green_led_hor+0x28>)
 800182c:	f000 fbab 	bl	8001f86 <HAL_GPIO_WritePin>
}
 8001830:	bf00      	nop
 8001832:	bd80      	pop	{r7, pc}
 8001834:	40010800 	.word	0x40010800

08001838 <toggle_red_led>:

//**********************************************************************
//nhấp nháy đèn cần modify và tắt các đèn không modify
void toggle_red_led() {
 8001838:	b580      	push	{r7, lr}
 800183a:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_2);
 800183c:	2104      	movs	r1, #4
 800183e:	4804      	ldr	r0, [pc, #16]	@ (8001850 <toggle_red_led+0x18>)
 8001840:	f000 fbb9 	bl	8001fb6 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6);
 8001844:	2140      	movs	r1, #64	@ 0x40
 8001846:	4802      	ldr	r0, [pc, #8]	@ (8001850 <toggle_red_led+0x18>)
 8001848:	f000 fbb5 	bl	8001fb6 <HAL_GPIO_TogglePin>
}
 800184c:	bf00      	nop
 800184e:	bd80      	pop	{r7, pc}
 8001850:	40010800 	.word	0x40010800

08001854 <toggle_yellow_led>:

void toggle_yellow_led() {
 8001854:	b580      	push	{r7, lr}
 8001856:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_3);
 8001858:	2108      	movs	r1, #8
 800185a:	4804      	ldr	r0, [pc, #16]	@ (800186c <toggle_yellow_led+0x18>)
 800185c:	f000 fbab 	bl	8001fb6 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_7);
 8001860:	2180      	movs	r1, #128	@ 0x80
 8001862:	4802      	ldr	r0, [pc, #8]	@ (800186c <toggle_yellow_led+0x18>)
 8001864:	f000 fba7 	bl	8001fb6 <HAL_GPIO_TogglePin>
}
 8001868:	bf00      	nop
 800186a:	bd80      	pop	{r7, pc}
 800186c:	40010800 	.word	0x40010800

08001870 <toggle_green_led>:

void toggle_green_led() {
 8001870:	b580      	push	{r7, lr}
 8001872:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_4);
 8001874:	2110      	movs	r1, #16
 8001876:	4805      	ldr	r0, [pc, #20]	@ (800188c <toggle_green_led+0x1c>)
 8001878:	f000 fb9d 	bl	8001fb6 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_8);
 800187c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001880:	4802      	ldr	r0, [pc, #8]	@ (800188c <toggle_green_led+0x1c>)
 8001882:	f000 fb98 	bl	8001fb6 <HAL_GPIO_TogglePin>
}
 8001886:	bf00      	nop
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	40010800 	.word	0x40010800

08001890 <turn_off_yellow_green>:

//**********************************************************************
//tắt các đèn không cần modify
void turn_off_yellow_green() {
 8001890:	b580      	push	{r7, lr}
 8001892:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
 8001894:	2201      	movs	r2, #1
 8001896:	2108      	movs	r1, #8
 8001898:	480a      	ldr	r0, [pc, #40]	@ (80018c4 <turn_off_yellow_green+0x34>)
 800189a:	f000 fb74 	bl	8001f86 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800189e:	2201      	movs	r2, #1
 80018a0:	2110      	movs	r1, #16
 80018a2:	4808      	ldr	r0, [pc, #32]	@ (80018c4 <turn_off_yellow_green+0x34>)
 80018a4:	f000 fb6f 	bl	8001f86 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 80018a8:	2201      	movs	r2, #1
 80018aa:	2180      	movs	r1, #128	@ 0x80
 80018ac:	4805      	ldr	r0, [pc, #20]	@ (80018c4 <turn_off_yellow_green+0x34>)
 80018ae:	f000 fb6a 	bl	8001f86 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 80018b2:	2201      	movs	r2, #1
 80018b4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80018b8:	4802      	ldr	r0, [pc, #8]	@ (80018c4 <turn_off_yellow_green+0x34>)
 80018ba:	f000 fb64 	bl	8001f86 <HAL_GPIO_WritePin>
}
 80018be:	bf00      	nop
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	bf00      	nop
 80018c4:	40010800 	.word	0x40010800

080018c8 <turn_off_red_green>:

void turn_off_red_green() {
 80018c8:	b580      	push	{r7, lr}
 80018ca:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 80018cc:	2201      	movs	r2, #1
 80018ce:	2104      	movs	r1, #4
 80018d0:	480a      	ldr	r0, [pc, #40]	@ (80018fc <turn_off_red_green+0x34>)
 80018d2:	f000 fb58 	bl	8001f86 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 80018d6:	2201      	movs	r2, #1
 80018d8:	2110      	movs	r1, #16
 80018da:	4808      	ldr	r0, [pc, #32]	@ (80018fc <turn_off_red_green+0x34>)
 80018dc:	f000 fb53 	bl	8001f86 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 80018e0:	2201      	movs	r2, #1
 80018e2:	2140      	movs	r1, #64	@ 0x40
 80018e4:	4805      	ldr	r0, [pc, #20]	@ (80018fc <turn_off_red_green+0x34>)
 80018e6:	f000 fb4e 	bl	8001f86 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 80018ea:	2201      	movs	r2, #1
 80018ec:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80018f0:	4802      	ldr	r0, [pc, #8]	@ (80018fc <turn_off_red_green+0x34>)
 80018f2:	f000 fb48 	bl	8001f86 <HAL_GPIO_WritePin>
}
 80018f6:	bf00      	nop
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	40010800 	.word	0x40010800

08001900 <turn_off_red_yellow>:

void turn_off_red_yellow() {
 8001900:	b580      	push	{r7, lr}
 8001902:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 8001904:	2201      	movs	r2, #1
 8001906:	2104      	movs	r1, #4
 8001908:	4809      	ldr	r0, [pc, #36]	@ (8001930 <turn_off_red_yellow+0x30>)
 800190a:	f000 fb3c 	bl	8001f86 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
 800190e:	2201      	movs	r2, #1
 8001910:	2108      	movs	r1, #8
 8001912:	4807      	ldr	r0, [pc, #28]	@ (8001930 <turn_off_red_yellow+0x30>)
 8001914:	f000 fb37 	bl	8001f86 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 8001918:	2201      	movs	r2, #1
 800191a:	2140      	movs	r1, #64	@ 0x40
 800191c:	4804      	ldr	r0, [pc, #16]	@ (8001930 <turn_off_red_yellow+0x30>)
 800191e:	f000 fb32 	bl	8001f86 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 8001922:	2201      	movs	r2, #1
 8001924:	2180      	movs	r1, #128	@ 0x80
 8001926:	4802      	ldr	r0, [pc, #8]	@ (8001930 <turn_off_red_yellow+0x30>)
 8001928:	f000 fb2d 	bl	8001f86 <HAL_GPIO_WritePin>
}
 800192c:	bf00      	nop
 800192e:	bd80      	pop	{r7, pc}
 8001930:	40010800 	.word	0x40010800

08001934 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001934:	f7ff fef6 	bl	8001724 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001938:	480b      	ldr	r0, [pc, #44]	@ (8001968 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800193a:	490c      	ldr	r1, [pc, #48]	@ (800196c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800193c:	4a0c      	ldr	r2, [pc, #48]	@ (8001970 <LoopFillZerobss+0x16>)
  movs r3, #0
 800193e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001940:	e002      	b.n	8001948 <LoopCopyDataInit>

08001942 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001942:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001944:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001946:	3304      	adds	r3, #4

08001948 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001948:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800194a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800194c:	d3f9      	bcc.n	8001942 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800194e:	4a09      	ldr	r2, [pc, #36]	@ (8001974 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001950:	4c09      	ldr	r4, [pc, #36]	@ (8001978 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001952:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001954:	e001      	b.n	800195a <LoopFillZerobss>

08001956 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001956:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001958:	3204      	adds	r2, #4

0800195a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800195a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800195c:	d3fb      	bcc.n	8001956 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800195e:	f001 fb05 	bl	8002f6c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001962:	f7ff fb9b 	bl	800109c <main>
  bx lr
 8001966:	4770      	bx	lr
  ldr r0, =_sdata
 8001968:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800196c:	200000f0 	.word	0x200000f0
  ldr r2, =_sidata
 8001970:	08002ff8 	.word	0x08002ff8
  ldr r2, =_sbss
 8001974:	200000f0 	.word	0x200000f0
  ldr r4, =_ebss
 8001978:	200004bc 	.word	0x200004bc

0800197c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800197c:	e7fe      	b.n	800197c <ADC1_2_IRQHandler>
	...

08001980 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001984:	4b08      	ldr	r3, [pc, #32]	@ (80019a8 <HAL_Init+0x28>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a07      	ldr	r2, [pc, #28]	@ (80019a8 <HAL_Init+0x28>)
 800198a:	f043 0310 	orr.w	r3, r3, #16
 800198e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001990:	2003      	movs	r0, #3
 8001992:	f000 f923 	bl	8001bdc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001996:	200f      	movs	r0, #15
 8001998:	f000 f808 	bl	80019ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800199c:	f7ff fe36 	bl	800160c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019a0:	2300      	movs	r3, #0
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	40022000 	.word	0x40022000

080019ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b082      	sub	sp, #8
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019b4:	4b12      	ldr	r3, [pc, #72]	@ (8001a00 <HAL_InitTick+0x54>)
 80019b6:	681a      	ldr	r2, [r3, #0]
 80019b8:	4b12      	ldr	r3, [pc, #72]	@ (8001a04 <HAL_InitTick+0x58>)
 80019ba:	781b      	ldrb	r3, [r3, #0]
 80019bc:	4619      	mov	r1, r3
 80019be:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80019c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80019c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80019ca:	4618      	mov	r0, r3
 80019cc:	f000 f93b 	bl	8001c46 <HAL_SYSTICK_Config>
 80019d0:	4603      	mov	r3, r0
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d001      	beq.n	80019da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80019d6:	2301      	movs	r3, #1
 80019d8:	e00e      	b.n	80019f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	2b0f      	cmp	r3, #15
 80019de:	d80a      	bhi.n	80019f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019e0:	2200      	movs	r2, #0
 80019e2:	6879      	ldr	r1, [r7, #4]
 80019e4:	f04f 30ff 	mov.w	r0, #4294967295
 80019e8:	f000 f903 	bl	8001bf2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019ec:	4a06      	ldr	r2, [pc, #24]	@ (8001a08 <HAL_InitTick+0x5c>)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80019f2:	2300      	movs	r3, #0
 80019f4:	e000      	b.n	80019f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80019f6:	2301      	movs	r3, #1
}
 80019f8:	4618      	mov	r0, r3
 80019fa:	3708      	adds	r7, #8
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bd80      	pop	{r7, pc}
 8001a00:	200000e4 	.word	0x200000e4
 8001a04:	200000ec 	.word	0x200000ec
 8001a08:	200000e8 	.word	0x200000e8

08001a0c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a10:	4b05      	ldr	r3, [pc, #20]	@ (8001a28 <HAL_IncTick+0x1c>)
 8001a12:	781b      	ldrb	r3, [r3, #0]
 8001a14:	461a      	mov	r2, r3
 8001a16:	4b05      	ldr	r3, [pc, #20]	@ (8001a2c <HAL_IncTick+0x20>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4413      	add	r3, r2
 8001a1c:	4a03      	ldr	r2, [pc, #12]	@ (8001a2c <HAL_IncTick+0x20>)
 8001a1e:	6013      	str	r3, [r2, #0]
}
 8001a20:	bf00      	nop
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bc80      	pop	{r7}
 8001a26:	4770      	bx	lr
 8001a28:	200000ec 	.word	0x200000ec
 8001a2c:	200004b8 	.word	0x200004b8

08001a30 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a30:	b480      	push	{r7}
 8001a32:	af00      	add	r7, sp, #0
  return uwTick;
 8001a34:	4b02      	ldr	r3, [pc, #8]	@ (8001a40 <HAL_GetTick+0x10>)
 8001a36:	681b      	ldr	r3, [r3, #0]
}
 8001a38:	4618      	mov	r0, r3
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bc80      	pop	{r7}
 8001a3e:	4770      	bx	lr
 8001a40:	200004b8 	.word	0x200004b8

08001a44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b085      	sub	sp, #20
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	f003 0307 	and.w	r3, r3, #7
 8001a52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a54:	4b0c      	ldr	r3, [pc, #48]	@ (8001a88 <__NVIC_SetPriorityGrouping+0x44>)
 8001a56:	68db      	ldr	r3, [r3, #12]
 8001a58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a5a:	68ba      	ldr	r2, [r7, #8]
 8001a5c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001a60:	4013      	ands	r3, r2
 8001a62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a68:	68bb      	ldr	r3, [r7, #8]
 8001a6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a6c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001a70:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a76:	4a04      	ldr	r2, [pc, #16]	@ (8001a88 <__NVIC_SetPriorityGrouping+0x44>)
 8001a78:	68bb      	ldr	r3, [r7, #8]
 8001a7a:	60d3      	str	r3, [r2, #12]
}
 8001a7c:	bf00      	nop
 8001a7e:	3714      	adds	r7, #20
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bc80      	pop	{r7}
 8001a84:	4770      	bx	lr
 8001a86:	bf00      	nop
 8001a88:	e000ed00 	.word	0xe000ed00

08001a8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a90:	4b04      	ldr	r3, [pc, #16]	@ (8001aa4 <__NVIC_GetPriorityGrouping+0x18>)
 8001a92:	68db      	ldr	r3, [r3, #12]
 8001a94:	0a1b      	lsrs	r3, r3, #8
 8001a96:	f003 0307 	and.w	r3, r3, #7
}
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bc80      	pop	{r7}
 8001aa0:	4770      	bx	lr
 8001aa2:	bf00      	nop
 8001aa4:	e000ed00 	.word	0xe000ed00

08001aa8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b083      	sub	sp, #12
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	4603      	mov	r3, r0
 8001ab0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ab2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	db0b      	blt.n	8001ad2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001aba:	79fb      	ldrb	r3, [r7, #7]
 8001abc:	f003 021f 	and.w	r2, r3, #31
 8001ac0:	4906      	ldr	r1, [pc, #24]	@ (8001adc <__NVIC_EnableIRQ+0x34>)
 8001ac2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ac6:	095b      	lsrs	r3, r3, #5
 8001ac8:	2001      	movs	r0, #1
 8001aca:	fa00 f202 	lsl.w	r2, r0, r2
 8001ace:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001ad2:	bf00      	nop
 8001ad4:	370c      	adds	r7, #12
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bc80      	pop	{r7}
 8001ada:	4770      	bx	lr
 8001adc:	e000e100 	.word	0xe000e100

08001ae0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	b083      	sub	sp, #12
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	6039      	str	r1, [r7, #0]
 8001aea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001aec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	db0a      	blt.n	8001b0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	b2da      	uxtb	r2, r3
 8001af8:	490c      	ldr	r1, [pc, #48]	@ (8001b2c <__NVIC_SetPriority+0x4c>)
 8001afa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001afe:	0112      	lsls	r2, r2, #4
 8001b00:	b2d2      	uxtb	r2, r2
 8001b02:	440b      	add	r3, r1
 8001b04:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b08:	e00a      	b.n	8001b20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	b2da      	uxtb	r2, r3
 8001b0e:	4908      	ldr	r1, [pc, #32]	@ (8001b30 <__NVIC_SetPriority+0x50>)
 8001b10:	79fb      	ldrb	r3, [r7, #7]
 8001b12:	f003 030f 	and.w	r3, r3, #15
 8001b16:	3b04      	subs	r3, #4
 8001b18:	0112      	lsls	r2, r2, #4
 8001b1a:	b2d2      	uxtb	r2, r2
 8001b1c:	440b      	add	r3, r1
 8001b1e:	761a      	strb	r2, [r3, #24]
}
 8001b20:	bf00      	nop
 8001b22:	370c      	adds	r7, #12
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bc80      	pop	{r7}
 8001b28:	4770      	bx	lr
 8001b2a:	bf00      	nop
 8001b2c:	e000e100 	.word	0xe000e100
 8001b30:	e000ed00 	.word	0xe000ed00

08001b34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b34:	b480      	push	{r7}
 8001b36:	b089      	sub	sp, #36	@ 0x24
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	60f8      	str	r0, [r7, #12]
 8001b3c:	60b9      	str	r1, [r7, #8]
 8001b3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	f003 0307 	and.w	r3, r3, #7
 8001b46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b48:	69fb      	ldr	r3, [r7, #28]
 8001b4a:	f1c3 0307 	rsb	r3, r3, #7
 8001b4e:	2b04      	cmp	r3, #4
 8001b50:	bf28      	it	cs
 8001b52:	2304      	movcs	r3, #4
 8001b54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b56:	69fb      	ldr	r3, [r7, #28]
 8001b58:	3304      	adds	r3, #4
 8001b5a:	2b06      	cmp	r3, #6
 8001b5c:	d902      	bls.n	8001b64 <NVIC_EncodePriority+0x30>
 8001b5e:	69fb      	ldr	r3, [r7, #28]
 8001b60:	3b03      	subs	r3, #3
 8001b62:	e000      	b.n	8001b66 <NVIC_EncodePriority+0x32>
 8001b64:	2300      	movs	r3, #0
 8001b66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b68:	f04f 32ff 	mov.w	r2, #4294967295
 8001b6c:	69bb      	ldr	r3, [r7, #24]
 8001b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b72:	43da      	mvns	r2, r3
 8001b74:	68bb      	ldr	r3, [r7, #8]
 8001b76:	401a      	ands	r2, r3
 8001b78:	697b      	ldr	r3, [r7, #20]
 8001b7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b7c:	f04f 31ff 	mov.w	r1, #4294967295
 8001b80:	697b      	ldr	r3, [r7, #20]
 8001b82:	fa01 f303 	lsl.w	r3, r1, r3
 8001b86:	43d9      	mvns	r1, r3
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b8c:	4313      	orrs	r3, r2
         );
}
 8001b8e:	4618      	mov	r0, r3
 8001b90:	3724      	adds	r7, #36	@ 0x24
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bc80      	pop	{r7}
 8001b96:	4770      	bx	lr

08001b98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b082      	sub	sp, #8
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	3b01      	subs	r3, #1
 8001ba4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001ba8:	d301      	bcc.n	8001bae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001baa:	2301      	movs	r3, #1
 8001bac:	e00f      	b.n	8001bce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bae:	4a0a      	ldr	r2, [pc, #40]	@ (8001bd8 <SysTick_Config+0x40>)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	3b01      	subs	r3, #1
 8001bb4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001bb6:	210f      	movs	r1, #15
 8001bb8:	f04f 30ff 	mov.w	r0, #4294967295
 8001bbc:	f7ff ff90 	bl	8001ae0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bc0:	4b05      	ldr	r3, [pc, #20]	@ (8001bd8 <SysTick_Config+0x40>)
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bc6:	4b04      	ldr	r3, [pc, #16]	@ (8001bd8 <SysTick_Config+0x40>)
 8001bc8:	2207      	movs	r2, #7
 8001bca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001bcc:	2300      	movs	r3, #0
}
 8001bce:	4618      	mov	r0, r3
 8001bd0:	3708      	adds	r7, #8
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	bf00      	nop
 8001bd8:	e000e010 	.word	0xe000e010

08001bdc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b082      	sub	sp, #8
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001be4:	6878      	ldr	r0, [r7, #4]
 8001be6:	f7ff ff2d 	bl	8001a44 <__NVIC_SetPriorityGrouping>
}
 8001bea:	bf00      	nop
 8001bec:	3708      	adds	r7, #8
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}

08001bf2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001bf2:	b580      	push	{r7, lr}
 8001bf4:	b086      	sub	sp, #24
 8001bf6:	af00      	add	r7, sp, #0
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	60b9      	str	r1, [r7, #8]
 8001bfc:	607a      	str	r2, [r7, #4]
 8001bfe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c00:	2300      	movs	r3, #0
 8001c02:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c04:	f7ff ff42 	bl	8001a8c <__NVIC_GetPriorityGrouping>
 8001c08:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c0a:	687a      	ldr	r2, [r7, #4]
 8001c0c:	68b9      	ldr	r1, [r7, #8]
 8001c0e:	6978      	ldr	r0, [r7, #20]
 8001c10:	f7ff ff90 	bl	8001b34 <NVIC_EncodePriority>
 8001c14:	4602      	mov	r2, r0
 8001c16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c1a:	4611      	mov	r1, r2
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	f7ff ff5f 	bl	8001ae0 <__NVIC_SetPriority>
}
 8001c22:	bf00      	nop
 8001c24:	3718      	adds	r7, #24
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}

08001c2a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c2a:	b580      	push	{r7, lr}
 8001c2c:	b082      	sub	sp, #8
 8001c2e:	af00      	add	r7, sp, #0
 8001c30:	4603      	mov	r3, r0
 8001c32:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f7ff ff35 	bl	8001aa8 <__NVIC_EnableIRQ>
}
 8001c3e:	bf00      	nop
 8001c40:	3708      	adds	r7, #8
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}

08001c46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c46:	b580      	push	{r7, lr}
 8001c48:	b082      	sub	sp, #8
 8001c4a:	af00      	add	r7, sp, #0
 8001c4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c4e:	6878      	ldr	r0, [r7, #4]
 8001c50:	f7ff ffa2 	bl	8001b98 <SysTick_Config>
 8001c54:	4603      	mov	r3, r0
}
 8001c56:	4618      	mov	r0, r3
 8001c58:	3708      	adds	r7, #8
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}
	...

08001c60 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c60:	b480      	push	{r7}
 8001c62:	b08b      	sub	sp, #44	@ 0x2c
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
 8001c68:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c72:	e161      	b.n	8001f38 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001c74:	2201      	movs	r2, #1
 8001c76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c78:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	69fa      	ldr	r2, [r7, #28]
 8001c84:	4013      	ands	r3, r2
 8001c86:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001c88:	69ba      	ldr	r2, [r7, #24]
 8001c8a:	69fb      	ldr	r3, [r7, #28]
 8001c8c:	429a      	cmp	r2, r3
 8001c8e:	f040 8150 	bne.w	8001f32 <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	4a97      	ldr	r2, [pc, #604]	@ (8001ef4 <HAL_GPIO_Init+0x294>)
 8001c98:	4293      	cmp	r3, r2
 8001c9a:	d05e      	beq.n	8001d5a <HAL_GPIO_Init+0xfa>
 8001c9c:	4a95      	ldr	r2, [pc, #596]	@ (8001ef4 <HAL_GPIO_Init+0x294>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d875      	bhi.n	8001d8e <HAL_GPIO_Init+0x12e>
 8001ca2:	4a95      	ldr	r2, [pc, #596]	@ (8001ef8 <HAL_GPIO_Init+0x298>)
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d058      	beq.n	8001d5a <HAL_GPIO_Init+0xfa>
 8001ca8:	4a93      	ldr	r2, [pc, #588]	@ (8001ef8 <HAL_GPIO_Init+0x298>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d86f      	bhi.n	8001d8e <HAL_GPIO_Init+0x12e>
 8001cae:	4a93      	ldr	r2, [pc, #588]	@ (8001efc <HAL_GPIO_Init+0x29c>)
 8001cb0:	4293      	cmp	r3, r2
 8001cb2:	d052      	beq.n	8001d5a <HAL_GPIO_Init+0xfa>
 8001cb4:	4a91      	ldr	r2, [pc, #580]	@ (8001efc <HAL_GPIO_Init+0x29c>)
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d869      	bhi.n	8001d8e <HAL_GPIO_Init+0x12e>
 8001cba:	4a91      	ldr	r2, [pc, #580]	@ (8001f00 <HAL_GPIO_Init+0x2a0>)
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	d04c      	beq.n	8001d5a <HAL_GPIO_Init+0xfa>
 8001cc0:	4a8f      	ldr	r2, [pc, #572]	@ (8001f00 <HAL_GPIO_Init+0x2a0>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d863      	bhi.n	8001d8e <HAL_GPIO_Init+0x12e>
 8001cc6:	4a8f      	ldr	r2, [pc, #572]	@ (8001f04 <HAL_GPIO_Init+0x2a4>)
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	d046      	beq.n	8001d5a <HAL_GPIO_Init+0xfa>
 8001ccc:	4a8d      	ldr	r2, [pc, #564]	@ (8001f04 <HAL_GPIO_Init+0x2a4>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d85d      	bhi.n	8001d8e <HAL_GPIO_Init+0x12e>
 8001cd2:	2b12      	cmp	r3, #18
 8001cd4:	d82a      	bhi.n	8001d2c <HAL_GPIO_Init+0xcc>
 8001cd6:	2b12      	cmp	r3, #18
 8001cd8:	d859      	bhi.n	8001d8e <HAL_GPIO_Init+0x12e>
 8001cda:	a201      	add	r2, pc, #4	@ (adr r2, 8001ce0 <HAL_GPIO_Init+0x80>)
 8001cdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ce0:	08001d5b 	.word	0x08001d5b
 8001ce4:	08001d35 	.word	0x08001d35
 8001ce8:	08001d47 	.word	0x08001d47
 8001cec:	08001d89 	.word	0x08001d89
 8001cf0:	08001d8f 	.word	0x08001d8f
 8001cf4:	08001d8f 	.word	0x08001d8f
 8001cf8:	08001d8f 	.word	0x08001d8f
 8001cfc:	08001d8f 	.word	0x08001d8f
 8001d00:	08001d8f 	.word	0x08001d8f
 8001d04:	08001d8f 	.word	0x08001d8f
 8001d08:	08001d8f 	.word	0x08001d8f
 8001d0c:	08001d8f 	.word	0x08001d8f
 8001d10:	08001d8f 	.word	0x08001d8f
 8001d14:	08001d8f 	.word	0x08001d8f
 8001d18:	08001d8f 	.word	0x08001d8f
 8001d1c:	08001d8f 	.word	0x08001d8f
 8001d20:	08001d8f 	.word	0x08001d8f
 8001d24:	08001d3d 	.word	0x08001d3d
 8001d28:	08001d51 	.word	0x08001d51
 8001d2c:	4a76      	ldr	r2, [pc, #472]	@ (8001f08 <HAL_GPIO_Init+0x2a8>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d013      	beq.n	8001d5a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001d32:	e02c      	b.n	8001d8e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	68db      	ldr	r3, [r3, #12]
 8001d38:	623b      	str	r3, [r7, #32]
          break;
 8001d3a:	e029      	b.n	8001d90 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	68db      	ldr	r3, [r3, #12]
 8001d40:	3304      	adds	r3, #4
 8001d42:	623b      	str	r3, [r7, #32]
          break;
 8001d44:	e024      	b.n	8001d90 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	68db      	ldr	r3, [r3, #12]
 8001d4a:	3308      	adds	r3, #8
 8001d4c:	623b      	str	r3, [r7, #32]
          break;
 8001d4e:	e01f      	b.n	8001d90 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	68db      	ldr	r3, [r3, #12]
 8001d54:	330c      	adds	r3, #12
 8001d56:	623b      	str	r3, [r7, #32]
          break;
 8001d58:	e01a      	b.n	8001d90 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	689b      	ldr	r3, [r3, #8]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d102      	bne.n	8001d68 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001d62:	2304      	movs	r3, #4
 8001d64:	623b      	str	r3, [r7, #32]
          break;
 8001d66:	e013      	b.n	8001d90 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	689b      	ldr	r3, [r3, #8]
 8001d6c:	2b01      	cmp	r3, #1
 8001d6e:	d105      	bne.n	8001d7c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001d70:	2308      	movs	r3, #8
 8001d72:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	69fa      	ldr	r2, [r7, #28]
 8001d78:	611a      	str	r2, [r3, #16]
          break;
 8001d7a:	e009      	b.n	8001d90 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001d7c:	2308      	movs	r3, #8
 8001d7e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	69fa      	ldr	r2, [r7, #28]
 8001d84:	615a      	str	r2, [r3, #20]
          break;
 8001d86:	e003      	b.n	8001d90 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	623b      	str	r3, [r7, #32]
          break;
 8001d8c:	e000      	b.n	8001d90 <HAL_GPIO_Init+0x130>
          break;
 8001d8e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001d90:	69bb      	ldr	r3, [r7, #24]
 8001d92:	2bff      	cmp	r3, #255	@ 0xff
 8001d94:	d801      	bhi.n	8001d9a <HAL_GPIO_Init+0x13a>
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	e001      	b.n	8001d9e <HAL_GPIO_Init+0x13e>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	3304      	adds	r3, #4
 8001d9e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001da0:	69bb      	ldr	r3, [r7, #24]
 8001da2:	2bff      	cmp	r3, #255	@ 0xff
 8001da4:	d802      	bhi.n	8001dac <HAL_GPIO_Init+0x14c>
 8001da6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001da8:	009b      	lsls	r3, r3, #2
 8001daa:	e002      	b.n	8001db2 <HAL_GPIO_Init+0x152>
 8001dac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dae:	3b08      	subs	r3, #8
 8001db0:	009b      	lsls	r3, r3, #2
 8001db2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001db4:	697b      	ldr	r3, [r7, #20]
 8001db6:	681a      	ldr	r2, [r3, #0]
 8001db8:	210f      	movs	r1, #15
 8001dba:	693b      	ldr	r3, [r7, #16]
 8001dbc:	fa01 f303 	lsl.w	r3, r1, r3
 8001dc0:	43db      	mvns	r3, r3
 8001dc2:	401a      	ands	r2, r3
 8001dc4:	6a39      	ldr	r1, [r7, #32]
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	fa01 f303 	lsl.w	r3, r1, r3
 8001dcc:	431a      	orrs	r2, r3
 8001dce:	697b      	ldr	r3, [r7, #20]
 8001dd0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	f000 80a9 	beq.w	8001f32 <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001de0:	4b4a      	ldr	r3, [pc, #296]	@ (8001f0c <HAL_GPIO_Init+0x2ac>)
 8001de2:	699b      	ldr	r3, [r3, #24]
 8001de4:	4a49      	ldr	r2, [pc, #292]	@ (8001f0c <HAL_GPIO_Init+0x2ac>)
 8001de6:	f043 0301 	orr.w	r3, r3, #1
 8001dea:	6193      	str	r3, [r2, #24]
 8001dec:	4b47      	ldr	r3, [pc, #284]	@ (8001f0c <HAL_GPIO_Init+0x2ac>)
 8001dee:	699b      	ldr	r3, [r3, #24]
 8001df0:	f003 0301 	and.w	r3, r3, #1
 8001df4:	60bb      	str	r3, [r7, #8]
 8001df6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001df8:	4a45      	ldr	r2, [pc, #276]	@ (8001f10 <HAL_GPIO_Init+0x2b0>)
 8001dfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dfc:	089b      	lsrs	r3, r3, #2
 8001dfe:	3302      	adds	r3, #2
 8001e00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e04:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001e06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e08:	f003 0303 	and.w	r3, r3, #3
 8001e0c:	009b      	lsls	r3, r3, #2
 8001e0e:	220f      	movs	r2, #15
 8001e10:	fa02 f303 	lsl.w	r3, r2, r3
 8001e14:	43db      	mvns	r3, r3
 8001e16:	68fa      	ldr	r2, [r7, #12]
 8001e18:	4013      	ands	r3, r2
 8001e1a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	4a3d      	ldr	r2, [pc, #244]	@ (8001f14 <HAL_GPIO_Init+0x2b4>)
 8001e20:	4293      	cmp	r3, r2
 8001e22:	d00d      	beq.n	8001e40 <HAL_GPIO_Init+0x1e0>
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	4a3c      	ldr	r2, [pc, #240]	@ (8001f18 <HAL_GPIO_Init+0x2b8>)
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d007      	beq.n	8001e3c <HAL_GPIO_Init+0x1dc>
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	4a3b      	ldr	r2, [pc, #236]	@ (8001f1c <HAL_GPIO_Init+0x2bc>)
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d101      	bne.n	8001e38 <HAL_GPIO_Init+0x1d8>
 8001e34:	2302      	movs	r3, #2
 8001e36:	e004      	b.n	8001e42 <HAL_GPIO_Init+0x1e2>
 8001e38:	2303      	movs	r3, #3
 8001e3a:	e002      	b.n	8001e42 <HAL_GPIO_Init+0x1e2>
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	e000      	b.n	8001e42 <HAL_GPIO_Init+0x1e2>
 8001e40:	2300      	movs	r3, #0
 8001e42:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001e44:	f002 0203 	and.w	r2, r2, #3
 8001e48:	0092      	lsls	r2, r2, #2
 8001e4a:	4093      	lsls	r3, r2
 8001e4c:	68fa      	ldr	r2, [r7, #12]
 8001e4e:	4313      	orrs	r3, r2
 8001e50:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001e52:	492f      	ldr	r1, [pc, #188]	@ (8001f10 <HAL_GPIO_Init+0x2b0>)
 8001e54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e56:	089b      	lsrs	r3, r3, #2
 8001e58:	3302      	adds	r3, #2
 8001e5a:	68fa      	ldr	r2, [r7, #12]
 8001e5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d006      	beq.n	8001e7a <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001e6c:	4b2c      	ldr	r3, [pc, #176]	@ (8001f20 <HAL_GPIO_Init+0x2c0>)
 8001e6e:	689a      	ldr	r2, [r3, #8]
 8001e70:	492b      	ldr	r1, [pc, #172]	@ (8001f20 <HAL_GPIO_Init+0x2c0>)
 8001e72:	69bb      	ldr	r3, [r7, #24]
 8001e74:	4313      	orrs	r3, r2
 8001e76:	608b      	str	r3, [r1, #8]
 8001e78:	e006      	b.n	8001e88 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001e7a:	4b29      	ldr	r3, [pc, #164]	@ (8001f20 <HAL_GPIO_Init+0x2c0>)
 8001e7c:	689a      	ldr	r2, [r3, #8]
 8001e7e:	69bb      	ldr	r3, [r7, #24]
 8001e80:	43db      	mvns	r3, r3
 8001e82:	4927      	ldr	r1, [pc, #156]	@ (8001f20 <HAL_GPIO_Init+0x2c0>)
 8001e84:	4013      	ands	r3, r2
 8001e86:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d006      	beq.n	8001ea2 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001e94:	4b22      	ldr	r3, [pc, #136]	@ (8001f20 <HAL_GPIO_Init+0x2c0>)
 8001e96:	68da      	ldr	r2, [r3, #12]
 8001e98:	4921      	ldr	r1, [pc, #132]	@ (8001f20 <HAL_GPIO_Init+0x2c0>)
 8001e9a:	69bb      	ldr	r3, [r7, #24]
 8001e9c:	4313      	orrs	r3, r2
 8001e9e:	60cb      	str	r3, [r1, #12]
 8001ea0:	e006      	b.n	8001eb0 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001ea2:	4b1f      	ldr	r3, [pc, #124]	@ (8001f20 <HAL_GPIO_Init+0x2c0>)
 8001ea4:	68da      	ldr	r2, [r3, #12]
 8001ea6:	69bb      	ldr	r3, [r7, #24]
 8001ea8:	43db      	mvns	r3, r3
 8001eaa:	491d      	ldr	r1, [pc, #116]	@ (8001f20 <HAL_GPIO_Init+0x2c0>)
 8001eac:	4013      	ands	r3, r2
 8001eae:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d006      	beq.n	8001eca <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001ebc:	4b18      	ldr	r3, [pc, #96]	@ (8001f20 <HAL_GPIO_Init+0x2c0>)
 8001ebe:	685a      	ldr	r2, [r3, #4]
 8001ec0:	4917      	ldr	r1, [pc, #92]	@ (8001f20 <HAL_GPIO_Init+0x2c0>)
 8001ec2:	69bb      	ldr	r3, [r7, #24]
 8001ec4:	4313      	orrs	r3, r2
 8001ec6:	604b      	str	r3, [r1, #4]
 8001ec8:	e006      	b.n	8001ed8 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001eca:	4b15      	ldr	r3, [pc, #84]	@ (8001f20 <HAL_GPIO_Init+0x2c0>)
 8001ecc:	685a      	ldr	r2, [r3, #4]
 8001ece:	69bb      	ldr	r3, [r7, #24]
 8001ed0:	43db      	mvns	r3, r3
 8001ed2:	4913      	ldr	r1, [pc, #76]	@ (8001f20 <HAL_GPIO_Init+0x2c0>)
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d01f      	beq.n	8001f24 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001ee4:	4b0e      	ldr	r3, [pc, #56]	@ (8001f20 <HAL_GPIO_Init+0x2c0>)
 8001ee6:	681a      	ldr	r2, [r3, #0]
 8001ee8:	490d      	ldr	r1, [pc, #52]	@ (8001f20 <HAL_GPIO_Init+0x2c0>)
 8001eea:	69bb      	ldr	r3, [r7, #24]
 8001eec:	4313      	orrs	r3, r2
 8001eee:	600b      	str	r3, [r1, #0]
 8001ef0:	e01f      	b.n	8001f32 <HAL_GPIO_Init+0x2d2>
 8001ef2:	bf00      	nop
 8001ef4:	10320000 	.word	0x10320000
 8001ef8:	10310000 	.word	0x10310000
 8001efc:	10220000 	.word	0x10220000
 8001f00:	10210000 	.word	0x10210000
 8001f04:	10120000 	.word	0x10120000
 8001f08:	10110000 	.word	0x10110000
 8001f0c:	40021000 	.word	0x40021000
 8001f10:	40010000 	.word	0x40010000
 8001f14:	40010800 	.word	0x40010800
 8001f18:	40010c00 	.word	0x40010c00
 8001f1c:	40011000 	.word	0x40011000
 8001f20:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001f24:	4b0b      	ldr	r3, [pc, #44]	@ (8001f54 <HAL_GPIO_Init+0x2f4>)
 8001f26:	681a      	ldr	r2, [r3, #0]
 8001f28:	69bb      	ldr	r3, [r7, #24]
 8001f2a:	43db      	mvns	r3, r3
 8001f2c:	4909      	ldr	r1, [pc, #36]	@ (8001f54 <HAL_GPIO_Init+0x2f4>)
 8001f2e:	4013      	ands	r3, r2
 8001f30:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001f32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f34:	3301      	adds	r3, #1
 8001f36:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	681a      	ldr	r2, [r3, #0]
 8001f3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f3e:	fa22 f303 	lsr.w	r3, r2, r3
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	f47f ae96 	bne.w	8001c74 <HAL_GPIO_Init+0x14>
  }
}
 8001f48:	bf00      	nop
 8001f4a:	bf00      	nop
 8001f4c:	372c      	adds	r7, #44	@ 0x2c
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bc80      	pop	{r7}
 8001f52:	4770      	bx	lr
 8001f54:	40010400 	.word	0x40010400

08001f58 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b085      	sub	sp, #20
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
 8001f60:	460b      	mov	r3, r1
 8001f62:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	689a      	ldr	r2, [r3, #8]
 8001f68:	887b      	ldrh	r3, [r7, #2]
 8001f6a:	4013      	ands	r3, r2
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d002      	beq.n	8001f76 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001f70:	2301      	movs	r3, #1
 8001f72:	73fb      	strb	r3, [r7, #15]
 8001f74:	e001      	b.n	8001f7a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001f76:	2300      	movs	r3, #0
 8001f78:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001f7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	3714      	adds	r7, #20
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bc80      	pop	{r7}
 8001f84:	4770      	bx	lr

08001f86 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f86:	b480      	push	{r7}
 8001f88:	b083      	sub	sp, #12
 8001f8a:	af00      	add	r7, sp, #0
 8001f8c:	6078      	str	r0, [r7, #4]
 8001f8e:	460b      	mov	r3, r1
 8001f90:	807b      	strh	r3, [r7, #2]
 8001f92:	4613      	mov	r3, r2
 8001f94:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001f96:	787b      	ldrb	r3, [r7, #1]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d003      	beq.n	8001fa4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f9c:	887a      	ldrh	r2, [r7, #2]
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001fa2:	e003      	b.n	8001fac <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001fa4:	887b      	ldrh	r3, [r7, #2]
 8001fa6:	041a      	lsls	r2, r3, #16
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	611a      	str	r2, [r3, #16]
}
 8001fac:	bf00      	nop
 8001fae:	370c      	adds	r7, #12
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bc80      	pop	{r7}
 8001fb4:	4770      	bx	lr

08001fb6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001fb6:	b480      	push	{r7}
 8001fb8:	b085      	sub	sp, #20
 8001fba:	af00      	add	r7, sp, #0
 8001fbc:	6078      	str	r0, [r7, #4]
 8001fbe:	460b      	mov	r3, r1
 8001fc0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	68db      	ldr	r3, [r3, #12]
 8001fc6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001fc8:	887a      	ldrh	r2, [r7, #2]
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	4013      	ands	r3, r2
 8001fce:	041a      	lsls	r2, r3, #16
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	43d9      	mvns	r1, r3
 8001fd4:	887b      	ldrh	r3, [r7, #2]
 8001fd6:	400b      	ands	r3, r1
 8001fd8:	431a      	orrs	r2, r3
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	611a      	str	r2, [r3, #16]
}
 8001fde:	bf00      	nop
 8001fe0:	3714      	adds	r7, #20
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bc80      	pop	{r7}
 8001fe6:	4770      	bx	lr

08001fe8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b086      	sub	sp, #24
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d101      	bne.n	8001ffa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	e272      	b.n	80024e0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f003 0301 	and.w	r3, r3, #1
 8002002:	2b00      	cmp	r3, #0
 8002004:	f000 8087 	beq.w	8002116 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002008:	4b92      	ldr	r3, [pc, #584]	@ (8002254 <HAL_RCC_OscConfig+0x26c>)
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	f003 030c 	and.w	r3, r3, #12
 8002010:	2b04      	cmp	r3, #4
 8002012:	d00c      	beq.n	800202e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002014:	4b8f      	ldr	r3, [pc, #572]	@ (8002254 <HAL_RCC_OscConfig+0x26c>)
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	f003 030c 	and.w	r3, r3, #12
 800201c:	2b08      	cmp	r3, #8
 800201e:	d112      	bne.n	8002046 <HAL_RCC_OscConfig+0x5e>
 8002020:	4b8c      	ldr	r3, [pc, #560]	@ (8002254 <HAL_RCC_OscConfig+0x26c>)
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002028:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800202c:	d10b      	bne.n	8002046 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800202e:	4b89      	ldr	r3, [pc, #548]	@ (8002254 <HAL_RCC_OscConfig+0x26c>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002036:	2b00      	cmp	r3, #0
 8002038:	d06c      	beq.n	8002114 <HAL_RCC_OscConfig+0x12c>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d168      	bne.n	8002114 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002042:	2301      	movs	r3, #1
 8002044:	e24c      	b.n	80024e0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800204e:	d106      	bne.n	800205e <HAL_RCC_OscConfig+0x76>
 8002050:	4b80      	ldr	r3, [pc, #512]	@ (8002254 <HAL_RCC_OscConfig+0x26c>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a7f      	ldr	r2, [pc, #508]	@ (8002254 <HAL_RCC_OscConfig+0x26c>)
 8002056:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800205a:	6013      	str	r3, [r2, #0]
 800205c:	e02e      	b.n	80020bc <HAL_RCC_OscConfig+0xd4>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d10c      	bne.n	8002080 <HAL_RCC_OscConfig+0x98>
 8002066:	4b7b      	ldr	r3, [pc, #492]	@ (8002254 <HAL_RCC_OscConfig+0x26c>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4a7a      	ldr	r2, [pc, #488]	@ (8002254 <HAL_RCC_OscConfig+0x26c>)
 800206c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002070:	6013      	str	r3, [r2, #0]
 8002072:	4b78      	ldr	r3, [pc, #480]	@ (8002254 <HAL_RCC_OscConfig+0x26c>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4a77      	ldr	r2, [pc, #476]	@ (8002254 <HAL_RCC_OscConfig+0x26c>)
 8002078:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800207c:	6013      	str	r3, [r2, #0]
 800207e:	e01d      	b.n	80020bc <HAL_RCC_OscConfig+0xd4>
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002088:	d10c      	bne.n	80020a4 <HAL_RCC_OscConfig+0xbc>
 800208a:	4b72      	ldr	r3, [pc, #456]	@ (8002254 <HAL_RCC_OscConfig+0x26c>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4a71      	ldr	r2, [pc, #452]	@ (8002254 <HAL_RCC_OscConfig+0x26c>)
 8002090:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002094:	6013      	str	r3, [r2, #0]
 8002096:	4b6f      	ldr	r3, [pc, #444]	@ (8002254 <HAL_RCC_OscConfig+0x26c>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4a6e      	ldr	r2, [pc, #440]	@ (8002254 <HAL_RCC_OscConfig+0x26c>)
 800209c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80020a0:	6013      	str	r3, [r2, #0]
 80020a2:	e00b      	b.n	80020bc <HAL_RCC_OscConfig+0xd4>
 80020a4:	4b6b      	ldr	r3, [pc, #428]	@ (8002254 <HAL_RCC_OscConfig+0x26c>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a6a      	ldr	r2, [pc, #424]	@ (8002254 <HAL_RCC_OscConfig+0x26c>)
 80020aa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80020ae:	6013      	str	r3, [r2, #0]
 80020b0:	4b68      	ldr	r3, [pc, #416]	@ (8002254 <HAL_RCC_OscConfig+0x26c>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a67      	ldr	r2, [pc, #412]	@ (8002254 <HAL_RCC_OscConfig+0x26c>)
 80020b6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80020ba:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d013      	beq.n	80020ec <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020c4:	f7ff fcb4 	bl	8001a30 <HAL_GetTick>
 80020c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020ca:	e008      	b.n	80020de <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020cc:	f7ff fcb0 	bl	8001a30 <HAL_GetTick>
 80020d0:	4602      	mov	r2, r0
 80020d2:	693b      	ldr	r3, [r7, #16]
 80020d4:	1ad3      	subs	r3, r2, r3
 80020d6:	2b64      	cmp	r3, #100	@ 0x64
 80020d8:	d901      	bls.n	80020de <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80020da:	2303      	movs	r3, #3
 80020dc:	e200      	b.n	80024e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020de:	4b5d      	ldr	r3, [pc, #372]	@ (8002254 <HAL_RCC_OscConfig+0x26c>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d0f0      	beq.n	80020cc <HAL_RCC_OscConfig+0xe4>
 80020ea:	e014      	b.n	8002116 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020ec:	f7ff fca0 	bl	8001a30 <HAL_GetTick>
 80020f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020f2:	e008      	b.n	8002106 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020f4:	f7ff fc9c 	bl	8001a30 <HAL_GetTick>
 80020f8:	4602      	mov	r2, r0
 80020fa:	693b      	ldr	r3, [r7, #16]
 80020fc:	1ad3      	subs	r3, r2, r3
 80020fe:	2b64      	cmp	r3, #100	@ 0x64
 8002100:	d901      	bls.n	8002106 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002102:	2303      	movs	r3, #3
 8002104:	e1ec      	b.n	80024e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002106:	4b53      	ldr	r3, [pc, #332]	@ (8002254 <HAL_RCC_OscConfig+0x26c>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800210e:	2b00      	cmp	r3, #0
 8002110:	d1f0      	bne.n	80020f4 <HAL_RCC_OscConfig+0x10c>
 8002112:	e000      	b.n	8002116 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002114:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f003 0302 	and.w	r3, r3, #2
 800211e:	2b00      	cmp	r3, #0
 8002120:	d063      	beq.n	80021ea <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002122:	4b4c      	ldr	r3, [pc, #304]	@ (8002254 <HAL_RCC_OscConfig+0x26c>)
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	f003 030c 	and.w	r3, r3, #12
 800212a:	2b00      	cmp	r3, #0
 800212c:	d00b      	beq.n	8002146 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800212e:	4b49      	ldr	r3, [pc, #292]	@ (8002254 <HAL_RCC_OscConfig+0x26c>)
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	f003 030c 	and.w	r3, r3, #12
 8002136:	2b08      	cmp	r3, #8
 8002138:	d11c      	bne.n	8002174 <HAL_RCC_OscConfig+0x18c>
 800213a:	4b46      	ldr	r3, [pc, #280]	@ (8002254 <HAL_RCC_OscConfig+0x26c>)
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002142:	2b00      	cmp	r3, #0
 8002144:	d116      	bne.n	8002174 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002146:	4b43      	ldr	r3, [pc, #268]	@ (8002254 <HAL_RCC_OscConfig+0x26c>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f003 0302 	and.w	r3, r3, #2
 800214e:	2b00      	cmp	r3, #0
 8002150:	d005      	beq.n	800215e <HAL_RCC_OscConfig+0x176>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	691b      	ldr	r3, [r3, #16]
 8002156:	2b01      	cmp	r3, #1
 8002158:	d001      	beq.n	800215e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800215a:	2301      	movs	r3, #1
 800215c:	e1c0      	b.n	80024e0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800215e:	4b3d      	ldr	r3, [pc, #244]	@ (8002254 <HAL_RCC_OscConfig+0x26c>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	695b      	ldr	r3, [r3, #20]
 800216a:	00db      	lsls	r3, r3, #3
 800216c:	4939      	ldr	r1, [pc, #228]	@ (8002254 <HAL_RCC_OscConfig+0x26c>)
 800216e:	4313      	orrs	r3, r2
 8002170:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002172:	e03a      	b.n	80021ea <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	691b      	ldr	r3, [r3, #16]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d020      	beq.n	80021be <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800217c:	4b36      	ldr	r3, [pc, #216]	@ (8002258 <HAL_RCC_OscConfig+0x270>)
 800217e:	2201      	movs	r2, #1
 8002180:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002182:	f7ff fc55 	bl	8001a30 <HAL_GetTick>
 8002186:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002188:	e008      	b.n	800219c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800218a:	f7ff fc51 	bl	8001a30 <HAL_GetTick>
 800218e:	4602      	mov	r2, r0
 8002190:	693b      	ldr	r3, [r7, #16]
 8002192:	1ad3      	subs	r3, r2, r3
 8002194:	2b02      	cmp	r3, #2
 8002196:	d901      	bls.n	800219c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002198:	2303      	movs	r3, #3
 800219a:	e1a1      	b.n	80024e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800219c:	4b2d      	ldr	r3, [pc, #180]	@ (8002254 <HAL_RCC_OscConfig+0x26c>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f003 0302 	and.w	r3, r3, #2
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d0f0      	beq.n	800218a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021a8:	4b2a      	ldr	r3, [pc, #168]	@ (8002254 <HAL_RCC_OscConfig+0x26c>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	695b      	ldr	r3, [r3, #20]
 80021b4:	00db      	lsls	r3, r3, #3
 80021b6:	4927      	ldr	r1, [pc, #156]	@ (8002254 <HAL_RCC_OscConfig+0x26c>)
 80021b8:	4313      	orrs	r3, r2
 80021ba:	600b      	str	r3, [r1, #0]
 80021bc:	e015      	b.n	80021ea <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021be:	4b26      	ldr	r3, [pc, #152]	@ (8002258 <HAL_RCC_OscConfig+0x270>)
 80021c0:	2200      	movs	r2, #0
 80021c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021c4:	f7ff fc34 	bl	8001a30 <HAL_GetTick>
 80021c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021ca:	e008      	b.n	80021de <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021cc:	f7ff fc30 	bl	8001a30 <HAL_GetTick>
 80021d0:	4602      	mov	r2, r0
 80021d2:	693b      	ldr	r3, [r7, #16]
 80021d4:	1ad3      	subs	r3, r2, r3
 80021d6:	2b02      	cmp	r3, #2
 80021d8:	d901      	bls.n	80021de <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80021da:	2303      	movs	r3, #3
 80021dc:	e180      	b.n	80024e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021de:	4b1d      	ldr	r3, [pc, #116]	@ (8002254 <HAL_RCC_OscConfig+0x26c>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f003 0302 	and.w	r3, r3, #2
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d1f0      	bne.n	80021cc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f003 0308 	and.w	r3, r3, #8
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d03a      	beq.n	800226c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	699b      	ldr	r3, [r3, #24]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d019      	beq.n	8002232 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021fe:	4b17      	ldr	r3, [pc, #92]	@ (800225c <HAL_RCC_OscConfig+0x274>)
 8002200:	2201      	movs	r2, #1
 8002202:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002204:	f7ff fc14 	bl	8001a30 <HAL_GetTick>
 8002208:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800220a:	e008      	b.n	800221e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800220c:	f7ff fc10 	bl	8001a30 <HAL_GetTick>
 8002210:	4602      	mov	r2, r0
 8002212:	693b      	ldr	r3, [r7, #16]
 8002214:	1ad3      	subs	r3, r2, r3
 8002216:	2b02      	cmp	r3, #2
 8002218:	d901      	bls.n	800221e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800221a:	2303      	movs	r3, #3
 800221c:	e160      	b.n	80024e0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800221e:	4b0d      	ldr	r3, [pc, #52]	@ (8002254 <HAL_RCC_OscConfig+0x26c>)
 8002220:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002222:	f003 0302 	and.w	r3, r3, #2
 8002226:	2b00      	cmp	r3, #0
 8002228:	d0f0      	beq.n	800220c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800222a:	2001      	movs	r0, #1
 800222c:	f000 fa9c 	bl	8002768 <RCC_Delay>
 8002230:	e01c      	b.n	800226c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002232:	4b0a      	ldr	r3, [pc, #40]	@ (800225c <HAL_RCC_OscConfig+0x274>)
 8002234:	2200      	movs	r2, #0
 8002236:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002238:	f7ff fbfa 	bl	8001a30 <HAL_GetTick>
 800223c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800223e:	e00f      	b.n	8002260 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002240:	f7ff fbf6 	bl	8001a30 <HAL_GetTick>
 8002244:	4602      	mov	r2, r0
 8002246:	693b      	ldr	r3, [r7, #16]
 8002248:	1ad3      	subs	r3, r2, r3
 800224a:	2b02      	cmp	r3, #2
 800224c:	d908      	bls.n	8002260 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800224e:	2303      	movs	r3, #3
 8002250:	e146      	b.n	80024e0 <HAL_RCC_OscConfig+0x4f8>
 8002252:	bf00      	nop
 8002254:	40021000 	.word	0x40021000
 8002258:	42420000 	.word	0x42420000
 800225c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002260:	4b92      	ldr	r3, [pc, #584]	@ (80024ac <HAL_RCC_OscConfig+0x4c4>)
 8002262:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002264:	f003 0302 	and.w	r3, r3, #2
 8002268:	2b00      	cmp	r3, #0
 800226a:	d1e9      	bne.n	8002240 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f003 0304 	and.w	r3, r3, #4
 8002274:	2b00      	cmp	r3, #0
 8002276:	f000 80a6 	beq.w	80023c6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800227a:	2300      	movs	r3, #0
 800227c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800227e:	4b8b      	ldr	r3, [pc, #556]	@ (80024ac <HAL_RCC_OscConfig+0x4c4>)
 8002280:	69db      	ldr	r3, [r3, #28]
 8002282:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002286:	2b00      	cmp	r3, #0
 8002288:	d10d      	bne.n	80022a6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800228a:	4b88      	ldr	r3, [pc, #544]	@ (80024ac <HAL_RCC_OscConfig+0x4c4>)
 800228c:	69db      	ldr	r3, [r3, #28]
 800228e:	4a87      	ldr	r2, [pc, #540]	@ (80024ac <HAL_RCC_OscConfig+0x4c4>)
 8002290:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002294:	61d3      	str	r3, [r2, #28]
 8002296:	4b85      	ldr	r3, [pc, #532]	@ (80024ac <HAL_RCC_OscConfig+0x4c4>)
 8002298:	69db      	ldr	r3, [r3, #28]
 800229a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800229e:	60bb      	str	r3, [r7, #8]
 80022a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022a2:	2301      	movs	r3, #1
 80022a4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022a6:	4b82      	ldr	r3, [pc, #520]	@ (80024b0 <HAL_RCC_OscConfig+0x4c8>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d118      	bne.n	80022e4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022b2:	4b7f      	ldr	r3, [pc, #508]	@ (80024b0 <HAL_RCC_OscConfig+0x4c8>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4a7e      	ldr	r2, [pc, #504]	@ (80024b0 <HAL_RCC_OscConfig+0x4c8>)
 80022b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80022bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022be:	f7ff fbb7 	bl	8001a30 <HAL_GetTick>
 80022c2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022c4:	e008      	b.n	80022d8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022c6:	f7ff fbb3 	bl	8001a30 <HAL_GetTick>
 80022ca:	4602      	mov	r2, r0
 80022cc:	693b      	ldr	r3, [r7, #16]
 80022ce:	1ad3      	subs	r3, r2, r3
 80022d0:	2b64      	cmp	r3, #100	@ 0x64
 80022d2:	d901      	bls.n	80022d8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80022d4:	2303      	movs	r3, #3
 80022d6:	e103      	b.n	80024e0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022d8:	4b75      	ldr	r3, [pc, #468]	@ (80024b0 <HAL_RCC_OscConfig+0x4c8>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d0f0      	beq.n	80022c6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	68db      	ldr	r3, [r3, #12]
 80022e8:	2b01      	cmp	r3, #1
 80022ea:	d106      	bne.n	80022fa <HAL_RCC_OscConfig+0x312>
 80022ec:	4b6f      	ldr	r3, [pc, #444]	@ (80024ac <HAL_RCC_OscConfig+0x4c4>)
 80022ee:	6a1b      	ldr	r3, [r3, #32]
 80022f0:	4a6e      	ldr	r2, [pc, #440]	@ (80024ac <HAL_RCC_OscConfig+0x4c4>)
 80022f2:	f043 0301 	orr.w	r3, r3, #1
 80022f6:	6213      	str	r3, [r2, #32]
 80022f8:	e02d      	b.n	8002356 <HAL_RCC_OscConfig+0x36e>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	68db      	ldr	r3, [r3, #12]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d10c      	bne.n	800231c <HAL_RCC_OscConfig+0x334>
 8002302:	4b6a      	ldr	r3, [pc, #424]	@ (80024ac <HAL_RCC_OscConfig+0x4c4>)
 8002304:	6a1b      	ldr	r3, [r3, #32]
 8002306:	4a69      	ldr	r2, [pc, #420]	@ (80024ac <HAL_RCC_OscConfig+0x4c4>)
 8002308:	f023 0301 	bic.w	r3, r3, #1
 800230c:	6213      	str	r3, [r2, #32]
 800230e:	4b67      	ldr	r3, [pc, #412]	@ (80024ac <HAL_RCC_OscConfig+0x4c4>)
 8002310:	6a1b      	ldr	r3, [r3, #32]
 8002312:	4a66      	ldr	r2, [pc, #408]	@ (80024ac <HAL_RCC_OscConfig+0x4c4>)
 8002314:	f023 0304 	bic.w	r3, r3, #4
 8002318:	6213      	str	r3, [r2, #32]
 800231a:	e01c      	b.n	8002356 <HAL_RCC_OscConfig+0x36e>
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	68db      	ldr	r3, [r3, #12]
 8002320:	2b05      	cmp	r3, #5
 8002322:	d10c      	bne.n	800233e <HAL_RCC_OscConfig+0x356>
 8002324:	4b61      	ldr	r3, [pc, #388]	@ (80024ac <HAL_RCC_OscConfig+0x4c4>)
 8002326:	6a1b      	ldr	r3, [r3, #32]
 8002328:	4a60      	ldr	r2, [pc, #384]	@ (80024ac <HAL_RCC_OscConfig+0x4c4>)
 800232a:	f043 0304 	orr.w	r3, r3, #4
 800232e:	6213      	str	r3, [r2, #32]
 8002330:	4b5e      	ldr	r3, [pc, #376]	@ (80024ac <HAL_RCC_OscConfig+0x4c4>)
 8002332:	6a1b      	ldr	r3, [r3, #32]
 8002334:	4a5d      	ldr	r2, [pc, #372]	@ (80024ac <HAL_RCC_OscConfig+0x4c4>)
 8002336:	f043 0301 	orr.w	r3, r3, #1
 800233a:	6213      	str	r3, [r2, #32]
 800233c:	e00b      	b.n	8002356 <HAL_RCC_OscConfig+0x36e>
 800233e:	4b5b      	ldr	r3, [pc, #364]	@ (80024ac <HAL_RCC_OscConfig+0x4c4>)
 8002340:	6a1b      	ldr	r3, [r3, #32]
 8002342:	4a5a      	ldr	r2, [pc, #360]	@ (80024ac <HAL_RCC_OscConfig+0x4c4>)
 8002344:	f023 0301 	bic.w	r3, r3, #1
 8002348:	6213      	str	r3, [r2, #32]
 800234a:	4b58      	ldr	r3, [pc, #352]	@ (80024ac <HAL_RCC_OscConfig+0x4c4>)
 800234c:	6a1b      	ldr	r3, [r3, #32]
 800234e:	4a57      	ldr	r2, [pc, #348]	@ (80024ac <HAL_RCC_OscConfig+0x4c4>)
 8002350:	f023 0304 	bic.w	r3, r3, #4
 8002354:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	68db      	ldr	r3, [r3, #12]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d015      	beq.n	800238a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800235e:	f7ff fb67 	bl	8001a30 <HAL_GetTick>
 8002362:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002364:	e00a      	b.n	800237c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002366:	f7ff fb63 	bl	8001a30 <HAL_GetTick>
 800236a:	4602      	mov	r2, r0
 800236c:	693b      	ldr	r3, [r7, #16]
 800236e:	1ad3      	subs	r3, r2, r3
 8002370:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002374:	4293      	cmp	r3, r2
 8002376:	d901      	bls.n	800237c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002378:	2303      	movs	r3, #3
 800237a:	e0b1      	b.n	80024e0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800237c:	4b4b      	ldr	r3, [pc, #300]	@ (80024ac <HAL_RCC_OscConfig+0x4c4>)
 800237e:	6a1b      	ldr	r3, [r3, #32]
 8002380:	f003 0302 	and.w	r3, r3, #2
 8002384:	2b00      	cmp	r3, #0
 8002386:	d0ee      	beq.n	8002366 <HAL_RCC_OscConfig+0x37e>
 8002388:	e014      	b.n	80023b4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800238a:	f7ff fb51 	bl	8001a30 <HAL_GetTick>
 800238e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002390:	e00a      	b.n	80023a8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002392:	f7ff fb4d 	bl	8001a30 <HAL_GetTick>
 8002396:	4602      	mov	r2, r0
 8002398:	693b      	ldr	r3, [r7, #16]
 800239a:	1ad3      	subs	r3, r2, r3
 800239c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80023a0:	4293      	cmp	r3, r2
 80023a2:	d901      	bls.n	80023a8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80023a4:	2303      	movs	r3, #3
 80023a6:	e09b      	b.n	80024e0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023a8:	4b40      	ldr	r3, [pc, #256]	@ (80024ac <HAL_RCC_OscConfig+0x4c4>)
 80023aa:	6a1b      	ldr	r3, [r3, #32]
 80023ac:	f003 0302 	and.w	r3, r3, #2
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d1ee      	bne.n	8002392 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80023b4:	7dfb      	ldrb	r3, [r7, #23]
 80023b6:	2b01      	cmp	r3, #1
 80023b8:	d105      	bne.n	80023c6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023ba:	4b3c      	ldr	r3, [pc, #240]	@ (80024ac <HAL_RCC_OscConfig+0x4c4>)
 80023bc:	69db      	ldr	r3, [r3, #28]
 80023be:	4a3b      	ldr	r2, [pc, #236]	@ (80024ac <HAL_RCC_OscConfig+0x4c4>)
 80023c0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80023c4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	69db      	ldr	r3, [r3, #28]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	f000 8087 	beq.w	80024de <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80023d0:	4b36      	ldr	r3, [pc, #216]	@ (80024ac <HAL_RCC_OscConfig+0x4c4>)
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	f003 030c 	and.w	r3, r3, #12
 80023d8:	2b08      	cmp	r3, #8
 80023da:	d061      	beq.n	80024a0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	69db      	ldr	r3, [r3, #28]
 80023e0:	2b02      	cmp	r3, #2
 80023e2:	d146      	bne.n	8002472 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023e4:	4b33      	ldr	r3, [pc, #204]	@ (80024b4 <HAL_RCC_OscConfig+0x4cc>)
 80023e6:	2200      	movs	r2, #0
 80023e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023ea:	f7ff fb21 	bl	8001a30 <HAL_GetTick>
 80023ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023f0:	e008      	b.n	8002404 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023f2:	f7ff fb1d 	bl	8001a30 <HAL_GetTick>
 80023f6:	4602      	mov	r2, r0
 80023f8:	693b      	ldr	r3, [r7, #16]
 80023fa:	1ad3      	subs	r3, r2, r3
 80023fc:	2b02      	cmp	r3, #2
 80023fe:	d901      	bls.n	8002404 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002400:	2303      	movs	r3, #3
 8002402:	e06d      	b.n	80024e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002404:	4b29      	ldr	r3, [pc, #164]	@ (80024ac <HAL_RCC_OscConfig+0x4c4>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800240c:	2b00      	cmp	r3, #0
 800240e:	d1f0      	bne.n	80023f2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6a1b      	ldr	r3, [r3, #32]
 8002414:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002418:	d108      	bne.n	800242c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800241a:	4b24      	ldr	r3, [pc, #144]	@ (80024ac <HAL_RCC_OscConfig+0x4c4>)
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	689b      	ldr	r3, [r3, #8]
 8002426:	4921      	ldr	r1, [pc, #132]	@ (80024ac <HAL_RCC_OscConfig+0x4c4>)
 8002428:	4313      	orrs	r3, r2
 800242a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800242c:	4b1f      	ldr	r3, [pc, #124]	@ (80024ac <HAL_RCC_OscConfig+0x4c4>)
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6a19      	ldr	r1, [r3, #32]
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800243c:	430b      	orrs	r3, r1
 800243e:	491b      	ldr	r1, [pc, #108]	@ (80024ac <HAL_RCC_OscConfig+0x4c4>)
 8002440:	4313      	orrs	r3, r2
 8002442:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002444:	4b1b      	ldr	r3, [pc, #108]	@ (80024b4 <HAL_RCC_OscConfig+0x4cc>)
 8002446:	2201      	movs	r2, #1
 8002448:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800244a:	f7ff faf1 	bl	8001a30 <HAL_GetTick>
 800244e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002450:	e008      	b.n	8002464 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002452:	f7ff faed 	bl	8001a30 <HAL_GetTick>
 8002456:	4602      	mov	r2, r0
 8002458:	693b      	ldr	r3, [r7, #16]
 800245a:	1ad3      	subs	r3, r2, r3
 800245c:	2b02      	cmp	r3, #2
 800245e:	d901      	bls.n	8002464 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002460:	2303      	movs	r3, #3
 8002462:	e03d      	b.n	80024e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002464:	4b11      	ldr	r3, [pc, #68]	@ (80024ac <HAL_RCC_OscConfig+0x4c4>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800246c:	2b00      	cmp	r3, #0
 800246e:	d0f0      	beq.n	8002452 <HAL_RCC_OscConfig+0x46a>
 8002470:	e035      	b.n	80024de <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002472:	4b10      	ldr	r3, [pc, #64]	@ (80024b4 <HAL_RCC_OscConfig+0x4cc>)
 8002474:	2200      	movs	r2, #0
 8002476:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002478:	f7ff fada 	bl	8001a30 <HAL_GetTick>
 800247c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800247e:	e008      	b.n	8002492 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002480:	f7ff fad6 	bl	8001a30 <HAL_GetTick>
 8002484:	4602      	mov	r2, r0
 8002486:	693b      	ldr	r3, [r7, #16]
 8002488:	1ad3      	subs	r3, r2, r3
 800248a:	2b02      	cmp	r3, #2
 800248c:	d901      	bls.n	8002492 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800248e:	2303      	movs	r3, #3
 8002490:	e026      	b.n	80024e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002492:	4b06      	ldr	r3, [pc, #24]	@ (80024ac <HAL_RCC_OscConfig+0x4c4>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800249a:	2b00      	cmp	r3, #0
 800249c:	d1f0      	bne.n	8002480 <HAL_RCC_OscConfig+0x498>
 800249e:	e01e      	b.n	80024de <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	69db      	ldr	r3, [r3, #28]
 80024a4:	2b01      	cmp	r3, #1
 80024a6:	d107      	bne.n	80024b8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80024a8:	2301      	movs	r3, #1
 80024aa:	e019      	b.n	80024e0 <HAL_RCC_OscConfig+0x4f8>
 80024ac:	40021000 	.word	0x40021000
 80024b0:	40007000 	.word	0x40007000
 80024b4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80024b8:	4b0b      	ldr	r3, [pc, #44]	@ (80024e8 <HAL_RCC_OscConfig+0x500>)
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6a1b      	ldr	r3, [r3, #32]
 80024c8:	429a      	cmp	r2, r3
 80024ca:	d106      	bne.n	80024da <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024d6:	429a      	cmp	r2, r3
 80024d8:	d001      	beq.n	80024de <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80024da:	2301      	movs	r3, #1
 80024dc:	e000      	b.n	80024e0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80024de:	2300      	movs	r3, #0
}
 80024e0:	4618      	mov	r0, r3
 80024e2:	3718      	adds	r7, #24
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bd80      	pop	{r7, pc}
 80024e8:	40021000 	.word	0x40021000

080024ec <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b084      	sub	sp, #16
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
 80024f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d101      	bne.n	8002500 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80024fc:	2301      	movs	r3, #1
 80024fe:	e0d0      	b.n	80026a2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002500:	4b6a      	ldr	r3, [pc, #424]	@ (80026ac <HAL_RCC_ClockConfig+0x1c0>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f003 0307 	and.w	r3, r3, #7
 8002508:	683a      	ldr	r2, [r7, #0]
 800250a:	429a      	cmp	r2, r3
 800250c:	d910      	bls.n	8002530 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800250e:	4b67      	ldr	r3, [pc, #412]	@ (80026ac <HAL_RCC_ClockConfig+0x1c0>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f023 0207 	bic.w	r2, r3, #7
 8002516:	4965      	ldr	r1, [pc, #404]	@ (80026ac <HAL_RCC_ClockConfig+0x1c0>)
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	4313      	orrs	r3, r2
 800251c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800251e:	4b63      	ldr	r3, [pc, #396]	@ (80026ac <HAL_RCC_ClockConfig+0x1c0>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f003 0307 	and.w	r3, r3, #7
 8002526:	683a      	ldr	r2, [r7, #0]
 8002528:	429a      	cmp	r2, r3
 800252a:	d001      	beq.n	8002530 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800252c:	2301      	movs	r3, #1
 800252e:	e0b8      	b.n	80026a2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f003 0302 	and.w	r3, r3, #2
 8002538:	2b00      	cmp	r3, #0
 800253a:	d020      	beq.n	800257e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f003 0304 	and.w	r3, r3, #4
 8002544:	2b00      	cmp	r3, #0
 8002546:	d005      	beq.n	8002554 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002548:	4b59      	ldr	r3, [pc, #356]	@ (80026b0 <HAL_RCC_ClockConfig+0x1c4>)
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	4a58      	ldr	r2, [pc, #352]	@ (80026b0 <HAL_RCC_ClockConfig+0x1c4>)
 800254e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002552:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f003 0308 	and.w	r3, r3, #8
 800255c:	2b00      	cmp	r3, #0
 800255e:	d005      	beq.n	800256c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002560:	4b53      	ldr	r3, [pc, #332]	@ (80026b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	4a52      	ldr	r2, [pc, #328]	@ (80026b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002566:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800256a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800256c:	4b50      	ldr	r3, [pc, #320]	@ (80026b0 <HAL_RCC_ClockConfig+0x1c4>)
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	689b      	ldr	r3, [r3, #8]
 8002578:	494d      	ldr	r1, [pc, #308]	@ (80026b0 <HAL_RCC_ClockConfig+0x1c4>)
 800257a:	4313      	orrs	r3, r2
 800257c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f003 0301 	and.w	r3, r3, #1
 8002586:	2b00      	cmp	r3, #0
 8002588:	d040      	beq.n	800260c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	2b01      	cmp	r3, #1
 8002590:	d107      	bne.n	80025a2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002592:	4b47      	ldr	r3, [pc, #284]	@ (80026b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800259a:	2b00      	cmp	r3, #0
 800259c:	d115      	bne.n	80025ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800259e:	2301      	movs	r3, #1
 80025a0:	e07f      	b.n	80026a2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	2b02      	cmp	r3, #2
 80025a8:	d107      	bne.n	80025ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025aa:	4b41      	ldr	r3, [pc, #260]	@ (80026b0 <HAL_RCC_ClockConfig+0x1c4>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d109      	bne.n	80025ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025b6:	2301      	movs	r3, #1
 80025b8:	e073      	b.n	80026a2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025ba:	4b3d      	ldr	r3, [pc, #244]	@ (80026b0 <HAL_RCC_ClockConfig+0x1c4>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f003 0302 	and.w	r3, r3, #2
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d101      	bne.n	80025ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025c6:	2301      	movs	r3, #1
 80025c8:	e06b      	b.n	80026a2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80025ca:	4b39      	ldr	r3, [pc, #228]	@ (80026b0 <HAL_RCC_ClockConfig+0x1c4>)
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	f023 0203 	bic.w	r2, r3, #3
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	4936      	ldr	r1, [pc, #216]	@ (80026b0 <HAL_RCC_ClockConfig+0x1c4>)
 80025d8:	4313      	orrs	r3, r2
 80025da:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80025dc:	f7ff fa28 	bl	8001a30 <HAL_GetTick>
 80025e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025e2:	e00a      	b.n	80025fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025e4:	f7ff fa24 	bl	8001a30 <HAL_GetTick>
 80025e8:	4602      	mov	r2, r0
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	1ad3      	subs	r3, r2, r3
 80025ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d901      	bls.n	80025fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80025f6:	2303      	movs	r3, #3
 80025f8:	e053      	b.n	80026a2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025fa:	4b2d      	ldr	r3, [pc, #180]	@ (80026b0 <HAL_RCC_ClockConfig+0x1c4>)
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	f003 020c 	and.w	r2, r3, #12
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	009b      	lsls	r3, r3, #2
 8002608:	429a      	cmp	r2, r3
 800260a:	d1eb      	bne.n	80025e4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800260c:	4b27      	ldr	r3, [pc, #156]	@ (80026ac <HAL_RCC_ClockConfig+0x1c0>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f003 0307 	and.w	r3, r3, #7
 8002614:	683a      	ldr	r2, [r7, #0]
 8002616:	429a      	cmp	r2, r3
 8002618:	d210      	bcs.n	800263c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800261a:	4b24      	ldr	r3, [pc, #144]	@ (80026ac <HAL_RCC_ClockConfig+0x1c0>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f023 0207 	bic.w	r2, r3, #7
 8002622:	4922      	ldr	r1, [pc, #136]	@ (80026ac <HAL_RCC_ClockConfig+0x1c0>)
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	4313      	orrs	r3, r2
 8002628:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800262a:	4b20      	ldr	r3, [pc, #128]	@ (80026ac <HAL_RCC_ClockConfig+0x1c0>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f003 0307 	and.w	r3, r3, #7
 8002632:	683a      	ldr	r2, [r7, #0]
 8002634:	429a      	cmp	r2, r3
 8002636:	d001      	beq.n	800263c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002638:	2301      	movs	r3, #1
 800263a:	e032      	b.n	80026a2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f003 0304 	and.w	r3, r3, #4
 8002644:	2b00      	cmp	r3, #0
 8002646:	d008      	beq.n	800265a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002648:	4b19      	ldr	r3, [pc, #100]	@ (80026b0 <HAL_RCC_ClockConfig+0x1c4>)
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	68db      	ldr	r3, [r3, #12]
 8002654:	4916      	ldr	r1, [pc, #88]	@ (80026b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002656:	4313      	orrs	r3, r2
 8002658:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f003 0308 	and.w	r3, r3, #8
 8002662:	2b00      	cmp	r3, #0
 8002664:	d009      	beq.n	800267a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002666:	4b12      	ldr	r3, [pc, #72]	@ (80026b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	691b      	ldr	r3, [r3, #16]
 8002672:	00db      	lsls	r3, r3, #3
 8002674:	490e      	ldr	r1, [pc, #56]	@ (80026b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002676:	4313      	orrs	r3, r2
 8002678:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800267a:	f000 f821 	bl	80026c0 <HAL_RCC_GetSysClockFreq>
 800267e:	4602      	mov	r2, r0
 8002680:	4b0b      	ldr	r3, [pc, #44]	@ (80026b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	091b      	lsrs	r3, r3, #4
 8002686:	f003 030f 	and.w	r3, r3, #15
 800268a:	490a      	ldr	r1, [pc, #40]	@ (80026b4 <HAL_RCC_ClockConfig+0x1c8>)
 800268c:	5ccb      	ldrb	r3, [r1, r3]
 800268e:	fa22 f303 	lsr.w	r3, r2, r3
 8002692:	4a09      	ldr	r2, [pc, #36]	@ (80026b8 <HAL_RCC_ClockConfig+0x1cc>)
 8002694:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002696:	4b09      	ldr	r3, [pc, #36]	@ (80026bc <HAL_RCC_ClockConfig+0x1d0>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4618      	mov	r0, r3
 800269c:	f7ff f986 	bl	80019ac <HAL_InitTick>

  return HAL_OK;
 80026a0:	2300      	movs	r3, #0
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	3710      	adds	r7, #16
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd80      	pop	{r7, pc}
 80026aa:	bf00      	nop
 80026ac:	40022000 	.word	0x40022000
 80026b0:	40021000 	.word	0x40021000
 80026b4:	08002fcc 	.word	0x08002fcc
 80026b8:	200000e4 	.word	0x200000e4
 80026bc:	200000e8 	.word	0x200000e8

080026c0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026c0:	b480      	push	{r7}
 80026c2:	b087      	sub	sp, #28
 80026c4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80026c6:	2300      	movs	r3, #0
 80026c8:	60fb      	str	r3, [r7, #12]
 80026ca:	2300      	movs	r3, #0
 80026cc:	60bb      	str	r3, [r7, #8]
 80026ce:	2300      	movs	r3, #0
 80026d0:	617b      	str	r3, [r7, #20]
 80026d2:	2300      	movs	r3, #0
 80026d4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80026d6:	2300      	movs	r3, #0
 80026d8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80026da:	4b1e      	ldr	r3, [pc, #120]	@ (8002754 <HAL_RCC_GetSysClockFreq+0x94>)
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	f003 030c 	and.w	r3, r3, #12
 80026e6:	2b04      	cmp	r3, #4
 80026e8:	d002      	beq.n	80026f0 <HAL_RCC_GetSysClockFreq+0x30>
 80026ea:	2b08      	cmp	r3, #8
 80026ec:	d003      	beq.n	80026f6 <HAL_RCC_GetSysClockFreq+0x36>
 80026ee:	e027      	b.n	8002740 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80026f0:	4b19      	ldr	r3, [pc, #100]	@ (8002758 <HAL_RCC_GetSysClockFreq+0x98>)
 80026f2:	613b      	str	r3, [r7, #16]
      break;
 80026f4:	e027      	b.n	8002746 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	0c9b      	lsrs	r3, r3, #18
 80026fa:	f003 030f 	and.w	r3, r3, #15
 80026fe:	4a17      	ldr	r2, [pc, #92]	@ (800275c <HAL_RCC_GetSysClockFreq+0x9c>)
 8002700:	5cd3      	ldrb	r3, [r2, r3]
 8002702:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800270a:	2b00      	cmp	r3, #0
 800270c:	d010      	beq.n	8002730 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800270e:	4b11      	ldr	r3, [pc, #68]	@ (8002754 <HAL_RCC_GetSysClockFreq+0x94>)
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	0c5b      	lsrs	r3, r3, #17
 8002714:	f003 0301 	and.w	r3, r3, #1
 8002718:	4a11      	ldr	r2, [pc, #68]	@ (8002760 <HAL_RCC_GetSysClockFreq+0xa0>)
 800271a:	5cd3      	ldrb	r3, [r2, r3]
 800271c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	4a0d      	ldr	r2, [pc, #52]	@ (8002758 <HAL_RCC_GetSysClockFreq+0x98>)
 8002722:	fb03 f202 	mul.w	r2, r3, r2
 8002726:	68bb      	ldr	r3, [r7, #8]
 8002728:	fbb2 f3f3 	udiv	r3, r2, r3
 800272c:	617b      	str	r3, [r7, #20]
 800272e:	e004      	b.n	800273a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	4a0c      	ldr	r2, [pc, #48]	@ (8002764 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002734:	fb02 f303 	mul.w	r3, r2, r3
 8002738:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800273a:	697b      	ldr	r3, [r7, #20]
 800273c:	613b      	str	r3, [r7, #16]
      break;
 800273e:	e002      	b.n	8002746 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002740:	4b05      	ldr	r3, [pc, #20]	@ (8002758 <HAL_RCC_GetSysClockFreq+0x98>)
 8002742:	613b      	str	r3, [r7, #16]
      break;
 8002744:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002746:	693b      	ldr	r3, [r7, #16]
}
 8002748:	4618      	mov	r0, r3
 800274a:	371c      	adds	r7, #28
 800274c:	46bd      	mov	sp, r7
 800274e:	bc80      	pop	{r7}
 8002750:	4770      	bx	lr
 8002752:	bf00      	nop
 8002754:	40021000 	.word	0x40021000
 8002758:	007a1200 	.word	0x007a1200
 800275c:	08002fdc 	.word	0x08002fdc
 8002760:	08002fec 	.word	0x08002fec
 8002764:	003d0900 	.word	0x003d0900

08002768 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002768:	b480      	push	{r7}
 800276a:	b085      	sub	sp, #20
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002770:	4b0a      	ldr	r3, [pc, #40]	@ (800279c <RCC_Delay+0x34>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4a0a      	ldr	r2, [pc, #40]	@ (80027a0 <RCC_Delay+0x38>)
 8002776:	fba2 2303 	umull	r2, r3, r2, r3
 800277a:	0a5b      	lsrs	r3, r3, #9
 800277c:	687a      	ldr	r2, [r7, #4]
 800277e:	fb02 f303 	mul.w	r3, r2, r3
 8002782:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002784:	bf00      	nop
  }
  while (Delay --);
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	1e5a      	subs	r2, r3, #1
 800278a:	60fa      	str	r2, [r7, #12]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d1f9      	bne.n	8002784 <RCC_Delay+0x1c>
}
 8002790:	bf00      	nop
 8002792:	bf00      	nop
 8002794:	3714      	adds	r7, #20
 8002796:	46bd      	mov	sp, r7
 8002798:	bc80      	pop	{r7}
 800279a:	4770      	bx	lr
 800279c:	200000e4 	.word	0x200000e4
 80027a0:	10624dd3 	.word	0x10624dd3

080027a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b082      	sub	sp, #8
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d101      	bne.n	80027b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80027b2:	2301      	movs	r3, #1
 80027b4:	e041      	b.n	800283a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80027bc:	b2db      	uxtb	r3, r3
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d106      	bne.n	80027d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2200      	movs	r2, #0
 80027c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80027ca:	6878      	ldr	r0, [r7, #4]
 80027cc:	f7fe ff50 	bl	8001670 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2202      	movs	r2, #2
 80027d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681a      	ldr	r2, [r3, #0]
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	3304      	adds	r3, #4
 80027e0:	4619      	mov	r1, r3
 80027e2:	4610      	mov	r0, r2
 80027e4:	f000 fa56 	bl	8002c94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2201      	movs	r2, #1
 80027ec:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2201      	movs	r2, #1
 80027f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2201      	movs	r2, #1
 80027fc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2201      	movs	r2, #1
 8002804:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2201      	movs	r2, #1
 800280c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2201      	movs	r2, #1
 8002814:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2201      	movs	r2, #1
 800281c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2201      	movs	r2, #1
 8002824:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2201      	movs	r2, #1
 800282c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2201      	movs	r2, #1
 8002834:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002838:	2300      	movs	r3, #0
}
 800283a:	4618      	mov	r0, r3
 800283c:	3708      	adds	r7, #8
 800283e:	46bd      	mov	sp, r7
 8002840:	bd80      	pop	{r7, pc}
	...

08002844 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002844:	b480      	push	{r7}
 8002846:	b085      	sub	sp, #20
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002852:	b2db      	uxtb	r3, r3
 8002854:	2b01      	cmp	r3, #1
 8002856:	d001      	beq.n	800285c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002858:	2301      	movs	r3, #1
 800285a:	e035      	b.n	80028c8 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2202      	movs	r2, #2
 8002860:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	68da      	ldr	r2, [r3, #12]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f042 0201 	orr.w	r2, r2, #1
 8002872:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4a16      	ldr	r2, [pc, #88]	@ (80028d4 <HAL_TIM_Base_Start_IT+0x90>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d009      	beq.n	8002892 <HAL_TIM_Base_Start_IT+0x4e>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002886:	d004      	beq.n	8002892 <HAL_TIM_Base_Start_IT+0x4e>
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a12      	ldr	r2, [pc, #72]	@ (80028d8 <HAL_TIM_Base_Start_IT+0x94>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d111      	bne.n	80028b6 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	689b      	ldr	r3, [r3, #8]
 8002898:	f003 0307 	and.w	r3, r3, #7
 800289c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	2b06      	cmp	r3, #6
 80028a2:	d010      	beq.n	80028c6 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	681a      	ldr	r2, [r3, #0]
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f042 0201 	orr.w	r2, r2, #1
 80028b2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028b4:	e007      	b.n	80028c6 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	681a      	ldr	r2, [r3, #0]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f042 0201 	orr.w	r2, r2, #1
 80028c4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80028c6:	2300      	movs	r3, #0
}
 80028c8:	4618      	mov	r0, r3
 80028ca:	3714      	adds	r7, #20
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bc80      	pop	{r7}
 80028d0:	4770      	bx	lr
 80028d2:	bf00      	nop
 80028d4:	40012c00 	.word	0x40012c00
 80028d8:	40000400 	.word	0x40000400

080028dc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b084      	sub	sp, #16
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	68db      	ldr	r3, [r3, #12]
 80028ea:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	691b      	ldr	r3, [r3, #16]
 80028f2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80028f4:	68bb      	ldr	r3, [r7, #8]
 80028f6:	f003 0302 	and.w	r3, r3, #2
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d020      	beq.n	8002940 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	f003 0302 	and.w	r3, r3, #2
 8002904:	2b00      	cmp	r3, #0
 8002906:	d01b      	beq.n	8002940 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f06f 0202 	mvn.w	r2, #2
 8002910:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2201      	movs	r2, #1
 8002916:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	699b      	ldr	r3, [r3, #24]
 800291e:	f003 0303 	and.w	r3, r3, #3
 8002922:	2b00      	cmp	r3, #0
 8002924:	d003      	beq.n	800292e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002926:	6878      	ldr	r0, [r7, #4]
 8002928:	f000 f998 	bl	8002c5c <HAL_TIM_IC_CaptureCallback>
 800292c:	e005      	b.n	800293a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800292e:	6878      	ldr	r0, [r7, #4]
 8002930:	f000 f98b 	bl	8002c4a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002934:	6878      	ldr	r0, [r7, #4]
 8002936:	f000 f99a 	bl	8002c6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2200      	movs	r2, #0
 800293e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	f003 0304 	and.w	r3, r3, #4
 8002946:	2b00      	cmp	r3, #0
 8002948:	d020      	beq.n	800298c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	f003 0304 	and.w	r3, r3, #4
 8002950:	2b00      	cmp	r3, #0
 8002952:	d01b      	beq.n	800298c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f06f 0204 	mvn.w	r2, #4
 800295c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2202      	movs	r2, #2
 8002962:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	699b      	ldr	r3, [r3, #24]
 800296a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800296e:	2b00      	cmp	r3, #0
 8002970:	d003      	beq.n	800297a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002972:	6878      	ldr	r0, [r7, #4]
 8002974:	f000 f972 	bl	8002c5c <HAL_TIM_IC_CaptureCallback>
 8002978:	e005      	b.n	8002986 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800297a:	6878      	ldr	r0, [r7, #4]
 800297c:	f000 f965 	bl	8002c4a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002980:	6878      	ldr	r0, [r7, #4]
 8002982:	f000 f974 	bl	8002c6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2200      	movs	r2, #0
 800298a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800298c:	68bb      	ldr	r3, [r7, #8]
 800298e:	f003 0308 	and.w	r3, r3, #8
 8002992:	2b00      	cmp	r3, #0
 8002994:	d020      	beq.n	80029d8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	f003 0308 	and.w	r3, r3, #8
 800299c:	2b00      	cmp	r3, #0
 800299e:	d01b      	beq.n	80029d8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f06f 0208 	mvn.w	r2, #8
 80029a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2204      	movs	r2, #4
 80029ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	69db      	ldr	r3, [r3, #28]
 80029b6:	f003 0303 	and.w	r3, r3, #3
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d003      	beq.n	80029c6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029be:	6878      	ldr	r0, [r7, #4]
 80029c0:	f000 f94c 	bl	8002c5c <HAL_TIM_IC_CaptureCallback>
 80029c4:	e005      	b.n	80029d2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029c6:	6878      	ldr	r0, [r7, #4]
 80029c8:	f000 f93f 	bl	8002c4a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029cc:	6878      	ldr	r0, [r7, #4]
 80029ce:	f000 f94e 	bl	8002c6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2200      	movs	r2, #0
 80029d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80029d8:	68bb      	ldr	r3, [r7, #8]
 80029da:	f003 0310 	and.w	r3, r3, #16
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d020      	beq.n	8002a24 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	f003 0310 	and.w	r3, r3, #16
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d01b      	beq.n	8002a24 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f06f 0210 	mvn.w	r2, #16
 80029f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2208      	movs	r2, #8
 80029fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	69db      	ldr	r3, [r3, #28]
 8002a02:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d003      	beq.n	8002a12 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a0a:	6878      	ldr	r0, [r7, #4]
 8002a0c:	f000 f926 	bl	8002c5c <HAL_TIM_IC_CaptureCallback>
 8002a10:	e005      	b.n	8002a1e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a12:	6878      	ldr	r0, [r7, #4]
 8002a14:	f000 f919 	bl	8002c4a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a18:	6878      	ldr	r0, [r7, #4]
 8002a1a:	f000 f928 	bl	8002c6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2200      	movs	r2, #0
 8002a22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002a24:	68bb      	ldr	r3, [r7, #8]
 8002a26:	f003 0301 	and.w	r3, r3, #1
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d00c      	beq.n	8002a48 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	f003 0301 	and.w	r3, r3, #1
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d007      	beq.n	8002a48 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f06f 0201 	mvn.w	r2, #1
 8002a40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002a42:	6878      	ldr	r0, [r7, #4]
 8002a44:	f7fe fc42 	bl	80012cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002a48:	68bb      	ldr	r3, [r7, #8]
 8002a4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d00c      	beq.n	8002a6c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d007      	beq.n	8002a6c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002a64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002a66:	6878      	ldr	r0, [r7, #4]
 8002a68:	f000 fa6f 	bl	8002f4a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002a6c:	68bb      	ldr	r3, [r7, #8]
 8002a6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d00c      	beq.n	8002a90 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d007      	beq.n	8002a90 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002a88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002a8a:	6878      	ldr	r0, [r7, #4]
 8002a8c:	f000 f8f8 	bl	8002c80 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002a90:	68bb      	ldr	r3, [r7, #8]
 8002a92:	f003 0320 	and.w	r3, r3, #32
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d00c      	beq.n	8002ab4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	f003 0320 	and.w	r3, r3, #32
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d007      	beq.n	8002ab4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f06f 0220 	mvn.w	r2, #32
 8002aac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002aae:	6878      	ldr	r0, [r7, #4]
 8002ab0:	f000 fa42 	bl	8002f38 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002ab4:	bf00      	nop
 8002ab6:	3710      	adds	r7, #16
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bd80      	pop	{r7, pc}

08002abc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b084      	sub	sp, #16
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
 8002ac4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002ad0:	2b01      	cmp	r3, #1
 8002ad2:	d101      	bne.n	8002ad8 <HAL_TIM_ConfigClockSource+0x1c>
 8002ad4:	2302      	movs	r3, #2
 8002ad6:	e0b4      	b.n	8002c42 <HAL_TIM_ConfigClockSource+0x186>
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2201      	movs	r2, #1
 8002adc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2202      	movs	r2, #2
 8002ae4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	689b      	ldr	r3, [r3, #8]
 8002aee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002af0:	68bb      	ldr	r3, [r7, #8]
 8002af2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002af6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002af8:	68bb      	ldr	r3, [r7, #8]
 8002afa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002afe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	68ba      	ldr	r2, [r7, #8]
 8002b06:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002b10:	d03e      	beq.n	8002b90 <HAL_TIM_ConfigClockSource+0xd4>
 8002b12:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002b16:	f200 8087 	bhi.w	8002c28 <HAL_TIM_ConfigClockSource+0x16c>
 8002b1a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002b1e:	f000 8086 	beq.w	8002c2e <HAL_TIM_ConfigClockSource+0x172>
 8002b22:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002b26:	d87f      	bhi.n	8002c28 <HAL_TIM_ConfigClockSource+0x16c>
 8002b28:	2b70      	cmp	r3, #112	@ 0x70
 8002b2a:	d01a      	beq.n	8002b62 <HAL_TIM_ConfigClockSource+0xa6>
 8002b2c:	2b70      	cmp	r3, #112	@ 0x70
 8002b2e:	d87b      	bhi.n	8002c28 <HAL_TIM_ConfigClockSource+0x16c>
 8002b30:	2b60      	cmp	r3, #96	@ 0x60
 8002b32:	d050      	beq.n	8002bd6 <HAL_TIM_ConfigClockSource+0x11a>
 8002b34:	2b60      	cmp	r3, #96	@ 0x60
 8002b36:	d877      	bhi.n	8002c28 <HAL_TIM_ConfigClockSource+0x16c>
 8002b38:	2b50      	cmp	r3, #80	@ 0x50
 8002b3a:	d03c      	beq.n	8002bb6 <HAL_TIM_ConfigClockSource+0xfa>
 8002b3c:	2b50      	cmp	r3, #80	@ 0x50
 8002b3e:	d873      	bhi.n	8002c28 <HAL_TIM_ConfigClockSource+0x16c>
 8002b40:	2b40      	cmp	r3, #64	@ 0x40
 8002b42:	d058      	beq.n	8002bf6 <HAL_TIM_ConfigClockSource+0x13a>
 8002b44:	2b40      	cmp	r3, #64	@ 0x40
 8002b46:	d86f      	bhi.n	8002c28 <HAL_TIM_ConfigClockSource+0x16c>
 8002b48:	2b30      	cmp	r3, #48	@ 0x30
 8002b4a:	d064      	beq.n	8002c16 <HAL_TIM_ConfigClockSource+0x15a>
 8002b4c:	2b30      	cmp	r3, #48	@ 0x30
 8002b4e:	d86b      	bhi.n	8002c28 <HAL_TIM_ConfigClockSource+0x16c>
 8002b50:	2b20      	cmp	r3, #32
 8002b52:	d060      	beq.n	8002c16 <HAL_TIM_ConfigClockSource+0x15a>
 8002b54:	2b20      	cmp	r3, #32
 8002b56:	d867      	bhi.n	8002c28 <HAL_TIM_ConfigClockSource+0x16c>
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d05c      	beq.n	8002c16 <HAL_TIM_ConfigClockSource+0x15a>
 8002b5c:	2b10      	cmp	r3, #16
 8002b5e:	d05a      	beq.n	8002c16 <HAL_TIM_ConfigClockSource+0x15a>
 8002b60:	e062      	b.n	8002c28 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002b72:	f000 f96a 	bl	8002e4a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	689b      	ldr	r3, [r3, #8]
 8002b7c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002b7e:	68bb      	ldr	r3, [r7, #8]
 8002b80:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002b84:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	68ba      	ldr	r2, [r7, #8]
 8002b8c:	609a      	str	r2, [r3, #8]
      break;
 8002b8e:	e04f      	b.n	8002c30 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002ba0:	f000 f953 	bl	8002e4a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	689a      	ldr	r2, [r3, #8]
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002bb2:	609a      	str	r2, [r3, #8]
      break;
 8002bb4:	e03c      	b.n	8002c30 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002bc2:	461a      	mov	r2, r3
 8002bc4:	f000 f8ca 	bl	8002d5c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	2150      	movs	r1, #80	@ 0x50
 8002bce:	4618      	mov	r0, r3
 8002bd0:	f000 f921 	bl	8002e16 <TIM_ITRx_SetConfig>
      break;
 8002bd4:	e02c      	b.n	8002c30 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002be2:	461a      	mov	r2, r3
 8002be4:	f000 f8e8 	bl	8002db8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	2160      	movs	r1, #96	@ 0x60
 8002bee:	4618      	mov	r0, r3
 8002bf0:	f000 f911 	bl	8002e16 <TIM_ITRx_SetConfig>
      break;
 8002bf4:	e01c      	b.n	8002c30 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c02:	461a      	mov	r2, r3
 8002c04:	f000 f8aa 	bl	8002d5c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	2140      	movs	r1, #64	@ 0x40
 8002c0e:	4618      	mov	r0, r3
 8002c10:	f000 f901 	bl	8002e16 <TIM_ITRx_SetConfig>
      break;
 8002c14:	e00c      	b.n	8002c30 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681a      	ldr	r2, [r3, #0]
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4619      	mov	r1, r3
 8002c20:	4610      	mov	r0, r2
 8002c22:	f000 f8f8 	bl	8002e16 <TIM_ITRx_SetConfig>
      break;
 8002c26:	e003      	b.n	8002c30 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002c28:	2301      	movs	r3, #1
 8002c2a:	73fb      	strb	r3, [r7, #15]
      break;
 8002c2c:	e000      	b.n	8002c30 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002c2e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2201      	movs	r2, #1
 8002c34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002c40:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c42:	4618      	mov	r0, r3
 8002c44:	3710      	adds	r7, #16
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bd80      	pop	{r7, pc}

08002c4a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002c4a:	b480      	push	{r7}
 8002c4c:	b083      	sub	sp, #12
 8002c4e:	af00      	add	r7, sp, #0
 8002c50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002c52:	bf00      	nop
 8002c54:	370c      	adds	r7, #12
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bc80      	pop	{r7}
 8002c5a:	4770      	bx	lr

08002c5c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	b083      	sub	sp, #12
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002c64:	bf00      	nop
 8002c66:	370c      	adds	r7, #12
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bc80      	pop	{r7}
 8002c6c:	4770      	bx	lr

08002c6e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002c6e:	b480      	push	{r7}
 8002c70:	b083      	sub	sp, #12
 8002c72:	af00      	add	r7, sp, #0
 8002c74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002c76:	bf00      	nop
 8002c78:	370c      	adds	r7, #12
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bc80      	pop	{r7}
 8002c7e:	4770      	bx	lr

08002c80 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002c80:	b480      	push	{r7}
 8002c82:	b083      	sub	sp, #12
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002c88:	bf00      	nop
 8002c8a:	370c      	adds	r7, #12
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bc80      	pop	{r7}
 8002c90:	4770      	bx	lr
	...

08002c94 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002c94:	b480      	push	{r7}
 8002c96:	b085      	sub	sp, #20
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
 8002c9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	4a2b      	ldr	r2, [pc, #172]	@ (8002d54 <TIM_Base_SetConfig+0xc0>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d007      	beq.n	8002cbc <TIM_Base_SetConfig+0x28>
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002cb2:	d003      	beq.n	8002cbc <TIM_Base_SetConfig+0x28>
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	4a28      	ldr	r2, [pc, #160]	@ (8002d58 <TIM_Base_SetConfig+0xc4>)
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	d108      	bne.n	8002cce <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002cc2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	68fa      	ldr	r2, [r7, #12]
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	4a20      	ldr	r2, [pc, #128]	@ (8002d54 <TIM_Base_SetConfig+0xc0>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d007      	beq.n	8002ce6 <TIM_Base_SetConfig+0x52>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002cdc:	d003      	beq.n	8002ce6 <TIM_Base_SetConfig+0x52>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	4a1d      	ldr	r2, [pc, #116]	@ (8002d58 <TIM_Base_SetConfig+0xc4>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d108      	bne.n	8002cf8 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002cec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	68db      	ldr	r3, [r3, #12]
 8002cf2:	68fa      	ldr	r2, [r7, #12]
 8002cf4:	4313      	orrs	r3, r2
 8002cf6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	695b      	ldr	r3, [r3, #20]
 8002d02:	4313      	orrs	r3, r2
 8002d04:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	68fa      	ldr	r2, [r7, #12]
 8002d0a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	689a      	ldr	r2, [r3, #8]
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	681a      	ldr	r2, [r3, #0]
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	4a0d      	ldr	r2, [pc, #52]	@ (8002d54 <TIM_Base_SetConfig+0xc0>)
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d103      	bne.n	8002d2c <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	691a      	ldr	r2, [r3, #16]
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2201      	movs	r2, #1
 8002d30:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	691b      	ldr	r3, [r3, #16]
 8002d36:	f003 0301 	and.w	r3, r3, #1
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d005      	beq.n	8002d4a <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	691b      	ldr	r3, [r3, #16]
 8002d42:	f023 0201 	bic.w	r2, r3, #1
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	611a      	str	r2, [r3, #16]
  }
}
 8002d4a:	bf00      	nop
 8002d4c:	3714      	adds	r7, #20
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bc80      	pop	{r7}
 8002d52:	4770      	bx	lr
 8002d54:	40012c00 	.word	0x40012c00
 8002d58:	40000400 	.word	0x40000400

08002d5c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	b087      	sub	sp, #28
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	60f8      	str	r0, [r7, #12]
 8002d64:	60b9      	str	r1, [r7, #8]
 8002d66:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	6a1b      	ldr	r3, [r3, #32]
 8002d6c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	6a1b      	ldr	r3, [r3, #32]
 8002d72:	f023 0201 	bic.w	r2, r3, #1
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	699b      	ldr	r3, [r3, #24]
 8002d7e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002d80:	693b      	ldr	r3, [r7, #16]
 8002d82:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002d86:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	011b      	lsls	r3, r3, #4
 8002d8c:	693a      	ldr	r2, [r7, #16]
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002d92:	697b      	ldr	r3, [r7, #20]
 8002d94:	f023 030a 	bic.w	r3, r3, #10
 8002d98:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002d9a:	697a      	ldr	r2, [r7, #20]
 8002d9c:	68bb      	ldr	r3, [r7, #8]
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	693a      	ldr	r2, [r7, #16]
 8002da6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	697a      	ldr	r2, [r7, #20]
 8002dac:	621a      	str	r2, [r3, #32]
}
 8002dae:	bf00      	nop
 8002db0:	371c      	adds	r7, #28
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bc80      	pop	{r7}
 8002db6:	4770      	bx	lr

08002db8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002db8:	b480      	push	{r7}
 8002dba:	b087      	sub	sp, #28
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	60f8      	str	r0, [r7, #12]
 8002dc0:	60b9      	str	r1, [r7, #8]
 8002dc2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	6a1b      	ldr	r3, [r3, #32]
 8002dc8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	6a1b      	ldr	r3, [r3, #32]
 8002dce:	f023 0210 	bic.w	r2, r3, #16
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	699b      	ldr	r3, [r3, #24]
 8002dda:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002ddc:	693b      	ldr	r3, [r7, #16]
 8002dde:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002de2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	031b      	lsls	r3, r3, #12
 8002de8:	693a      	ldr	r2, [r7, #16]
 8002dea:	4313      	orrs	r3, r2
 8002dec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002dee:	697b      	ldr	r3, [r7, #20]
 8002df0:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002df4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002df6:	68bb      	ldr	r3, [r7, #8]
 8002df8:	011b      	lsls	r3, r3, #4
 8002dfa:	697a      	ldr	r2, [r7, #20]
 8002dfc:	4313      	orrs	r3, r2
 8002dfe:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	693a      	ldr	r2, [r7, #16]
 8002e04:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	697a      	ldr	r2, [r7, #20]
 8002e0a:	621a      	str	r2, [r3, #32]
}
 8002e0c:	bf00      	nop
 8002e0e:	371c      	adds	r7, #28
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bc80      	pop	{r7}
 8002e14:	4770      	bx	lr

08002e16 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002e16:	b480      	push	{r7}
 8002e18:	b085      	sub	sp, #20
 8002e1a:	af00      	add	r7, sp, #0
 8002e1c:	6078      	str	r0, [r7, #4]
 8002e1e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	689b      	ldr	r3, [r3, #8]
 8002e24:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002e2c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002e2e:	683a      	ldr	r2, [r7, #0]
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	4313      	orrs	r3, r2
 8002e34:	f043 0307 	orr.w	r3, r3, #7
 8002e38:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	68fa      	ldr	r2, [r7, #12]
 8002e3e:	609a      	str	r2, [r3, #8]
}
 8002e40:	bf00      	nop
 8002e42:	3714      	adds	r7, #20
 8002e44:	46bd      	mov	sp, r7
 8002e46:	bc80      	pop	{r7}
 8002e48:	4770      	bx	lr

08002e4a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002e4a:	b480      	push	{r7}
 8002e4c:	b087      	sub	sp, #28
 8002e4e:	af00      	add	r7, sp, #0
 8002e50:	60f8      	str	r0, [r7, #12]
 8002e52:	60b9      	str	r1, [r7, #8]
 8002e54:	607a      	str	r2, [r7, #4]
 8002e56:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	689b      	ldr	r3, [r3, #8]
 8002e5c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e5e:	697b      	ldr	r3, [r7, #20]
 8002e60:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002e64:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	021a      	lsls	r2, r3, #8
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	431a      	orrs	r2, r3
 8002e6e:	68bb      	ldr	r3, [r7, #8]
 8002e70:	4313      	orrs	r3, r2
 8002e72:	697a      	ldr	r2, [r7, #20]
 8002e74:	4313      	orrs	r3, r2
 8002e76:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	697a      	ldr	r2, [r7, #20]
 8002e7c:	609a      	str	r2, [r3, #8]
}
 8002e7e:	bf00      	nop
 8002e80:	371c      	adds	r7, #28
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bc80      	pop	{r7}
 8002e86:	4770      	bx	lr

08002e88 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002e88:	b480      	push	{r7}
 8002e8a:	b085      	sub	sp, #20
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
 8002e90:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002e98:	2b01      	cmp	r3, #1
 8002e9a:	d101      	bne.n	8002ea0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002e9c:	2302      	movs	r3, #2
 8002e9e:	e041      	b.n	8002f24 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2201      	movs	r2, #1
 8002ea4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2202      	movs	r2, #2
 8002eac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	689b      	ldr	r3, [r3, #8]
 8002ebe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002ec6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	68fa      	ldr	r2, [r7, #12]
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	68fa      	ldr	r2, [r7, #12]
 8002ed8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4a14      	ldr	r2, [pc, #80]	@ (8002f30 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d009      	beq.n	8002ef8 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002eec:	d004      	beq.n	8002ef8 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4a10      	ldr	r2, [pc, #64]	@ (8002f34 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d10c      	bne.n	8002f12 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002ef8:	68bb      	ldr	r3, [r7, #8]
 8002efa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002efe:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	68ba      	ldr	r2, [r7, #8]
 8002f06:	4313      	orrs	r3, r2
 8002f08:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	68ba      	ldr	r2, [r7, #8]
 8002f10:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2201      	movs	r2, #1
 8002f16:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002f22:	2300      	movs	r3, #0
}
 8002f24:	4618      	mov	r0, r3
 8002f26:	3714      	adds	r7, #20
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	bc80      	pop	{r7}
 8002f2c:	4770      	bx	lr
 8002f2e:	bf00      	nop
 8002f30:	40012c00 	.word	0x40012c00
 8002f34:	40000400 	.word	0x40000400

08002f38 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002f38:	b480      	push	{r7}
 8002f3a:	b083      	sub	sp, #12
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002f40:	bf00      	nop
 8002f42:	370c      	adds	r7, #12
 8002f44:	46bd      	mov	sp, r7
 8002f46:	bc80      	pop	{r7}
 8002f48:	4770      	bx	lr

08002f4a <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002f4a:	b480      	push	{r7}
 8002f4c:	b083      	sub	sp, #12
 8002f4e:	af00      	add	r7, sp, #0
 8002f50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002f52:	bf00      	nop
 8002f54:	370c      	adds	r7, #12
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bc80      	pop	{r7}
 8002f5a:	4770      	bx	lr

08002f5c <memset>:
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	4402      	add	r2, r0
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d100      	bne.n	8002f66 <memset+0xa>
 8002f64:	4770      	bx	lr
 8002f66:	f803 1b01 	strb.w	r1, [r3], #1
 8002f6a:	e7f9      	b.n	8002f60 <memset+0x4>

08002f6c <__libc_init_array>:
 8002f6c:	b570      	push	{r4, r5, r6, lr}
 8002f6e:	2600      	movs	r6, #0
 8002f70:	4d0c      	ldr	r5, [pc, #48]	@ (8002fa4 <__libc_init_array+0x38>)
 8002f72:	4c0d      	ldr	r4, [pc, #52]	@ (8002fa8 <__libc_init_array+0x3c>)
 8002f74:	1b64      	subs	r4, r4, r5
 8002f76:	10a4      	asrs	r4, r4, #2
 8002f78:	42a6      	cmp	r6, r4
 8002f7a:	d109      	bne.n	8002f90 <__libc_init_array+0x24>
 8002f7c:	f000 f81a 	bl	8002fb4 <_init>
 8002f80:	2600      	movs	r6, #0
 8002f82:	4d0a      	ldr	r5, [pc, #40]	@ (8002fac <__libc_init_array+0x40>)
 8002f84:	4c0a      	ldr	r4, [pc, #40]	@ (8002fb0 <__libc_init_array+0x44>)
 8002f86:	1b64      	subs	r4, r4, r5
 8002f88:	10a4      	asrs	r4, r4, #2
 8002f8a:	42a6      	cmp	r6, r4
 8002f8c:	d105      	bne.n	8002f9a <__libc_init_array+0x2e>
 8002f8e:	bd70      	pop	{r4, r5, r6, pc}
 8002f90:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f94:	4798      	blx	r3
 8002f96:	3601      	adds	r6, #1
 8002f98:	e7ee      	b.n	8002f78 <__libc_init_array+0xc>
 8002f9a:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f9e:	4798      	blx	r3
 8002fa0:	3601      	adds	r6, #1
 8002fa2:	e7f2      	b.n	8002f8a <__libc_init_array+0x1e>
 8002fa4:	08002ff0 	.word	0x08002ff0
 8002fa8:	08002ff0 	.word	0x08002ff0
 8002fac:	08002ff0 	.word	0x08002ff0
 8002fb0:	08002ff4 	.word	0x08002ff4

08002fb4 <_init>:
 8002fb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fb6:	bf00      	nop
 8002fb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002fba:	bc08      	pop	{r3}
 8002fbc:	469e      	mov	lr, r3
 8002fbe:	4770      	bx	lr

08002fc0 <_fini>:
 8002fc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fc2:	bf00      	nop
 8002fc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002fc6:	bc08      	pop	{r3}
 8002fc8:	469e      	mov	lr, r3
 8002fca:	4770      	bx	lr
